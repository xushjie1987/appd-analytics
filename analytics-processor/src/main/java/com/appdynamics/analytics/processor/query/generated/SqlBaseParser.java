/*      */ package com.appdynamics.analytics.processor.query.generated;
/*      */ 
/*      */ import org.antlr.v4.runtime.tree.ParseTreeListener;
/*      */ 
/*      */ public class SqlBaseParser extends org.antlr.v4.runtime.Parser { protected static final org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA;
/*      */   protected static final org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache;
/*      */   public static final int T__5 = 1;
/*      */   public static final int T__4 = 2;
/*      */   public static final int T__3 = 3;
/*      */   public static final int T__2 = 4;
/*      */   public static final int T__1 = 5;
/*      */   public static final int T__0 = 6;
/*      */   public static final int SELECT = 7;
/*      */   public static final int FROM = 8;
/*      */   public static final int AS = 9;
/*      */   public static final int ALL = 10;
/*      */   public static final int SOME = 11;
/*      */   public static final int ANY = 12;
/*      */   public static final int DISTINCT = 13;
/*      */   public static final int WHERE = 14;
/*      */   public static final int GROUP = 15;
/*      */   public static final int BY = 16;
/*      */   public static final int ORDER = 17;
/*      */   public static final int HAVING = 18;
/*      */   public static final int LIMIT = 19;
/*      */   public static final int APPROXIMATE = 20;
/*      */   public static final int AT = 21;
/*      */   public static final int CONFIDENCE = 22;
/*      */   public static final int OR = 23;
/*      */   public static final int AND = 24;
/*      */   public static final int IN = 25;
/*      */   public static final int NOT = 26;
/*      */   public static final int EXISTS = 27;
/*      */   public static final int BETWEEN = 28;
/*      */   public static final int LIKE = 29;
/*      */   public static final int IS = 30;
/*      */   public static final int NULL = 31;
/*      */   public static final int TRUE = 32;
/*      */   public static final int FALSE = 33;
/*      */   public static final int NULLS = 34;
/*      */   public static final int FIRST = 35;
/*      */   public static final int LAST = 36;
/*      */   public static final int ESCAPE = 37;
/*      */   public static final int ASC = 38;
/*      */   public static final int DESC = 39;
/*      */   public static final int SUBSTRING = 40;
/*      */   public static final int FOR = 41;
/*      */   public static final int DATE = 42;
/*      */   public static final int TIME = 43;
/*      */   public static final int TIMESTAMP = 44;
/*      */   public static final int INTERVAL = 45;
/*      */   public static final int YEAR = 46;
/*      */   public static final int MONTH = 47;
/*      */   public static final int DAY = 48;
/*      */   public static final int HOUR = 49;
/*      */   public static final int MINUTE = 50;
/*      */   public static final int SECOND = 51;
/*      */   public static final int ZONE = 52;
/*      */   public static final int CURRENT_DATE = 53;
/*      */   public static final int CURRENT_TIME = 54;
/*      */   public static final int CURRENT_TIMESTAMP = 55;
/*      */   public static final int LOCALTIME = 56;
/*      */   public static final int LOCALTIMESTAMP = 57;
/*      */   public static final int EXTRACT = 58;
/*      */   public static final int CASE = 59;
/*      */   public static final int WHEN = 60;
/*      */   public static final int THEN = 61;
/*      */   public static final int ELSE = 62;
/*      */   public static final int END = 63;
/*      */   public static final int JOIN = 64;
/*      */   public static final int CROSS = 65;
/*      */   public static final int OUTER = 66;
/*      */   public static final int INNER = 67;
/*      */   public static final int LEFT = 68;
/*      */   public static final int RIGHT = 69;
/*      */   public static final int FULL = 70;
/*      */   public static final int NATURAL = 71;
/*      */   public static final int USING = 72;
/*      */   public static final int ON = 73;
/*      */   public static final int OVER = 74;
/*      */   public static final int PARTITION = 75;
/*      */   public static final int RANGE = 76;
/*      */   public static final int ROWS = 77;
/*      */   public static final int UNBOUNDED = 78;
/*      */   public static final int PRECEDING = 79;
/*      */   public static final int FOLLOWING = 80;
/*      */   public static final int CURRENT = 81;
/*      */   public static final int ROW = 82;
/*      */   public static final int WITH = 83;
/*      */   public static final int RECURSIVE = 84;
/*      */   public static final int VALUES = 85;
/*      */   public static final int CREATE = 86;
/*      */   public static final int TABLE = 87;
/*      */   public static final int VIEW = 88;
/*      */   public static final int REPLACE = 89;
/*      */   public static final int INSERT = 90;
/*      */   public static final int INTO = 91; public static final int CONSTRAINT = 92; public static final int DESCRIBE = 93; public static final int EXPLAIN = 94; public static final int FORMAT = 95; public static final int TYPE = 96; public static final int TEXT = 97; public static final int GRAPHVIZ = 98; public static final int JSON = 99; public static final int LOGICAL = 100; public static final int DISTRIBUTED = 101; public static final int CAST = 102; public static final int TRY_CAST = 103; public static final int SHOW = 104; public static final int TABLES = 105; public static final int SCHEMAS = 106; public static final int CATALOGS = 107; public static final int COLUMNS = 108; public static final int USE = 109; public static final int PARTITIONS = 110; public static final int FUNCTIONS = 111; public static final int DROP = 112; public static final int UNION = 113; public static final int EXCEPT = 114;
/*   98 */   public String getGrammarFileName() { return "SqlBase.g4"; }
/*      */   
/*      */   public static final int INTERSECT = 115; public static final int TO = 116; public static final int SYSTEM = 117; public static final int BERNOULLI = 118; public static final int POISSONIZED = 119; public static final int TABLESAMPLE = 120; public static final int RESCALED = 121; public static final int STRATIFY = 122; public static final int ALTER = 123; public static final int RENAME = 124; public static final int UNNEST = 125; public static final int ARRAY = 126; public static final int SET = 127; public static final int RESET = 128; public static final int SESSION = 129; public static final int IF = 130; public static final int NULLIF = 131; public static final int COALESCE = 132; public static final int EQ = 133; public static final int NEQ = 134; public static final int LT = 135;
/*  101 */   public String[] getTokenNames() { return tokenNames; }
/*      */   
/*      */   public static final int LTE = 136; public static final int GT = 137; public static final int GTE = 138; public static final int PLUS = 139; public static final int MINUS = 140; public static final int ASTERISK = 141; public static final int SLASH = 142; public static final int PERCENT = 143; public static final int CONCAT = 144;
/*  104 */   public String[] getRuleNames() { return ruleNames; }
/*      */   
/*      */   public static final int STRING = 145; public static final int INTEGER_VALUE = 146; public static final int DECIMAL_VALUE = 147; public static final int IDENTIFIER = 148; public static final int DIGIT_IDENTIFIER = 149; public static final int QUOTED_IDENTIFIER = 150; public static final int BACKQUOTED_IDENTIFIER = 151; public static final int TIME_WITH_TIME_ZONE = 152; public static final int TIMESTAMP_WITH_TIME_ZONE = 153;
/*  107 */   public String getSerializedATN() { return "\003а훑舆괭䐗껱趀ꫝ\003 Λ\004\002\t\002\004\003\t\003\004\004\t\004\004\005\t\005\004\006\t\006\004\007\t\007\004\b\t\b\004\t\t\t\004\n\t\n\004\013\t\013\004\f\t\f\004\r\t\r\004\016\t\016\004\017\t\017\004\020\t\020\004\021\t\021\004\022\t\022\004\023\t\023\004\024\t\024\004\025\t\025\004\026\t\026\004\027\t\027\004\030\t\030\004\031\t\031\004\032\t\032\004\033\t\033\004\034\t\034\004\035\t\035\004\036\t\036\004\037\t\037\004 \t \004!\t!\004\"\t\"\004#\t#\004$\t$\004%\t%\004&\t&\004'\t'\004(\t(\004)\t)\004*\t*\004+\t+\004,\t,\004-\t-\003\002\003\002\003\002\003\003\003\003\003\003\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\005\004\n\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\007\004\n\004\f\004\016\004\013\004\003\004\003\004\005\004\n\004\003\004\003\004\003\004\003\004\003\004\005\004\n\004\003\004\003\004\005\004¢\n\004\003\004\003\004\003\004\003\004\005\004¨\n\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\005\004Ç\n\004\003\004\003\004\003\004\003\004\003\004\007\004Î\n\004\f\004\016\004Ñ\013\004\005\004Ó\n\004\003\004\003\004\005\004×\n\004\005\004Ù\n\004\003\005\005\005Ü\n\005\003\005\003\005\003\006\003\006\005\006â\n\006\003\006\003\006\003\006\007\006ç\n\006\f\006\016\006ê\013\006\003\007\003\007\003\007\003\007\003\007\003\007\007\007ò\n\007\f\007\016\007õ\013\007\005\007÷\n\007\003\007\003\007\005\007û\n\007\003\007\003\007\003\007\003\007\003\007\005\007Ă\n\007\003\b\003\b\003\b\003\b\003\b\003\b\005\bĊ\n\b\003\b\003\b\003\b\003\b\005\bĐ\n\b\003\b\007\bē\n\b\f\b\016\bĖ\013\b\003\t\003\t\003\t\003\t\003\t\003\t\003\t\007\tğ\n\t\f\t\016\tĢ\013\t\003\t\003\t\003\t\003\t\005\tĨ\n\t\003\n\003\n\005\nĬ\n\n\003\n\003\n\005\nİ\n\n\003\013\003\013\005\013Ĵ\n\013\003\013\003\013\003\013\007\013Ĺ\n\013\f\013\016\013ļ\013\013\003\013\003\013\003\013\003\013\007\013ł\n\013\f\013\016\013Ņ\013\013\005\013Ň\n\013\003\013\003\013\005\013ŋ\n\013\003\013\003\013\003\013\003\013\003\013\007\013Œ\n\013\f\013\016\013ŕ\013\013\005\013ŗ\n\013\003\013\003\013\005\013ś\n\013\003\f\003\f\005\fş\n\f\003\f\003\f\003\f\003\f\003\f\003\r\003\r\003\016\003\016\005\016Ū\n\016\003\016\005\016ŭ\n\016\003\016\003\016\003\016\003\016\003\016\005\016Ŵ\n\016\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\005\017Ƈ\n\017\007\017Ɖ\n\017\f\017\016\017ƌ\013\017\003\020\005\020Ə\n\020\003\020\003\020\005\020Ɠ\n\020\003\020\003\020\005\020Ɨ\n\020\003\020\003\020\005\020ƛ\n\020\005\020Ɲ\n\020\003\021\003\021\003\021\003\021\003\021\003\021\003\021\007\021Ʀ\n\021\f\021\016\021Ʃ\013\021\003\021\003\021\005\021ƭ\n\021\003\022\003\022\003\022\003\022\003\022\003\022\003\022\005\022ƶ\n\022\003\022\003\022\003\022\003\022\003\022\003\022\007\022ƾ\n\022\f\022\016\022ǁ\013\022\003\022\003\022\005\022ǅ\n\022\005\022Ǉ\n\022\003\023\003\023\003\024\003\024\005\024Ǎ\n\024\003\024\003\024\005\024Ǒ\n\024\005\024Ǔ\n\024\003\025\003\025\003\025\003\025\007\025Ǚ\n\025\f\025\016\025ǜ\013\025\003\025\003\025\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\007\026Ǫ\n\026\f\026\016\026ǭ\013\026\003\026\003\026\003\026\003\026\003\026\003\026\005\026ǵ\n\026\003\027\003\027\003\030\003\030\003\030\003\030\003\030\003\030\003\030\003\030\003\030\005\030Ȃ\n\030\003\030\003\030\003\030\003\030\003\030\003\030\007\030Ȋ\n\030\f\030\016\030ȍ\013\030\003\031\003\031\005\031ȑ\n\031\003\032\003\032\003\032\003\032\005\032ȗ\n\032\003\032\003\032\003\032\003\032\003\032\003\032\005\032ȟ\n\032\003\032\003\032\003\032\003\032\003\032\007\032Ȧ\n\032\f\032\016\032ȩ\013\032\003\032\003\032\003\032\005\032Ȯ\n\032\003\032\003\032\003\032\003\032\003\032\003\032\005\032ȶ\n\032\003\032\003\032\003\032\003\032\005\032ȼ\n\032\003\032\003\032\005\032ɀ\n\032\003\032\003\032\003\032\005\032Ʌ\n\032\003\032\003\032\003\032\005\032Ɋ\n\032\003\033\003\033\003\033\003\033\005\033ɐ\n\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\007\033ɞ\n\033\f\033\016\033ɡ\013\033\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\006\034ɰ\n\034\r\034\016\034ɱ\003\034\003\034\003\034\003\034\003\034\003\034\003\034\007\034ɻ\n\034\f\034\016\034ɾ\013\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034ʈ\n\034\003\034\003\034\003\034\005\034ʍ\n\034\003\034\003\034\003\034\007\034ʒ\n\034\f\034\016\034ʕ\013\034\005\034ʗ\n\034\003\034\003\034\005\034ʛ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\006\034ʤ\n\034\r\034\016\034ʥ\003\034\003\034\005\034ʪ\n\034\003\034\003\034\003\034\003\034\006\034ʰ\n\034\r\034\016\034ʱ\003\034\003\034\005\034ʶ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\007\034ˍ\n\034\f\034\016\034ː\013\034\005\034˒\n\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034˚\n\034\003\034\003\034\003\034\003\034\005\034ˠ\n\034\003\034\003\034\003\034\003\034\005\034˦\n\034\003\034\003\034\003\034\003\034\005\034ˬ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034˵\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034̄\n\034\003\034\003\034\003\034\003\034\003\034\007\034̋\n\034\f\034\016\034̎\013\034\003\035\003\035\003\035\003\035\003\035\003\035\005\035̖\n\035\003\036\003\036\003\037\003\037\003 \003 \005 ̞\n \003 \003 \003 \003 \005 ̤\n \003!\003!\003\"\003\"\003\"\003\"\003\"\003\"\003\"\005\"̯\n\"\003\"\003\"\007\"̳\n\"\f\"\016\"̶\013\"\003#\003#\003#\005#̻\n#\003$\003$\003$\003$\003$\003%\003%\003%\003%\003%\003%\003%\007%͉\n%\f%\016%͌\013%\005%͎\n%\003%\003%\003%\003%\003%\007%͕\n%\f%\016%͘\013%\005%͚\n%\003%\005%͝\n%\003%\003%\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\005&ͱ\n&\003'\003'\003'\003'\003'\003'\003'\003'\003'\005'ͼ\n'\003(\003(\003(\003(\005(΂\n(\003)\003)\003)\007)·\n)\f)\016)Ί\013)\003*\003*\003*\003*\003*\005*Α\n*\003+\003+\003,\003,\005,Η\n,\003-\003-\003-\002\b\016\034.46B.\002\004\006\b\n\f\016\020\022\024\026\030\032\034\036 \"$&(*,.02468:<>@BDFHJLNPRTVX\002\021\004\002\n\n\033\033\003\002st\003\002()\003\002%&\004\002\f\f\017\017\003\002wy\003\002\003\002\003\002\003\002\"#\003\00205\003\002QR\003\002ce\003\002fg\013\002\026\030,5LOQTZ[`gjqv{О\002Z\003\002\002\002\004]\003\002\002\002\006Ø\003\002\002\002\bÛ\003\002\002\002\nß\003\002\002\002\fë\003\002\002\002\016ă\003\002\002\002\020ħ\003\002\002\002\022ĩ\003\002\002\002\024ı\003\002\002\002\026Ŝ\003\002\002\002\030ť\003\002\002\002\032ų\003\002\002\002\034ŵ\003\002\002\002\036Ɯ\003\002\002\002 Ƭ\003\002\002\002\"Ʈ\003\002\002\002$ǈ\003\002\002\002&Ǌ\003\002\002\002(ǔ\003\002\002\002*Ǵ\003\002\002\002,Ƕ\003\002\002\002.ȁ\003\002\002\0020Ȏ\003\002\002\0022ɉ\003\002\002\0024ɏ\003\002\002\0026̃\003\002\002\0028̕\003\002\002\002:̗\003\002\002\002<̙\003\002\002\002>̛\003\002\002\002@̥\003\002\002\002B̮\003\002\002\002D̺\003\002\002\002F̼\003\002\002\002H́\003\002\002\002JͰ\003\002\002\002Lͻ\003\002\002\002N΁\003\002\002\002P΃\003\002\002\002Rΐ\003\002\002\002TΒ\003\002\002\002VΖ\003\002\002\002XΘ\003\002\002\002Z[\005\006\004\002[\\\007\002\002\003\\\003\003\002\002\002]^\005,\027\002^_\007\002\002\003_\005\003\002\002\002`Ù\005\b\005\002ab\007o\002\002bÙ\005R*\002cd\007o\002\002de\005R*\002ef\007\004\002\002fg\005R*\002gÙ\003\002\002\002hi\007X\002\002ij\007Y\002\002jk\005P)\002kl\007\013\002\002lm\005\b\005\002mÙ\003\002\002\002no\007r\002\002op\007Y\002\002pÙ\005P)\002qr\007\\\002\002rs\007]\002\002st\005P)\002tu\005\b\005\002uÙ\003\002\002\002vw\007}\002\002wx\007Y\002\002xy\005P)\002yz\007~\002\002z{\007v\002\002{|\005P)\002|Ù\003\002\002\002}\007X\002\002~\007\031\002\002\007[\002\002~\003\002\002\002\003\002\002\002\003\002\002\002\007Z\002\002\005P)\002\007\013\002\002\005\b\005\002Ù\003\002\002\002\007r\002\002\007Z\002\002Ù\005P)\002\007`\002\002\007\b\002\002\005N(\002\007\006\002\002\005N(\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\007\005\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002Ù\005\006\004\002\007j\002\002\007k\002\002\t\002\002\002\005P)\002\003\002\002\002\003\002\002\002¡\003\002\002\002 \007\037\002\002 ¢\007\002\002¡\003\002\002\002¡¢\003\002\002\002¢Ù\003\002\002\002£¤\007j\002\002¤§\007l\002\002¥¦\t\002\002\002¦¨\005R*\002§¥\003\002\002\002§¨\003\002\002\002¨Ù\003\002\002\002©ª\007j\002\002ªÙ\007m\002\002«¬\007j\002\002¬­\007n\002\002­®\t\002\002\002®Ù\005P)\002¯°\007_\002\002°Ù\005P)\002±²\007)\002\002²Ù\005P)\002³´\007j\002\002´Ù\007q\002\002µ¶\007j\002\002¶Ù\007\002\002·¸\007\002\002¸¹\007\002\002¹º\005P)\002º»\007\002\002»¼\007\002\002¼Ù\003\002\002\002½¾\007\002\002¾¿\007\002\002¿Ù\005P)\002ÀÁ\007j\002\002ÁÂ\007p\002\002ÂÃ\t\002\002\002ÃÆ\005P)\002ÄÅ\007\020\002\002ÅÇ\005.\030\002ÆÄ\003\002\002\002ÆÇ\003\002\002\002ÇÒ\003\002\002\002ÈÉ\007\023\002\002ÉÊ\007\022\002\002ÊÏ\005\022\n\002ËÌ\007\006\002\002ÌÎ\005\022\n\002ÍË\003\002\002\002ÎÑ\003\002\002\002ÏÍ\003\002\002\002ÏÐ\003\002\002\002ÐÓ\003\002\002\002ÑÏ\003\002\002\002ÒÈ\003\002\002\002ÒÓ\003\002\002\002ÓÖ\003\002\002\002ÔÕ\007\025\002\002Õ×\007\002\002ÖÔ\003\002\002\002Ö×\003\002\002\002×Ù\003\002\002\002Ø`\003\002\002\002Øa\003\002\002\002Øc\003\002\002\002Øh\003\002\002\002Øn\003\002\002\002Øq\003\002\002\002Øv\003\002\002\002Ø}\003\002\002\002Ø\003\002\002\002Ø\003\002\002\002Ø\003\002\002\002Ø£\003\002\002\002Ø©\003\002\002\002Ø«\003\002\002\002Ø¯\003\002\002\002Ø±\003\002\002\002Ø³\003\002\002\002Øµ\003\002\002\002Ø·\003\002\002\002Ø½\003\002\002\002ØÀ\003\002\002\002Ù\007\003\002\002\002ÚÜ\005\n\006\002ÛÚ\003\002\002\002ÛÜ\003\002\002\002ÜÝ\003\002\002\002ÝÞ\005\f\007\002Þ\t\003\002\002\002ßá\007U\002\002àâ\007V\002\002áà\003\002\002\002áâ\003\002\002\002âã\003\002\002\002ãè\005\026\f\002äå\007\006\002\002åç\005\026\f\002æä\003\002\002\002çê\003\002\002\002èæ\003\002\002\002èé\003\002\002\002é\013\003\002\002\002êè\003\002\002\002ëö\005\016\b\002ìí\007\023\002\002íî\007\022\002\002îó\005\022\n\002ïð\007\006\002\002ðò\005\022\n\002ñï\003\002\002\002òõ\003\002\002\002óñ\003\002\002\002óô\003\002\002\002ô÷\003\002\002\002õó\003\002\002\002öì\003\002\002\002ö÷\003\002\002\002÷ú\003\002\002\002øù\007\025\002\002ùû\007\002\002úø\003\002\002\002úû\003\002\002\002ûā\003\002\002\002üý\007\026\002\002ýþ\007\027\002\002þÿ\005V,\002ÿĀ\007\030\002\002ĀĂ\003\002\002\002āü\003\002\002\002āĂ\003\002\002\002Ă\r\003\002\002\002ăĄ\b\b\001\002Ąą\005\020\t\002ąĔ\003\002\002\002Ćć\f\004\002\002ćĉ\007u\002\002ĈĊ\005\030\r\002ĉĈ\003\002\002\002ĉĊ\003\002\002\002Ċċ\003\002\002\002ċē\005\016\b\005Čč\f\003\002\002čď\t\003\002\002ĎĐ\005\030\r\002ďĎ\003\002\002\002ďĐ\003\002\002\002Đđ\003\002\002\002đē\005\016\b\004ĒĆ\003\002\002\002ĒČ\003\002\002\002ēĖ\003\002\002\002ĔĒ\003\002\002\002Ĕĕ\003\002\002\002ĕ\017\003\002\002\002ĖĔ\003\002\002\002ėĨ\005\024\013\002Ęę\007Y\002\002ęĨ\005P)\002Ěě\007W\002\002ěĠ\005,\027\002Ĝĝ\007\006\002\002ĝğ\005,\027\002ĞĜ\003\002\002\002ğĢ\003\002\002\002ĠĞ\003\002\002\002Ġġ\003\002\002\002ġĨ\003\002\002\002ĢĠ\003\002\002\002ģĤ\007\b\002\002Ĥĥ\005\f\007\002ĥĦ\007\005\002\002ĦĨ\003\002\002\002ħė\003\002\002\002ħĘ\003\002\002\002ħĚ\003\002\002\002ħģ\003\002\002\002Ĩ\021\003\002\002\002ĩī\005,\027\002ĪĬ\t\004\002\002īĪ\003\002\002\002īĬ\003\002\002\002Ĭį\003\002\002\002ĭĮ\007$\002\002Įİ\t\005\002\002įĭ\003\002\002\002įİ\003\002\002\002İ\023\003\002\002\002ıĳ\007\t\002\002ĲĴ\005\030\r\002ĳĲ\003\002\002\002ĳĴ\003\002\002\002Ĵĵ\003\002\002\002ĵĺ\005\032\016\002Ķķ\007\006\002\002ķĹ\005\032\016\002ĸĶ\003\002\002\002Ĺļ\003\002\002\002ĺĸ\003\002\002\002ĺĻ\003\002\002\002Ļņ\003\002\002\002ļĺ\003\002\002\002Ľľ\007\n\002\002ľŃ\005\034\017\002Ŀŀ\007\006\002\002ŀł\005\034\017\002ŁĿ\003\002\002\002łŅ\003\002\002\002ŃŁ\003\002\002\002Ńń\003\002\002\002ńŇ\003\002\002\002ŅŃ\003\002\002\002ņĽ\003\002\002\002ņŇ\003\002\002\002ŇŊ\003\002\002\002ňŉ\007\020\002\002ŉŋ\005.\030\002Ŋň\003\002\002\002Ŋŋ\003\002\002\002ŋŖ\003\002\002\002Ōō\007\021\002\002ōŎ\007\022\002\002Ŏœ\005,\027\002ŏŐ\007\006\002\002ŐŒ\005,\027\002őŏ\003\002\002\002Œŕ\003\002\002\002œő\003\002\002\002œŔ\003\002\002\002Ŕŗ\003\002\002\002ŕœ\003\002\002\002ŖŌ\003\002\002\002Ŗŗ\003\002\002\002ŗŚ\003\002\002\002Řř\007\024\002\002řś\005.\030\002ŚŘ\003\002\002\002Śś\003\002\002\002ś\025\003\002\002\002ŜŞ\005R*\002ŝş\005(\025\002Şŝ\003\002\002\002Şş\003\002\002\002şŠ\003\002\002\002Šš\007\013\002\002šŢ\007\b\002\002Ţţ\005\b\005\002ţŤ\007\005\002\002Ť\027\003\002\002\002ťŦ\t\006\002\002Ŧ\031\003\002\002\002ŧŬ\005,\027\002ŨŪ\007\013\002\002ũŨ\003\002\002\002ũŪ\003\002\002\002Ūū\003\002\002\002ūŭ\005R*\002Ŭũ\003\002\002\002Ŭŭ\003\002\002\002ŭŴ\003\002\002\002Ůů\005P)\002ůŰ\007\004\002\002Űű\007\002\002űŴ\003\002\002\002ŲŴ\007\002\002ųŧ\003\002\002\002ųŮ\003\002\002\002ųŲ\003\002\002\002Ŵ\033\003\002\002\002ŵŶ\b\017\001\002Ŷŷ\005\"\022\002ŷƊ\003\002\002\002ŸƆ\f\004\002\002Źź\007C\002\002źŻ\007B\002\002ŻƇ\005\034\017\002żŽ\005\036\020\002Žž\007B\002\002žſ\005\034\017\002ſƀ\005 \021\002ƀƇ\003\002\002\002ƁƂ\007I\002\002Ƃƃ\005\036\020\002ƃƄ\007B\002\002Ƅƅ\005\034\017\002ƅƇ\003\002\002\002ƆŹ\003\002\002\002Ɔż\003\002\002\002ƆƁ\003\002\002\002ƇƉ\003\002\002\002ƈŸ\003\002\002\002Ɖƌ\003\002\002\002Ɗƈ\003\002\002\002ƊƋ\003\002\002\002Ƌ\035\003\002\002\002ƌƊ\003\002\002\002ƍƏ\007E\002\002Ǝƍ\003\002\002\002ƎƏ\003\002\002\002ƏƝ\003\002\002\002Ɛƒ\007F\002\002ƑƓ\007D\002\002ƒƑ\003\002\002\002ƒƓ\003\002\002\002ƓƝ\003\002\002\002ƔƖ\007G\002\002ƕƗ\007D\002\002Ɩƕ\003\002\002\002ƖƗ\003\002\002\002ƗƝ\003\002\002\002Ƙƚ\007H\002\002ƙƛ\007D\002\002ƚƙ\003\002\002\002ƚƛ\003\002\002\002ƛƝ\003\002\002\002ƜƎ\003\002\002\002ƜƐ\003\002\002\002ƜƔ\003\002\002\002ƜƘ\003\002\002\002Ɲ\037\003\002\002\002ƞƟ\007K\002\002Ɵƭ\005.\030\002Ơơ\007J\002\002ơƢ\007\b\002\002ƢƧ\005R*\002ƣƤ\007\006\002\002ƤƦ\005R*\002ƥƣ\003\002\002\002ƦƩ\003\002\002\002Ƨƥ\003\002\002\002Ƨƨ\003\002\002\002ƨƪ\003\002\002\002ƩƧ\003\002\002\002ƪƫ\007\005\002\002ƫƭ\003\002\002\002Ƭƞ\003\002\002\002ƬƠ\003\002\002\002ƭ!\003\002\002\002Ʈǆ\005&\024\002Ưư\007z\002\002ưƱ\005$\023\002ƱƲ\007\b\002\002ƲƳ\005,\027\002ƳƵ\007\005\002\002ƴƶ\007{\002\002Ƶƴ\003\002\002\002Ƶƶ\003\002\002\002ƶǄ\003\002\002\002ƷƸ\007|\002\002Ƹƹ\007K\002\002ƹƺ\007\b\002\002ƺƿ\005,\027\002ƻƼ\007\006\002\002Ƽƾ\005,\027\002ƽƻ\003\002\002\002ƾǁ\003\002\002\002ƿƽ\003\002\002\002ƿǀ\003\002\002\002ǀǂ\003\002\002\002ǁƿ\003\002\002\002ǂǃ\007\005\002\002ǃǅ\003\002\002\002ǄƷ\003\002\002\002Ǆǅ\003\002\002\002ǅǇ\003\002\002\002ǆƯ\003\002\002\002ǆǇ\003\002\002\002Ǉ#\003\002\002\002ǈǉ\t\007\002\002ǉ%\003\002\002\002Ǌǒ\005*\026\002ǋǍ\007\013\002\002ǌǋ\003\002\002\002ǌǍ\003\002\002\002Ǎǎ\003\002\002\002ǎǐ\005R*\002ǏǑ\005(\025\002ǐǏ\003\002\002\002ǐǑ\003\002\002\002ǑǓ\003\002\002\002ǒǌ\003\002\002\002ǒǓ\003\002\002\002Ǔ'\003\002\002\002ǔǕ\007\b\002\002Ǖǚ\005R*\002ǖǗ\007\006\002\002ǗǙ\005R*\002ǘǖ\003\002\002\002Ǚǜ\003\002\002\002ǚǘ\003\002\002\002ǚǛ\003\002\002\002Ǜǝ\003\002\002\002ǜǚ\003\002\002\002ǝǞ\007\005\002\002Ǟ)\003\002\002\002ǟǵ\005P)\002Ǡǡ\007\b\002\002ǡǢ\005\b\005\002Ǣǣ\007\005\002\002ǣǵ\003\002\002\002Ǥǥ\007\002\002ǥǦ\007\b\002\002Ǧǫ\005,\027\002ǧǨ\007\006\002\002ǨǪ\005,\027\002ǩǧ\003\002\002\002Ǫǭ\003\002\002\002ǫǩ\003\002\002\002ǫǬ\003\002\002\002ǬǮ\003\002\002\002ǭǫ\003\002\002\002Ǯǯ\007\005\002\002ǯǵ\003\002\002\002ǰǱ\007\b\002\002Ǳǲ\005\034\017\002ǲǳ\007\005\002\002ǳǵ\003\002\002\002Ǵǟ\003\002\002\002ǴǠ\003\002\002\002ǴǤ\003\002\002\002Ǵǰ\003\002\002\002ǵ+\003\002\002\002ǶǷ\005.\030\002Ƿ-\003\002\002\002Ǹǹ\b\030\001\002ǹǺ\007\034\002\002ǺȂ\005.\030\006ǻȂ\0050\031\002Ǽǽ\007\035\002\002ǽǾ\007\b\002\002Ǿǿ\005\b\005\002ǿȀ\007\005\002\002ȀȂ\003\002\002\002ȁǸ\003\002\002\002ȁǻ\003\002\002\002ȁǼ\003\002\002\002Ȃȋ\003\002\002\002ȃȄ\f\005\002\002Ȅȅ\007\032\002\002ȅȊ\005.\030\006Ȇȇ\f\004\002\002ȇȈ\007\031\002\002ȈȊ\005.\030\005ȉȃ\003\002\002\002ȉȆ\003\002\002\002Ȋȍ\003\002\002\002ȋȉ\003\002\002\002ȋȌ\003\002\002\002Ȍ/\003\002\002\002ȍȋ\003\002\002\002ȎȐ\0054\033\002ȏȑ\0052\032\002Ȑȏ\003\002\002\002Ȑȑ\003\002\002\002ȑ1\003\002\002\002Ȓȓ\005:\036\002ȓȔ\0054\033\002ȔɊ\003\002\002\002ȕȗ\007\034\002\002Ȗȕ\003\002\002\002Ȗȗ\003\002\002\002ȗȘ\003\002\002\002Șș\007\036\002\002șȚ\0054\033\002Țț\007\032\002\002țȜ\0054\033\002ȜɊ\003\002\002\002ȝȟ\007\034\002\002Ȟȝ\003\002\002\002Ȟȟ\003\002\002\002ȟȠ\003\002\002\002Ƞȡ\007\033\002\002ȡȢ\007\b\002\002Ȣȧ\005,\027\002ȣȤ\007\006\002\002ȤȦ\005,\027\002ȥȣ\003\002\002\002Ȧȩ\003\002\002\002ȧȥ\003\002\002\002ȧȨ\003\002\002\002ȨȪ\003\002\002\002ȩȧ\003\002\002\002Ȫȫ\007\005\002\002ȫɊ\003\002\002\002ȬȮ\007\034\002\002ȭȬ\003\002\002\002ȭȮ\003\002\002\002Ȯȯ\003\002\002\002ȯȰ\007\033\002\002Ȱȱ\007\b\002\002ȱȲ\005\b\005\002Ȳȳ\007\005\002\002ȳɊ\003\002\002\002ȴȶ\007\034\002\002ȵȴ\003\002\002\002ȵȶ\003\002\002\002ȶȷ\003\002\002\002ȷȸ\007\037\002\002ȸȻ\0054\033\002ȹȺ\007'\002\002Ⱥȼ\0054\033\002Ȼȹ\003\002\002\002Ȼȼ\003\002\002\002ȼɊ\003\002\002\002Ƚȿ\007 \002\002Ⱦɀ\007\034\002\002ȿȾ\003\002\002\002ȿɀ\003\002\002\002ɀɁ\003\002\002\002ɁɊ\007!\002\002ɂɄ\007 \002\002ɃɅ\007\034\002\002ɄɃ\003\002\002\002ɄɅ\003\002\002\002ɅɆ\003\002\002\002Ɇɇ\007\017\002\002ɇɈ\007\n\002\002ɈɊ\0054\033\002ɉȒ\003\002\002\002ɉȖ\003\002\002\002ɉȞ\003\002\002\002ɉȭ\003\002\002\002ɉȵ\003\002\002\002ɉȽ\003\002\002\002ɉɂ\003\002\002\002Ɋ3\003\002\002\002ɋɌ\b\033\001\002Ɍɍ\t\b\002\002ɍɐ\0054\033\006Ɏɐ\0056\034\002ɏɋ\003\002\002\002ɏɎ\003\002\002\002ɐɟ\003\002\002\002ɑɒ\f\005\002\002ɒɓ\t\t\002\002ɓɞ\0054\033\006ɔɕ\f\004\002\002ɕɖ\t\b\002\002ɖɞ\0054\033\005ɗɘ\f\003\002\002ɘə\007\002\002əɞ\0054\033\004ɚɛ\f\007\002\002ɛɜ\007\027\002\002ɜɞ\0058\035\002ɝɑ\003\002\002\002ɝɔ\003\002\002\002ɝɗ\003\002\002\002ɝɚ\003\002\002\002ɞɡ\003\002\002\002ɟɝ\003\002\002\002ɟɠ\003\002\002\002ɠ5\003\002\002\002ɡɟ\003\002\002\002ɢɣ\b\034\001\002ɣ̄\007!\002\002ɤ̄\005> \002ɥɦ\005R*\002ɦɧ\007\002\002ɧ̄\003\002\002\002ɨ̄\005V,\002ɩ̄\005<\037\002ɪ̄\007\002\002ɫɬ\007\b\002\002ɬɯ\005,\027\002ɭɮ\007\006\002\002ɮɰ\005,\027\002ɯɭ\003\002\002\002ɰɱ\003\002\002\002ɱɯ\003\002\002\002ɱɲ\003\002\002\002ɲɳ\003\002\002\002ɳɴ\007\005\002\002ɴ̄\003\002\002\002ɵɶ\007T\002\002ɶɷ\007\b\002\002ɷɼ\005,\027\002ɸɹ\007\006\002\002ɹɻ\005,\027\002ɺɸ\003\002\002\002ɻɾ\003\002\002\002ɼɺ\003\002\002\002ɼɽ\003\002\002\002ɽɿ\003\002\002\002ɾɼ\003\002\002\002ɿʀ\007\005\002\002ʀ̄\003\002\002\002ʁ̄\005P)\002ʂʃ\005P)\002ʃʄ\007\b\002\002ʄʅ\007\002\002ʅʇ\007\005\002\002ʆʈ\005H%\002ʇʆ\003\002\002\002ʇʈ\003\002\002\002ʈ̄\003\002\002\002ʉʊ\005P)\002ʊʖ\007\b\002\002ʋʍ\005\030\r\002ʌʋ\003\002\002\002ʌʍ\003\002\002\002ʍʎ\003\002\002\002ʎʓ\005,\027\002ʏʐ\007\006\002\002ʐʒ\005,\027\002ʑʏ\003\002\002\002ʒʕ\003\002\002\002ʓʑ\003\002\002\002ʓʔ\003\002\002\002ʔʗ\003\002\002\002ʕʓ\003\002\002\002ʖʌ\003\002\002\002ʖʗ\003\002\002\002ʗʘ\003\002\002\002ʘʚ\007\005\002\002ʙʛ\005H%\002ʚʙ\003\002\002\002ʚʛ\003\002\002\002ʛ̄\003\002\002\002ʜʝ\007\b\002\002ʝʞ\005\b\005\002ʞʟ\007\005\002\002ʟ̄\003\002\002\002ʠʡ\007=\002\002ʡʣ\0054\033\002ʢʤ\005F$\002ʣʢ\003\002\002\002ʤʥ\003\002\002\002ʥʣ\003\002\002\002ʥʦ\003\002\002\002ʦʩ\003\002\002\002ʧʨ\007@\002\002ʨʪ\005,\027\002ʩʧ\003\002\002\002ʩʪ\003\002\002\002ʪʫ\003\002\002\002ʫʬ\007A\002\002ʬ̄\003\002\002\002ʭʯ\007=\002\002ʮʰ\005F$\002ʯʮ\003\002\002\002ʰʱ\003\002\002\002ʱʯ\003\002\002\002ʱʲ\003\002\002\002ʲʵ\003\002\002\002ʳʴ\007@\002\002ʴʶ\005,\027\002ʵʳ\003\002\002\002ʵʶ\003\002\002\002ʶʷ\003\002\002\002ʷʸ\007A\002\002ʸ̄\003\002\002\002ʹʺ\007h\002\002ʺʻ\007\b\002\002ʻʼ\005,\027\002ʼʽ\007\013\002\002ʽʾ\005B\"\002ʾʿ\007\005\002\002ʿ̄\003\002\002\002ˀˁ\007i\002\002ˁ˂\007\b\002\002˂˃\005,\027\002˃˄\007\013\002\002˄˅\005B\"\002˅ˆ\007\005\002\002ˆ̄\003\002\002\002ˇˈ\007\002\002ˈˑ\007\007\002\002ˉˎ\005,\027\002ˊˋ\007\006\002\002ˋˍ\005,\027\002ˌˊ\003\002\002\002ˍː\003\002\002\002ˎˌ\003\002\002\002ˎˏ\003\002\002\002ˏ˒\003\002\002\002ːˎ\003\002\002\002ˑˉ\003\002\002\002ˑ˒\003\002\002\002˒˓\003\002\002\002˓̄\007\003\002\002˔̄\0077\002\002˕˙\0078\002\002˖˗\007\b\002\002˗˘\007\002\002˘˚\007\005\002\002˙˖\003\002\002\002˙˚\003\002\002\002˚̄\003\002\002\002˛˟\0079\002\002˜˝\007\b\002\002˝˞\007\002\002˞ˠ\007\005\002\002˟˜\003\002\002\002˟ˠ\003\002\002\002ˠ̄\003\002\002\002ˡ˥\007:\002\002ˢˣ\007\b\002\002ˣˤ\007\002\002ˤ˦\007\005\002\002˥ˢ\003\002\002\002˥˦\003\002\002\002˦̄\003\002\002\002˧˫\007;\002\002˨˩\007\b\002\002˩˪\007\002\002˪ˬ\007\005\002\002˫˨\003\002\002\002˫ˬ\003\002\002\002ˬ̄\003\002\002\002˭ˮ\007*\002\002ˮ˯\007\b\002\002˯˰\0054\033\002˰˱\007\n\002\002˱˴\0054\033\002˲˳\007+\002\002˳˵\0054\033\002˴˲\003\002\002\002˴˵\003\002\002\002˵˶\003\002\002\002˶˷\007\005\002\002˷̄\003\002\002\002˸˹\007<\002\002˹˺\007\b\002\002˺˻\005R*\002˻˼\007\n\002\002˼˽\0054\033\002˽˾\007\005\002\002˾̄\003\002\002\002˿̀\007\b\002\002̀́\005,\027\002́̂\007\005\002\002̂̄\003\002\002\002̃ɢ\003\002\002\002̃ɤ\003\002\002\002̃ɥ\003\002\002\002̃ɨ\003\002\002\002̃ɩ\003\002\002\002̃ɪ\003\002\002\002̃ɫ\003\002\002\002̃ɵ\003\002\002\002̃ʁ\003\002\002\002̃ʂ\003\002\002\002̃ʉ\003\002\002\002̃ʜ\003\002\002\002̃ʠ\003\002\002\002̃ʭ\003\002\002\002̃ʹ\003\002\002\002̃ˀ\003\002\002\002̃ˇ\003\002\002\002̃˔\003\002\002\002̃˕\003\002\002\002̃˛\003\002\002\002̃ˡ\003\002\002\002̃˧\003\002\002\002̃˭\003\002\002\002̃˸\003\002\002\002̃˿\003\002\002\002̄̌\003\002\002\002̅̆\f\013\002\002̆̇\007\007\002\002̇̈\0054\033\002̈̉\007\003\002\002̉̋\003\002\002\002̊̅\003\002\002\002̋̎\003\002\002\002̌̊\003\002\002\002̌̍\003\002\002\002̍7\003\002\002\002̎̌\003\002\002\002̏̐\007-\002\002̐̑\0076\002\002̖̑\005> \002̒̓\007-\002\002̓̔\0076\002\002̖̔\007\002\002̏̕\003\002\002\002̒̕\003\002\002\002̖9\003\002\002\002̗̘\t\n\002\002̘;\003\002\002\002̙̚\t\013\002\002̚=\003\002\002\002̛̝\007/\002\002̜̞\t\b\002\002̝̜\003\002\002\002̝̞\003\002\002\002̞̟\003\002\002\002̟̠\007\002\002̠̣\005@!\002̡̢\007v\002\002̢̤\005@!\002̡̣\003\002\002\002̣̤\003\002\002\002̤?\003\002\002\002̥̦\t\f\002\002̦A\003\002\002\002̧̨\b\"\001\002̨̩\007\002\002̩̪\007\002\002̪̫\005B\"\002̫̬\007\002\002̬̯\003\002\002\002̭̯\005D#\002̧̮\003\002\002\002̮̭\003\002\002\002̴̯\003\002\002\002̰̱\f\005\002\002̱̳\007\002\002̲̰\003\002\002\002̶̳\003\002\002\002̴̲\003\002\002\002̴̵\003\002\002\002̵C\003\002\002\002̶̴\003\002\002\002̷̻\007\002\002̸̻\007\002\002̹̻\005R*\002̷̺\003\002\002\002̸̺\003\002\002\002̺̹\003\002\002\002̻E\003\002\002\002̼̽\007>\002\002̽̾\005,\027\002̾̿\007?\002\002̿̀\005,\027\002̀G\003\002\002\002́͂\007L\002\002͍͂\007\b\002\002̓̈́\007M\002\002̈́ͅ\007\022\002\002͊ͅ\005,\027\002͇͆\007\006\002\002͇͉\005,\027\002͈͆\003\002\002\002͉͌\003\002\002\002͈͊\003\002\002\002͊͋\003\002\002\002͎͋\003\002\002\002͌͊\003\002\002\002͍̓\003\002\002\002͍͎\003\002\002\002͎͙\003\002\002\002͏͐\007\023\002\002͐͑\007\022\002\002͖͑\005\022\n\002͓͒\007\006\002\002͓͕\005\022\n\002͔͒\003\002\002\002͕͘\003\002\002\002͖͔\003\002\002\002͖͗\003\002\002\002͚͗\003\002\002\002͖͘\003\002\002\002͙͏\003\002\002\002͙͚\003\002\002\002͚͜\003\002\002\002͛͝\005J&\002͛͜\003\002\002\002͜͝\003\002\002\002͝͞\003\002\002\002͟͞\007\005\002\002͟I\003\002\002\002͠͡\007N\002\002͡ͱ\005L'\002ͣ͢\007O\002\002ͣͱ\005L'\002ͤͥ\007N\002\002ͥͦ\007\036\002\002ͦͧ\005L'\002ͧͨ\007\032\002\002ͨͩ\005L'\002ͩͱ\003\002\002\002ͪͫ\007O\002\002ͫͬ\007\036\002\002ͬͭ\005L'\002ͭͮ\007\032\002\002ͮͯ\005L'\002ͯͱ\003\002\002\002Ͱ͠\003\002\002\002Ͱ͢\003\002\002\002Ͱͤ\003\002\002\002Ͱͪ\003\002\002\002ͱK\003\002\002\002Ͳͳ\007P\002\002ͳͼ\007Q\002\002ʹ͵\007P\002\002͵ͼ\007R\002\002Ͷͷ\007S\002\002ͷͼ\007T\002\002͸͹\005,\027\002͹ͺ\t\r\002\002ͺͼ\003\002\002\002ͻͲ\003\002\002\002ͻʹ\003\002\002\002ͻͶ\003\002\002\002ͻ͸\003\002\002\002ͼM\003\002\002\002ͽ;\007a\002\002;΂\t\016\002\002Ϳ΀\007b\002\002΀΂\t\017\002\002΁ͽ\003\002\002\002΁Ϳ\003\002\002\002΂O\003\002\002\002΃Έ\005R*\002΄΅\007\004\002\002΅·\005R*\002Ά΄\003\002\002\002·Ί\003\002\002\002ΈΆ\003\002\002\002ΈΉ\003\002\002\002ΉQ\003\002\002\002ΊΈ\003\002\002\002΋Α\007\002\002ΌΑ\005T+\002΍Α\005X-\002ΎΑ\007\002\002ΏΑ\007\002\002ΐ΋\003\002\002\002ΐΌ\003\002\002\002ΐ΍\003\002\002\002ΐΎ\003\002\002\002ΐΏ\003\002\002\002ΑS\003\002\002\002ΒΓ\007\002\002ΓU\003\002\002\002ΔΗ\007\002\002ΕΗ\007\002\002ΖΔ\003\002\002\002ΖΕ\003\002\002\002ΗW\003\002\002\002ΘΙ\t\020\002\002ΙY\003\002\002\002p¡§ÆÏÒÖØÛáèóöúāĉďĒĔĠħīįĳĺŃņŊœŖŚŞũŬųƆƊƎƒƖƚƜƧƬƵƿǄǆǌǐǒǚǫǴȁȉȋȐȖȞȧȭȵȻȿɄɉɏɝɟɱɼʇʌʓʖʚʥʩʱʵˎˑ˙˟˥˫˴̴̝̣̮̺͍͖͙̃̌͊̕͜Ͱͻ΁ΈΐΖ"; }
/*      */   
/*      */   public static final int SIMPLE_COMMENT = 154; public static final int BRACKETED_COMMENT = 155; public static final int WS = 156; public static final int UNRECOGNIZED = 157; public static final int DELIMITER = 158; public static final String[] tokenNames; public static final int RULE_singleStatement = 0; public static final int RULE_singleExpression = 1; public static final int RULE_statement = 2;
/*  110 */   public org.antlr.v4.runtime.atn.ATN getATN() { return _ATN; }
/*      */   
/*      */   public static final int RULE_query = 3; public static final int RULE_with = 4; public static final int RULE_queryNoWith = 5; public static final int RULE_queryTerm = 6; public static final int RULE_queryPrimary = 7; public static final int RULE_sortItem = 8; public static final int RULE_querySpecification = 9;
/*  113 */   public SqlBaseParser(org.antlr.v4.runtime.TokenStream input) { super(input);
/*  114 */     this._interp = new org.antlr.v4.runtime.atn.ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache); }
/*      */   
/*      */   public static final int RULE_namedQuery = 10;
/*      */   public static final int RULE_setQuantifier = 11; public static final int RULE_selectItem = 12; public static final int RULE_relation = 13; public static final int RULE_joinType = 14; public static final int RULE_joinCriteria = 15; public static final int RULE_sampledRelation = 16;
/*  118 */   public static class SingleStatementContext extends org.antlr.v4.runtime.ParserRuleContext { public SqlBaseParser.StatementContext statement() { return (SqlBaseParser.StatementContext)getRuleContext(SqlBaseParser.StatementContext.class, 0); }
/*      */     
/*  120 */     public org.antlr.v4.runtime.tree.TerminalNode EOF() { return getToken(-1, 0); }
/*      */     
/*  122 */     public SingleStatementContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/*  124 */     public int getRuleIndex() { return 0; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  127 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSingleStatement(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  131 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSingleStatement(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  135 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSingleStatement(this);
/*  136 */       return (T)visitor.visitChildren(this); } }
/*      */   
/*      */   public static final int RULE_sampleType = 17;
/*      */   public static final int RULE_aliasedRelation = 18;
/*      */   public static final int RULE_columnAliases = 19;
/*  141 */   public static final int RULE_relationPrimary = 20; public static final int RULE_expression = 21; public static final int RULE_booleanExpression = 22; public static final int RULE_predicated = 23; public static final int RULE_predicate = 24; public static final int RULE_valueExpression = 25; public static final int RULE_primaryExpression = 26; public static final int RULE_timeZoneSpecifier = 27; public static final int RULE_comparisonOperator = 28; public static final int RULE_booleanValue = 29; public static final int RULE_interval = 30; public static final int RULE_intervalField = 31; public static final int RULE_type = 32; public static final int RULE_simpleType = 33; public static final int RULE_whenClause = 34; public static final int RULE_over = 35; public static final int RULE_windowFrame = 36; public static final int RULE_frameBound = 37; public static final int RULE_explainOption = 38; public static final int RULE_qualifiedName = 39; public static final int RULE_identifier = 40; public static final int RULE_quotedIdentifier = 41; public static final int RULE_number = 42; public static final int RULE_nonReserved = 43; public static final String[] ruleNames; public static final String _serializedATN = "\003а훑舆괭䐗껱趀ꫝ\003 Λ\004\002\t\002\004\003\t\003\004\004\t\004\004\005\t\005\004\006\t\006\004\007\t\007\004\b\t\b\004\t\t\t\004\n\t\n\004\013\t\013\004\f\t\f\004\r\t\r\004\016\t\016\004\017\t\017\004\020\t\020\004\021\t\021\004\022\t\022\004\023\t\023\004\024\t\024\004\025\t\025\004\026\t\026\004\027\t\027\004\030\t\030\004\031\t\031\004\032\t\032\004\033\t\033\004\034\t\034\004\035\t\035\004\036\t\036\004\037\t\037\004 \t \004!\t!\004\"\t\"\004#\t#\004$\t$\004%\t%\004&\t&\004'\t'\004(\t(\004)\t)\004*\t*\004+\t+\004,\t,\004-\t-\003\002\003\002\003\002\003\003\003\003\003\003\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\005\004\n\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\007\004\n\004\f\004\016\004\013\004\003\004\003\004\005\004\n\004\003\004\003\004\003\004\003\004\003\004\005\004\n\004\003\004\003\004\005\004¢\n\004\003\004\003\004\003\004\003\004\005\004¨\n\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\005\004Ç\n\004\003\004\003\004\003\004\003\004\003\004\007\004Î\n\004\f\004\016\004Ñ\013\004\005\004Ó\n\004\003\004\003\004\005\004×\n\004\005\004Ù\n\004\003\005\005\005Ü\n\005\003\005\003\005\003\006\003\006\005\006â\n\006\003\006\003\006\003\006\007\006ç\n\006\f\006\016\006ê\013\006\003\007\003\007\003\007\003\007\003\007\003\007\007\007ò\n\007\f\007\016\007õ\013\007\005\007÷\n\007\003\007\003\007\005\007û\n\007\003\007\003\007\003\007\003\007\003\007\005\007Ă\n\007\003\b\003\b\003\b\003\b\003\b\003\b\005\bĊ\n\b\003\b\003\b\003\b\003\b\005\bĐ\n\b\003\b\007\bē\n\b\f\b\016\bĖ\013\b\003\t\003\t\003\t\003\t\003\t\003\t\003\t\007\tğ\n\t\f\t\016\tĢ\013\t\003\t\003\t\003\t\003\t\005\tĨ\n\t\003\n\003\n\005\nĬ\n\n\003\n\003\n\005\nİ\n\n\003\013\003\013\005\013Ĵ\n\013\003\013\003\013\003\013\007\013Ĺ\n\013\f\013\016\013ļ\013\013\003\013\003\013\003\013\003\013\007\013ł\n\013\f\013\016\013Ņ\013\013\005\013Ň\n\013\003\013\003\013\005\013ŋ\n\013\003\013\003\013\003\013\003\013\003\013\007\013Œ\n\013\f\013\016\013ŕ\013\013\005\013ŗ\n\013\003\013\003\013\005\013ś\n\013\003\f\003\f\005\fş\n\f\003\f\003\f\003\f\003\f\003\f\003\r\003\r\003\016\003\016\005\016Ū\n\016\003\016\005\016ŭ\n\016\003\016\003\016\003\016\003\016\003\016\005\016Ŵ\n\016\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\005\017Ƈ\n\017\007\017Ɖ\n\017\f\017\016\017ƌ\013\017\003\020\005\020Ə\n\020\003\020\003\020\005\020Ɠ\n\020\003\020\003\020\005\020Ɨ\n\020\003\020\003\020\005\020ƛ\n\020\005\020Ɲ\n\020\003\021\003\021\003\021\003\021\003\021\003\021\003\021\007\021Ʀ\n\021\f\021\016\021Ʃ\013\021\003\021\003\021\005\021ƭ\n\021\003\022\003\022\003\022\003\022\003\022\003\022\003\022\005\022ƶ\n\022\003\022\003\022\003\022\003\022\003\022\003\022\007\022ƾ\n\022\f\022\016\022ǁ\013\022\003\022\003\022\005\022ǅ\n\022\005\022Ǉ\n\022\003\023\003\023\003\024\003\024\005\024Ǎ\n\024\003\024\003\024\005\024Ǒ\n\024\005\024Ǔ\n\024\003\025\003\025\003\025\003\025\007\025Ǚ\n\025\f\025\016\025ǜ\013\025\003\025\003\025\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\007\026Ǫ\n\026\f\026\016\026ǭ\013\026\003\026\003\026\003\026\003\026\003\026\003\026\005\026ǵ\n\026\003\027\003\027\003\030\003\030\003\030\003\030\003\030\003\030\003\030\003\030\003\030\005\030Ȃ\n\030\003\030\003\030\003\030\003\030\003\030\003\030\007\030Ȋ\n\030\f\030\016\030ȍ\013\030\003\031\003\031\005\031ȑ\n\031\003\032\003\032\003\032\003\032\005\032ȗ\n\032\003\032\003\032\003\032\003\032\003\032\003\032\005\032ȟ\n\032\003\032\003\032\003\032\003\032\003\032\007\032Ȧ\n\032\f\032\016\032ȩ\013\032\003\032\003\032\003\032\005\032Ȯ\n\032\003\032\003\032\003\032\003\032\003\032\003\032\005\032ȶ\n\032\003\032\003\032\003\032\003\032\005\032ȼ\n\032\003\032\003\032\005\032ɀ\n\032\003\032\003\032\003\032\005\032Ʌ\n\032\003\032\003\032\003\032\005\032Ɋ\n\032\003\033\003\033\003\033\003\033\005\033ɐ\n\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\007\033ɞ\n\033\f\033\016\033ɡ\013\033\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\006\034ɰ\n\034\r\034\016\034ɱ\003\034\003\034\003\034\003\034\003\034\003\034\003\034\007\034ɻ\n\034\f\034\016\034ɾ\013\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034ʈ\n\034\003\034\003\034\003\034\005\034ʍ\n\034\003\034\003\034\003\034\007\034ʒ\n\034\f\034\016\034ʕ\013\034\005\034ʗ\n\034\003\034\003\034\005\034ʛ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\006\034ʤ\n\034\r\034\016\034ʥ\003\034\003\034\005\034ʪ\n\034\003\034\003\034\003\034\003\034\006\034ʰ\n\034\r\034\016\034ʱ\003\034\003\034\005\034ʶ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\007\034ˍ\n\034\f\034\016\034ː\013\034\005\034˒\n\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034˚\n\034\003\034\003\034\003\034\003\034\005\034ˠ\n\034\003\034\003\034\003\034\003\034\005\034˦\n\034\003\034\003\034\003\034\003\034\005\034ˬ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034˵\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034̄\n\034\003\034\003\034\003\034\003\034\003\034\007\034̋\n\034\f\034\016\034̎\013\034\003\035\003\035\003\035\003\035\003\035\003\035\005\035̖\n\035\003\036\003\036\003\037\003\037\003 \003 \005 ̞\n \003 \003 \003 \003 \005 ̤\n \003!\003!\003\"\003\"\003\"\003\"\003\"\003\"\003\"\005\"̯\n\"\003\"\003\"\007\"̳\n\"\f\"\016\"̶\013\"\003#\003#\003#\005#̻\n#\003$\003$\003$\003$\003$\003%\003%\003%\003%\003%\003%\003%\007%͉\n%\f%\016%͌\013%\005%͎\n%\003%\003%\003%\003%\003%\007%͕\n%\f%\016%͘\013%\005%͚\n%\003%\005%͝\n%\003%\003%\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\005&ͱ\n&\003'\003'\003'\003'\003'\003'\003'\003'\003'\005'ͼ\n'\003(\003(\003(\003(\005(΂\n(\003)\003)\003)\007)·\n)\f)\016)Ί\013)\003*\003*\003*\003*\003*\005*Α\n*\003+\003+\003,\003,\005,Η\n,\003-\003-\003-\002\b\016\034.46B.\002\004\006\b\n\f\016\020\022\024\026\030\032\034\036 \"$&(*,.02468:<>@BDFHJLNPRTVX\002\021\004\002\n\n\033\033\003\002st\003\002()\003\002%&\004\002\f\f\017\017\003\002wy\003\002\003\002\003\002\003\002\"#\003\00205\003\002QR\003\002ce\003\002fg\013\002\026\030,5LOQTZ[`gjqv{О\002Z\003\002\002\002\004]\003\002\002\002\006Ø\003\002\002\002\bÛ\003\002\002\002\nß\003\002\002\002\fë\003\002\002\002\016ă\003\002\002\002\020ħ\003\002\002\002\022ĩ\003\002\002\002\024ı\003\002\002\002\026Ŝ\003\002\002\002\030ť\003\002\002\002\032ų\003\002\002\002\034ŵ\003\002\002\002\036Ɯ\003\002\002\002 Ƭ\003\002\002\002\"Ʈ\003\002\002\002$ǈ\003\002\002\002&Ǌ\003\002\002\002(ǔ\003\002\002\002*Ǵ\003\002\002\002,Ƕ\003\002\002\002.ȁ\003\002\002\0020Ȏ\003\002\002\0022ɉ\003\002\002\0024ɏ\003\002\002\0026̃\003\002\002\0028̕\003\002\002\002:̗\003\002\002\002<̙\003\002\002\002>̛\003\002\002\002@̥\003\002\002\002B̮\003\002\002\002D̺\003\002\002\002F̼\003\002\002\002H́\003\002\002\002JͰ\003\002\002\002Lͻ\003\002\002\002N΁\003\002\002\002P΃\003\002\002\002Rΐ\003\002\002\002TΒ\003\002\002\002VΖ\003\002\002\002XΘ\003\002\002\002Z[\005\006\004\002[\\\007\002\002\003\\\003\003\002\002\002]^\005,\027\002^_\007\002\002\003_\005\003\002\002\002`Ù\005\b\005\002ab\007o\002\002bÙ\005R*\002cd\007o\002\002de\005R*\002ef\007\004\002\002fg\005R*\002gÙ\003\002\002\002hi\007X\002\002ij\007Y\002\002jk\005P)\002kl\007\013\002\002lm\005\b\005\002mÙ\003\002\002\002no\007r\002\002op\007Y\002\002pÙ\005P)\002qr\007\\\002\002rs\007]\002\002st\005P)\002tu\005\b\005\002uÙ\003\002\002\002vw\007}\002\002wx\007Y\002\002xy\005P)\002yz\007~\002\002z{\007v\002\002{|\005P)\002|Ù\003\002\002\002}\007X\002\002~\007\031\002\002\007[\002\002~\003\002\002\002\003\002\002\002\003\002\002\002\007Z\002\002\005P)\002\007\013\002\002\005\b\005\002Ù\003\002\002\002\007r\002\002\007Z\002\002Ù\005P)\002\007`\002\002\007\b\002\002\005N(\002\007\006\002\002\005N(\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\007\005\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002Ù\005\006\004\002\007j\002\002\007k\002\002\t\002\002\002\005P)\002\003\002\002\002\003\002\002\002¡\003\002\002\002 \007\037\002\002 ¢\007\002\002¡\003\002\002\002¡¢\003\002\002\002¢Ù\003\002\002\002£¤\007j\002\002¤§\007l\002\002¥¦\t\002\002\002¦¨\005R*\002§¥\003\002\002\002§¨\003\002\002\002¨Ù\003\002\002\002©ª\007j\002\002ªÙ\007m\002\002«¬\007j\002\002¬­\007n\002\002­®\t\002\002\002®Ù\005P)\002¯°\007_\002\002°Ù\005P)\002±²\007)\002\002²Ù\005P)\002³´\007j\002\002´Ù\007q\002\002µ¶\007j\002\002¶Ù\007\002\002·¸\007\002\002¸¹\007\002\002¹º\005P)\002º»\007\002\002»¼\007\002\002¼Ù\003\002\002\002½¾\007\002\002¾¿\007\002\002¿Ù\005P)\002ÀÁ\007j\002\002ÁÂ\007p\002\002ÂÃ\t\002\002\002ÃÆ\005P)\002ÄÅ\007\020\002\002ÅÇ\005.\030\002ÆÄ\003\002\002\002ÆÇ\003\002\002\002ÇÒ\003\002\002\002ÈÉ\007\023\002\002ÉÊ\007\022\002\002ÊÏ\005\022\n\002ËÌ\007\006\002\002ÌÎ\005\022\n\002ÍË\003\002\002\002ÎÑ\003\002\002\002ÏÍ\003\002\002\002ÏÐ\003\002\002\002ÐÓ\003\002\002\002ÑÏ\003\002\002\002ÒÈ\003\002\002\002ÒÓ\003\002\002\002ÓÖ\003\002\002\002ÔÕ\007\025\002\002Õ×\007\002\002ÖÔ\003\002\002\002Ö×\003\002\002\002×Ù\003\002\002\002Ø`\003\002\002\002Øa\003\002\002\002Øc\003\002\002\002Øh\003\002\002\002Øn\003\002\002\002Øq\003\002\002\002Øv\003\002\002\002Ø}\003\002\002\002Ø\003\002\002\002Ø\003\002\002\002Ø\003\002\002\002Ø£\003\002\002\002Ø©\003\002\002\002Ø«\003\002\002\002Ø¯\003\002\002\002Ø±\003\002\002\002Ø³\003\002\002\002Øµ\003\002\002\002Ø·\003\002\002\002Ø½\003\002\002\002ØÀ\003\002\002\002Ù\007\003\002\002\002ÚÜ\005\n\006\002ÛÚ\003\002\002\002ÛÜ\003\002\002\002ÜÝ\003\002\002\002ÝÞ\005\f\007\002Þ\t\003\002\002\002ßá\007U\002\002àâ\007V\002\002áà\003\002\002\002áâ\003\002\002\002âã\003\002\002\002ãè\005\026\f\002äå\007\006\002\002åç\005\026\f\002æä\003\002\002\002çê\003\002\002\002èæ\003\002\002\002èé\003\002\002\002é\013\003\002\002\002êè\003\002\002\002ëö\005\016\b\002ìí\007\023\002\002íî\007\022\002\002îó\005\022\n\002ïð\007\006\002\002ðò\005\022\n\002ñï\003\002\002\002òõ\003\002\002\002óñ\003\002\002\002óô\003\002\002\002ô÷\003\002\002\002õó\003\002\002\002öì\003\002\002\002ö÷\003\002\002\002÷ú\003\002\002\002øù\007\025\002\002ùû\007\002\002úø\003\002\002\002úû\003\002\002\002ûā\003\002\002\002üý\007\026\002\002ýþ\007\027\002\002þÿ\005V,\002ÿĀ\007\030\002\002ĀĂ\003\002\002\002āü\003\002\002\002āĂ\003\002\002\002Ă\r\003\002\002\002ăĄ\b\b\001\002Ąą\005\020\t\002ąĔ\003\002\002\002Ćć\f\004\002\002ćĉ\007u\002\002ĈĊ\005\030\r\002ĉĈ\003\002\002\002ĉĊ\003\002\002\002Ċċ\003\002\002\002ċē\005\016\b\005Čč\f\003\002\002čď\t\003\002\002ĎĐ\005\030\r\002ďĎ\003\002\002\002ďĐ\003\002\002\002Đđ\003\002\002\002đē\005\016\b\004ĒĆ\003\002\002\002ĒČ\003\002\002\002ēĖ\003\002\002\002ĔĒ\003\002\002\002Ĕĕ\003\002\002\002ĕ\017\003\002\002\002ĖĔ\003\002\002\002ėĨ\005\024\013\002Ęę\007Y\002\002ęĨ\005P)\002Ěě\007W\002\002ěĠ\005,\027\002Ĝĝ\007\006\002\002ĝğ\005,\027\002ĞĜ\003\002\002\002ğĢ\003\002\002\002ĠĞ\003\002\002\002Ġġ\003\002\002\002ġĨ\003\002\002\002ĢĠ\003\002\002\002ģĤ\007\b\002\002Ĥĥ\005\f\007\002ĥĦ\007\005\002\002ĦĨ\003\002\002\002ħė\003\002\002\002ħĘ\003\002\002\002ħĚ\003\002\002\002ħģ\003\002\002\002Ĩ\021\003\002\002\002ĩī\005,\027\002ĪĬ\t\004\002\002īĪ\003\002\002\002īĬ\003\002\002\002Ĭį\003\002\002\002ĭĮ\007$\002\002Įİ\t\005\002\002įĭ\003\002\002\002įİ\003\002\002\002İ\023\003\002\002\002ıĳ\007\t\002\002ĲĴ\005\030\r\002ĳĲ\003\002\002\002ĳĴ\003\002\002\002Ĵĵ\003\002\002\002ĵĺ\005\032\016\002Ķķ\007\006\002\002ķĹ\005\032\016\002ĸĶ\003\002\002\002Ĺļ\003\002\002\002ĺĸ\003\002\002\002ĺĻ\003\002\002\002Ļņ\003\002\002\002ļĺ\003\002\002\002Ľľ\007\n\002\002ľŃ\005\034\017\002Ŀŀ\007\006\002\002ŀł\005\034\017\002ŁĿ\003\002\002\002łŅ\003\002\002\002ŃŁ\003\002\002\002Ńń\003\002\002\002ńŇ\003\002\002\002ŅŃ\003\002\002\002ņĽ\003\002\002\002ņŇ\003\002\002\002ŇŊ\003\002\002\002ňŉ\007\020\002\002ŉŋ\005.\030\002Ŋň\003\002\002\002Ŋŋ\003\002\002\002ŋŖ\003\002\002\002Ōō\007\021\002\002ōŎ\007\022\002\002Ŏœ\005,\027\002ŏŐ\007\006\002\002ŐŒ\005,\027\002őŏ\003\002\002\002Œŕ\003\002\002\002œő\003\002\002\002œŔ\003\002\002\002Ŕŗ\003\002\002\002ŕœ\003\002\002\002ŖŌ\003\002\002\002Ŗŗ\003\002\002\002ŗŚ\003\002\002\002Řř\007\024\002\002řś\005.\030\002ŚŘ\003\002\002\002Śś\003\002\002\002ś\025\003\002\002\002ŜŞ\005R*\002ŝş\005(\025\002Şŝ\003\002\002\002Şş\003\002\002\002şŠ\003\002\002\002Šš\007\013\002\002šŢ\007\b\002\002Ţţ\005\b\005\002ţŤ\007\005\002\002Ť\027\003\002\002\002ťŦ\t\006\002\002Ŧ\031\003\002\002\002ŧŬ\005,\027\002ŨŪ\007\013\002\002ũŨ\003\002\002\002ũŪ\003\002\002\002Ūū\003\002\002\002ūŭ\005R*\002Ŭũ\003\002\002\002Ŭŭ\003\002\002\002ŭŴ\003\002\002\002Ůů\005P)\002ůŰ\007\004\002\002Űű\007\002\002űŴ\003\002\002\002ŲŴ\007\002\002ųŧ\003\002\002\002ųŮ\003\002\002\002ųŲ\003\002\002\002Ŵ\033\003\002\002\002ŵŶ\b\017\001\002Ŷŷ\005\"\022\002ŷƊ\003\002\002\002ŸƆ\f\004\002\002Źź\007C\002\002źŻ\007B\002\002ŻƇ\005\034\017\002żŽ\005\036\020\002Žž\007B\002\002žſ\005\034\017\002ſƀ\005 \021\002ƀƇ\003\002\002\002ƁƂ\007I\002\002Ƃƃ\005\036\020\002ƃƄ\007B\002\002Ƅƅ\005\034\017\002ƅƇ\003\002\002\002ƆŹ\003\002\002\002Ɔż\003\002\002\002ƆƁ\003\002\002\002ƇƉ\003\002\002\002ƈŸ\003\002\002\002Ɖƌ\003\002\002\002Ɗƈ\003\002\002\002ƊƋ\003\002\002\002Ƌ\035\003\002\002\002ƌƊ\003\002\002\002ƍƏ\007E\002\002Ǝƍ\003\002\002\002ƎƏ\003\002\002\002ƏƝ\003\002\002\002Ɛƒ\007F\002\002ƑƓ\007D\002\002ƒƑ\003\002\002\002ƒƓ\003\002\002\002ƓƝ\003\002\002\002ƔƖ\007G\002\002ƕƗ\007D\002\002Ɩƕ\003\002\002\002ƖƗ\003\002\002\002ƗƝ\003\002\002\002Ƙƚ\007H\002\002ƙƛ\007D\002\002ƚƙ\003\002\002\002ƚƛ\003\002\002\002ƛƝ\003\002\002\002ƜƎ\003\002\002\002ƜƐ\003\002\002\002ƜƔ\003\002\002\002ƜƘ\003\002\002\002Ɲ\037\003\002\002\002ƞƟ\007K\002\002Ɵƭ\005.\030\002Ơơ\007J\002\002ơƢ\007\b\002\002ƢƧ\005R*\002ƣƤ\007\006\002\002ƤƦ\005R*\002ƥƣ\003\002\002\002ƦƩ\003\002\002\002Ƨƥ\003\002\002\002Ƨƨ\003\002\002\002ƨƪ\003\002\002\002ƩƧ\003\002\002\002ƪƫ\007\005\002\002ƫƭ\003\002\002\002Ƭƞ\003\002\002\002ƬƠ\003\002\002\002ƭ!\003\002\002\002Ʈǆ\005&\024\002Ưư\007z\002\002ưƱ\005$\023\002ƱƲ\007\b\002\002ƲƳ\005,\027\002ƳƵ\007\005\002\002ƴƶ\007{\002\002Ƶƴ\003\002\002\002Ƶƶ\003\002\002\002ƶǄ\003\002\002\002ƷƸ\007|\002\002Ƹƹ\007K\002\002ƹƺ\007\b\002\002ƺƿ\005,\027\002ƻƼ\007\006\002\002Ƽƾ\005,\027\002ƽƻ\003\002\002\002ƾǁ\003\002\002\002ƿƽ\003\002\002\002ƿǀ\003\002\002\002ǀǂ\003\002\002\002ǁƿ\003\002\002\002ǂǃ\007\005\002\002ǃǅ\003\002\002\002ǄƷ\003\002\002\002Ǆǅ\003\002\002\002ǅǇ\003\002\002\002ǆƯ\003\002\002\002ǆǇ\003\002\002\002Ǉ#\003\002\002\002ǈǉ\t\007\002\002ǉ%\003\002\002\002Ǌǒ\005*\026\002ǋǍ\007\013\002\002ǌǋ\003\002\002\002ǌǍ\003\002\002\002Ǎǎ\003\002\002\002ǎǐ\005R*\002ǏǑ\005(\025\002ǐǏ\003\002\002\002ǐǑ\003\002\002\002ǑǓ\003\002\002\002ǒǌ\003\002\002\002ǒǓ\003\002\002\002Ǔ'\003\002\002\002ǔǕ\007\b\002\002Ǖǚ\005R*\002ǖǗ\007\006\002\002ǗǙ\005R*\002ǘǖ\003\002\002\002Ǚǜ\003\002\002\002ǚǘ\003\002\002\002ǚǛ\003\002\002\002Ǜǝ\003\002\002\002ǜǚ\003\002\002\002ǝǞ\007\005\002\002Ǟ)\003\002\002\002ǟǵ\005P)\002Ǡǡ\007\b\002\002ǡǢ\005\b\005\002Ǣǣ\007\005\002\002ǣǵ\003\002\002\002Ǥǥ\007\002\002ǥǦ\007\b\002\002Ǧǫ\005,\027\002ǧǨ\007\006\002\002ǨǪ\005,\027\002ǩǧ\003\002\002\002Ǫǭ\003\002\002\002ǫǩ\003\002\002\002ǫǬ\003\002\002\002ǬǮ\003\002\002\002ǭǫ\003\002\002\002Ǯǯ\007\005\002\002ǯǵ\003\002\002\002ǰǱ\007\b\002\002Ǳǲ\005\034\017\002ǲǳ\007\005\002\002ǳǵ\003\002\002\002Ǵǟ\003\002\002\002ǴǠ\003\002\002\002ǴǤ\003\002\002\002Ǵǰ\003\002\002\002ǵ+\003\002\002\002ǶǷ\005.\030\002Ƿ-\003\002\002\002Ǹǹ\b\030\001\002ǹǺ\007\034\002\002ǺȂ\005.\030\006ǻȂ\0050\031\002Ǽǽ\007\035\002\002ǽǾ\007\b\002\002Ǿǿ\005\b\005\002ǿȀ\007\005\002\002ȀȂ\003\002\002\002ȁǸ\003\002\002\002ȁǻ\003\002\002\002ȁǼ\003\002\002\002Ȃȋ\003\002\002\002ȃȄ\f\005\002\002Ȅȅ\007\032\002\002ȅȊ\005.\030\006Ȇȇ\f\004\002\002ȇȈ\007\031\002\002ȈȊ\005.\030\005ȉȃ\003\002\002\002ȉȆ\003\002\002\002Ȋȍ\003\002\002\002ȋȉ\003\002\002\002ȋȌ\003\002\002\002Ȍ/\003\002\002\002ȍȋ\003\002\002\002ȎȐ\0054\033\002ȏȑ\0052\032\002Ȑȏ\003\002\002\002Ȑȑ\003\002\002\002ȑ1\003\002\002\002Ȓȓ\005:\036\002ȓȔ\0054\033\002ȔɊ\003\002\002\002ȕȗ\007\034\002\002Ȗȕ\003\002\002\002Ȗȗ\003\002\002\002ȗȘ\003\002\002\002Șș\007\036\002\002șȚ\0054\033\002Țț\007\032\002\002țȜ\0054\033\002ȜɊ\003\002\002\002ȝȟ\007\034\002\002Ȟȝ\003\002\002\002Ȟȟ\003\002\002\002ȟȠ\003\002\002\002Ƞȡ\007\033\002\002ȡȢ\007\b\002\002Ȣȧ\005,\027\002ȣȤ\007\006\002\002ȤȦ\005,\027\002ȥȣ\003\002\002\002Ȧȩ\003\002\002\002ȧȥ\003\002\002\002ȧȨ\003\002\002\002ȨȪ\003\002\002\002ȩȧ\003\002\002\002Ȫȫ\007\005\002\002ȫɊ\003\002\002\002ȬȮ\007\034\002\002ȭȬ\003\002\002\002ȭȮ\003\002\002\002Ȯȯ\003\002\002\002ȯȰ\007\033\002\002Ȱȱ\007\b\002\002ȱȲ\005\b\005\002Ȳȳ\007\005\002\002ȳɊ\003\002\002\002ȴȶ\007\034\002\002ȵȴ\003\002\002\002ȵȶ\003\002\002\002ȶȷ\003\002\002\002ȷȸ\007\037\002\002ȸȻ\0054\033\002ȹȺ\007'\002\002Ⱥȼ\0054\033\002Ȼȹ\003\002\002\002Ȼȼ\003\002\002\002ȼɊ\003\002\002\002Ƚȿ\007 \002\002Ⱦɀ\007\034\002\002ȿȾ\003\002\002\002ȿɀ\003\002\002\002ɀɁ\003\002\002\002ɁɊ\007!\002\002ɂɄ\007 \002\002ɃɅ\007\034\002\002ɄɃ\003\002\002\002ɄɅ\003\002\002\002ɅɆ\003\002\002\002Ɇɇ\007\017\002\002ɇɈ\007\n\002\002ɈɊ\0054\033\002ɉȒ\003\002\002\002ɉȖ\003\002\002\002ɉȞ\003\002\002\002ɉȭ\003\002\002\002ɉȵ\003\002\002\002ɉȽ\003\002\002\002ɉɂ\003\002\002\002Ɋ3\003\002\002\002ɋɌ\b\033\001\002Ɍɍ\t\b\002\002ɍɐ\0054\033\006Ɏɐ\0056\034\002ɏɋ\003\002\002\002ɏɎ\003\002\002\002ɐɟ\003\002\002\002ɑɒ\f\005\002\002ɒɓ\t\t\002\002ɓɞ\0054\033\006ɔɕ\f\004\002\002ɕɖ\t\b\002\002ɖɞ\0054\033\005ɗɘ\f\003\002\002ɘə\007\002\002əɞ\0054\033\004ɚɛ\f\007\002\002ɛɜ\007\027\002\002ɜɞ\0058\035\002ɝɑ\003\002\002\002ɝɔ\003\002\002\002ɝɗ\003\002\002\002ɝɚ\003\002\002\002ɞɡ\003\002\002\002ɟɝ\003\002\002\002ɟɠ\003\002\002\002ɠ5\003\002\002\002ɡɟ\003\002\002\002ɢɣ\b\034\001\002ɣ̄\007!\002\002ɤ̄\005> \002ɥɦ\005R*\002ɦɧ\007\002\002ɧ̄\003\002\002\002ɨ̄\005V,\002ɩ̄\005<\037\002ɪ̄\007\002\002ɫɬ\007\b\002\002ɬɯ\005,\027\002ɭɮ\007\006\002\002ɮɰ\005,\027\002ɯɭ\003\002\002\002ɰɱ\003\002\002\002ɱɯ\003\002\002\002ɱɲ\003\002\002\002ɲɳ\003\002\002\002ɳɴ\007\005\002\002ɴ̄\003\002\002\002ɵɶ\007T\002\002ɶɷ\007\b\002\002ɷɼ\005,\027\002ɸɹ\007\006\002\002ɹɻ\005,\027\002ɺɸ\003\002\002\002ɻɾ\003\002\002\002ɼɺ\003\002\002\002ɼɽ\003\002\002\002ɽɿ\003\002\002\002ɾɼ\003\002\002\002ɿʀ\007\005\002\002ʀ̄\003\002\002\002ʁ̄\005P)\002ʂʃ\005P)\002ʃʄ\007\b\002\002ʄʅ\007\002\002ʅʇ\007\005\002\002ʆʈ\005H%\002ʇʆ\003\002\002\002ʇʈ\003\002\002\002ʈ̄\003\002\002\002ʉʊ\005P)\002ʊʖ\007\b\002\002ʋʍ\005\030\r\002ʌʋ\003\002\002\002ʌʍ\003\002\002\002ʍʎ\003\002\002\002ʎʓ\005,\027\002ʏʐ\007\006\002\002ʐʒ\005,\027\002ʑʏ\003\002\002\002ʒʕ\003\002\002\002ʓʑ\003\002\002\002ʓʔ\003\002\002\002ʔʗ\003\002\002\002ʕʓ\003\002\002\002ʖʌ\003\002\002\002ʖʗ\003\002\002\002ʗʘ\003\002\002\002ʘʚ\007\005\002\002ʙʛ\005H%\002ʚʙ\003\002\002\002ʚʛ\003\002\002\002ʛ̄\003\002\002\002ʜʝ\007\b\002\002ʝʞ\005\b\005\002ʞʟ\007\005\002\002ʟ̄\003\002\002\002ʠʡ\007=\002\002ʡʣ\0054\033\002ʢʤ\005F$\002ʣʢ\003\002\002\002ʤʥ\003\002\002\002ʥʣ\003\002\002\002ʥʦ\003\002\002\002ʦʩ\003\002\002\002ʧʨ\007@\002\002ʨʪ\005,\027\002ʩʧ\003\002\002\002ʩʪ\003\002\002\002ʪʫ\003\002\002\002ʫʬ\007A\002\002ʬ̄\003\002\002\002ʭʯ\007=\002\002ʮʰ\005F$\002ʯʮ\003\002\002\002ʰʱ\003\002\002\002ʱʯ\003\002\002\002ʱʲ\003\002\002\002ʲʵ\003\002\002\002ʳʴ\007@\002\002ʴʶ\005,\027\002ʵʳ\003\002\002\002ʵʶ\003\002\002\002ʶʷ\003\002\002\002ʷʸ\007A\002\002ʸ̄\003\002\002\002ʹʺ\007h\002\002ʺʻ\007\b\002\002ʻʼ\005,\027\002ʼʽ\007\013\002\002ʽʾ\005B\"\002ʾʿ\007\005\002\002ʿ̄\003\002\002\002ˀˁ\007i\002\002ˁ˂\007\b\002\002˂˃\005,\027\002˃˄\007\013\002\002˄˅\005B\"\002˅ˆ\007\005\002\002ˆ̄\003\002\002\002ˇˈ\007\002\002ˈˑ\007\007\002\002ˉˎ\005,\027\002ˊˋ\007\006\002\002ˋˍ\005,\027\002ˌˊ\003\002\002\002ˍː\003\002\002\002ˎˌ\003\002\002\002ˎˏ\003\002\002\002ˏ˒\003\002\002\002ːˎ\003\002\002\002ˑˉ\003\002\002\002ˑ˒\003\002\002\002˒˓\003\002\002\002˓̄\007\003\002\002˔̄\0077\002\002˕˙\0078\002\002˖˗\007\b\002\002˗˘\007\002\002˘˚\007\005\002\002˙˖\003\002\002\002˙˚\003\002\002\002˚̄\003\002\002\002˛˟\0079\002\002˜˝\007\b\002\002˝˞\007\002\002˞ˠ\007\005\002\002˟˜\003\002\002\002˟ˠ\003\002\002\002ˠ̄\003\002\002\002ˡ˥\007:\002\002ˢˣ\007\b\002\002ˣˤ\007\002\002ˤ˦\007\005\002\002˥ˢ\003\002\002\002˥˦\003\002\002\002˦̄\003\002\002\002˧˫\007;\002\002˨˩\007\b\002\002˩˪\007\002\002˪ˬ\007\005\002\002˫˨\003\002\002\002˫ˬ\003\002\002\002ˬ̄\003\002\002\002˭ˮ\007*\002\002ˮ˯\007\b\002\002˯˰\0054\033\002˰˱\007\n\002\002˱˴\0054\033\002˲˳\007+\002\002˳˵\0054\033\002˴˲\003\002\002\002˴˵\003\002\002\002˵˶\003\002\002\002˶˷\007\005\002\002˷̄\003\002\002\002˸˹\007<\002\002˹˺\007\b\002\002˺˻\005R*\002˻˼\007\n\002\002˼˽\0054\033\002˽˾\007\005\002\002˾̄\003\002\002\002˿̀\007\b\002\002̀́\005,\027\002́̂\007\005\002\002̂̄\003\002\002\002̃ɢ\003\002\002\002̃ɤ\003\002\002\002̃ɥ\003\002\002\002̃ɨ\003\002\002\002̃ɩ\003\002\002\002̃ɪ\003\002\002\002̃ɫ\003\002\002\002̃ɵ\003\002\002\002̃ʁ\003\002\002\002̃ʂ\003\002\002\002̃ʉ\003\002\002\002̃ʜ\003\002\002\002̃ʠ\003\002\002\002̃ʭ\003\002\002\002̃ʹ\003\002\002\002̃ˀ\003\002\002\002̃ˇ\003\002\002\002̃˔\003\002\002\002̃˕\003\002\002\002̃˛\003\002\002\002̃ˡ\003\002\002\002̃˧\003\002\002\002̃˭\003\002\002\002̃˸\003\002\002\002̃˿\003\002\002\002̄̌\003\002\002\002̅̆\f\013\002\002̆̇\007\007\002\002̇̈\0054\033\002̈̉\007\003\002\002̉̋\003\002\002\002̊̅\003\002\002\002̋̎\003\002\002\002̌̊\003\002\002\002̌̍\003\002\002\002̍7\003\002\002\002̎̌\003\002\002\002̏̐\007-\002\002̐̑\0076\002\002̖̑\005> \002̒̓\007-\002\002̓̔\0076\002\002̖̔\007\002\002̏̕\003\002\002\002̒̕\003\002\002\002̖9\003\002\002\002̗̘\t\n\002\002̘;\003\002\002\002̙̚\t\013\002\002̚=\003\002\002\002̛̝\007/\002\002̜̞\t\b\002\002̝̜\003\002\002\002̝̞\003\002\002\002̞̟\003\002\002\002̟̠\007\002\002̠̣\005@!\002̡̢\007v\002\002̢̤\005@!\002̡̣\003\002\002\002̣̤\003\002\002\002̤?\003\002\002\002̥̦\t\f\002\002̦A\003\002\002\002̧̨\b\"\001\002̨̩\007\002\002̩̪\007\002\002̪̫\005B\"\002̫̬\007\002\002̬̯\003\002\002\002̭̯\005D#\002̧̮\003\002\002\002̮̭\003\002\002\002̴̯\003\002\002\002̰̱\f\005\002\002̱̳\007\002\002̲̰\003\002\002\002̶̳\003\002\002\002̴̲\003\002\002\002̴̵\003\002\002\002̵C\003\002\002\002̶̴\003\002\002\002̷̻\007\002\002̸̻\007\002\002̹̻\005R*\002̷̺\003\002\002\002̸̺\003\002\002\002̺̹\003\002\002\002̻E\003\002\002\002̼̽\007>\002\002̽̾\005,\027\002̾̿\007?\002\002̿̀\005,\027\002̀G\003\002\002\002́͂\007L\002\002͍͂\007\b\002\002̓̈́\007M\002\002̈́ͅ\007\022\002\002͊ͅ\005,\027\002͇͆\007\006\002\002͇͉\005,\027\002͈͆\003\002\002\002͉͌\003\002\002\002͈͊\003\002\002\002͊͋\003\002\002\002͎͋\003\002\002\002͌͊\003\002\002\002͍̓\003\002\002\002͍͎\003\002\002\002͎͙\003\002\002\002͏͐\007\023\002\002͐͑\007\022\002\002͖͑\005\022\n\002͓͒\007\006\002\002͓͕\005\022\n\002͔͒\003\002\002\002͕͘\003\002\002\002͖͔\003\002\002\002͖͗\003\002\002\002͚͗\003\002\002\002͖͘\003\002\002\002͙͏\003\002\002\002͙͚\003\002\002\002͚͜\003\002\002\002͛͝\005J&\002͛͜\003\002\002\002͜͝\003\002\002\002͝͞\003\002\002\002͟͞\007\005\002\002͟I\003\002\002\002͠͡\007N\002\002͡ͱ\005L'\002ͣ͢\007O\002\002ͣͱ\005L'\002ͤͥ\007N\002\002ͥͦ\007\036\002\002ͦͧ\005L'\002ͧͨ\007\032\002\002ͨͩ\005L'\002ͩͱ\003\002\002\002ͪͫ\007O\002\002ͫͬ\007\036\002\002ͬͭ\005L'\002ͭͮ\007\032\002\002ͮͯ\005L'\002ͯͱ\003\002\002\002Ͱ͠\003\002\002\002Ͱ͢\003\002\002\002Ͱͤ\003\002\002\002Ͱͪ\003\002\002\002ͱK\003\002\002\002Ͳͳ\007P\002\002ͳͼ\007Q\002\002ʹ͵\007P\002\002͵ͼ\007R\002\002Ͷͷ\007S\002\002ͷͼ\007T\002\002͸͹\005,\027\002͹ͺ\t\r\002\002ͺͼ\003\002\002\002ͻͲ\003\002\002\002ͻʹ\003\002\002\002ͻͶ\003\002\002\002ͻ͸\003\002\002\002ͼM\003\002\002\002ͽ;\007a\002\002;΂\t\016\002\002Ϳ΀\007b\002\002΀΂\t\017\002\002΁ͽ\003\002\002\002΁Ϳ\003\002\002\002΂O\003\002\002\002΃Έ\005R*\002΄΅\007\004\002\002΅·\005R*\002Ά΄\003\002\002\002·Ί\003\002\002\002ΈΆ\003\002\002\002ΈΉ\003\002\002\002ΉQ\003\002\002\002ΊΈ\003\002\002\002΋Α\007\002\002ΌΑ\005T+\002΍Α\005X-\002ΎΑ\007\002\002ΏΑ\007\002\002ΐ΋\003\002\002\002ΐΌ\003\002\002\002ΐ΍\003\002\002\002ΐΎ\003\002\002\002ΐΏ\003\002\002\002ΑS\003\002\002\002ΒΓ\007\002\002ΓU\003\002\002\002ΔΗ\007\002\002ΕΗ\007\002\002ΖΔ\003\002\002\002ΖΕ\003\002\002\002ΗW\003\002\002\002ΘΙ\t\020\002\002ΙY\003\002\002\002p¡§ÆÏÒÖØÛáèóöúāĉďĒĔĠħīįĳĺŃņŊœŖŚŞũŬųƆƊƎƒƖƚƜƧƬƵƿǄǆǌǐǒǚǫǴȁȉȋȐȖȞȧȭȵȻȿɄɉɏɝɟɱɼʇʌʓʖʚʥʩʱʵˎˑ˙˟˥˫˴̴̝̣̮̺͍͖͙̃̌͊̕͜Ͱͻ΁ΈΐΖ"; public static final org.antlr.v4.runtime.atn.ATN _ATN; public final SingleStatementContext singleStatement() throws org.antlr.v4.runtime.RecognitionException { SingleStatementContext _localctx = new SingleStatementContext(this._ctx, getState());
/*  142 */     enterRule(_localctx, 0, 0);
/*      */     try {
/*  144 */       enterOuterAlt(_localctx, 1);
/*      */       
/*  146 */       setState(88);statement();
/*  147 */       setState(89);match(-1);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/*  151 */       _localctx.exception = re;
/*  152 */       this._errHandler.reportError(this, re);
/*  153 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/*  156 */       exitRule();
/*      */     }
/*  158 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SingleExpressionContext extends org.antlr.v4.runtime.ParserRuleContext {
/*  162 */     public org.antlr.v4.runtime.tree.TerminalNode EOF() { return getToken(-1, 0); }
/*      */     
/*  164 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/*      */ 
/*  167 */     public SingleExpressionContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/*  169 */     public int getRuleIndex() { return 1; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  172 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSingleExpression(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  176 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSingleExpression(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  180 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSingleExpression(this);
/*  181 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SingleExpressionContext singleExpression() throws org.antlr.v4.runtime.RecognitionException {
/*  186 */     SingleExpressionContext _localctx = new SingleExpressionContext(this._ctx, getState());
/*  187 */     enterRule(_localctx, 2, 1);
/*      */     try {
/*  189 */       enterOuterAlt(_localctx, 1);
/*      */       
/*  191 */       setState(91);expression();
/*  192 */       setState(92);match(-1);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/*  196 */       _localctx.exception = re;
/*  197 */       this._errHandler.reportError(this, re);
/*  198 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/*  201 */       exitRule();
/*      */     }
/*  203 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class StatementContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/*  208 */     public StatementContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/*  210 */     public int getRuleIndex() { return 2; }
/*      */     
/*      */     public StatementContext() {}
/*      */     
/*  214 */     public void copyFrom(StatementContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class DropViewContext extends SqlBaseParser.StatementContext {
/*  218 */     public org.antlr.v4.runtime.tree.TerminalNode VIEW() { return getToken(88, 0); }
/*      */     
/*  220 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  222 */     public org.antlr.v4.runtime.tree.TerminalNode DROP() { return getToken(112, 0); }
/*  223 */     public DropViewContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  226 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterDropView(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  230 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitDropView(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  234 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitDropView(this);
/*  235 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  239 */   public static class ShowSchemasContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode IN() { return getToken(25, 0); }
/*  240 */     public org.antlr.v4.runtime.tree.TerminalNode SCHEMAS() { return getToken(106, 0); }
/*  241 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  242 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/*      */     
/*  244 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/*  246 */     public ShowSchemasContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  249 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowSchemas(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  253 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowSchemas(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  257 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowSchemas(this);
/*  258 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  262 */   public static class ShowCatalogsContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode CATALOGS() { return getToken(107, 0); }
/*  263 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  264 */     public ShowCatalogsContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  267 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowCatalogs(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  271 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowCatalogs(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  275 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowCatalogs(this);
/*  276 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  280 */   public static class CreateViewContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode AS() { return getToken(9, 0); }
/*  281 */     public org.antlr.v4.runtime.tree.TerminalNode VIEW() { return getToken(88, 0); }
/*  282 */     public org.antlr.v4.runtime.tree.TerminalNode CREATE() { return getToken(86, 0); }
/*      */     
/*  284 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  286 */     public org.antlr.v4.runtime.tree.TerminalNode OR() { return getToken(23, 0); }
/*  287 */     public org.antlr.v4.runtime.tree.TerminalNode REPLACE() { return getToken(89, 0); }
/*      */     
/*  289 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/*  291 */     public CreateViewContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  294 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterCreateView(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  298 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitCreateView(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  302 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitCreateView(this);
/*  303 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class ShowPartitionsContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.Token limit;
/*      */     
/*  308 */     public org.antlr.v4.runtime.tree.TerminalNode LIMIT() { return getToken(19, 0); }
/*      */     
/*  310 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.SortItemContext> sortItem() {
/*  313 */       return getRuleContexts(SqlBaseParser.SortItemContext.class);
/*      */     }
/*      */     
/*  316 */     public SqlBaseParser.BooleanExpressionContext booleanExpression() { return (SqlBaseParser.BooleanExpressionContext)getRuleContext(SqlBaseParser.BooleanExpressionContext.class, 0); }
/*      */     
/*      */ 
/*  319 */     public SqlBaseParser.SortItemContext sortItem(int i) { return (SqlBaseParser.SortItemContext)getRuleContext(SqlBaseParser.SortItemContext.class, i); }
/*      */     
/*  321 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  322 */     public org.antlr.v4.runtime.tree.TerminalNode IN() { return getToken(25, 0); }
/*  323 */     public org.antlr.v4.runtime.tree.TerminalNode WHERE() { return getToken(14, 0); }
/*  324 */     public org.antlr.v4.runtime.tree.TerminalNode INTEGER_VALUE() { return getToken(146, 0); }
/*  325 */     public org.antlr.v4.runtime.tree.TerminalNode ORDER() { return getToken(17, 0); }
/*  326 */     public org.antlr.v4.runtime.tree.TerminalNode BY() { return getToken(16, 0); }
/*  327 */     public org.antlr.v4.runtime.tree.TerminalNode PARTITIONS() { return getToken(110, 0); }
/*  328 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/*  329 */     public ShowPartitionsContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  332 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowPartitions(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  336 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowPartitions(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  340 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowPartitions(this);
/*  341 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  345 */   public static class ShowSessionContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode SESSION() { return getToken(129, 0); }
/*  346 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  347 */     public ShowSessionContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  350 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowSession(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  354 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowSession(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  358 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowSession(this);
/*  359 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class RenameTableContext extends SqlBaseParser.StatementContext { public SqlBaseParser.QualifiedNameContext from;
/*      */     public SqlBaseParser.QualifiedNameContext to;
/*      */     
/*  366 */     public SqlBaseParser.QualifiedNameContext qualifiedName(int i) { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, i); }
/*      */     
/*      */ 
/*  369 */     public java.util.List<SqlBaseParser.QualifiedNameContext> qualifiedName() { return getRuleContexts(SqlBaseParser.QualifiedNameContext.class); }
/*      */     
/*  371 */     public org.antlr.v4.runtime.tree.TerminalNode ALTER() { return getToken(123, 0); }
/*  372 */     public org.antlr.v4.runtime.tree.TerminalNode RENAME() { return getToken(124, 0); }
/*  373 */     public org.antlr.v4.runtime.tree.TerminalNode TABLE() { return getToken(87, 0); }
/*  374 */     public org.antlr.v4.runtime.tree.TerminalNode TO() { return getToken(116, 0); }
/*  375 */     public RenameTableContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  378 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterRenameTable(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  382 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitRenameTable(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  386 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitRenameTable(this);
/*  387 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class UseContext extends SqlBaseParser.StatementContext { public SqlBaseParser.IdentifierContext schema;
/*      */     public SqlBaseParser.IdentifierContext catalog;
/*      */     
/*  393 */     public org.antlr.v4.runtime.tree.TerminalNode USE() { return getToken(109, 0); }
/*      */     
/*  395 */     public SqlBaseParser.IdentifierContext identifier(int i) { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, i); }
/*      */     
/*      */ 
/*  398 */     public java.util.List<SqlBaseParser.IdentifierContext> identifier() { return getRuleContexts(SqlBaseParser.IdentifierContext.class); }
/*      */     
/*  400 */     public UseContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  403 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterUse(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  407 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitUse(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  411 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitUse(this);
/*  412 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  416 */   public static class CreateTableAsSelectContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode AS() { return getToken(9, 0); }
/*  417 */     public org.antlr.v4.runtime.tree.TerminalNode CREATE() { return getToken(86, 0); }
/*      */     
/*  419 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  421 */     public org.antlr.v4.runtime.tree.TerminalNode TABLE() { return getToken(87, 0); }
/*      */     
/*  423 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/*  425 */     public CreateTableAsSelectContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  428 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterCreateTableAsSelect(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  432 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitCreateTableAsSelect(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  436 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitCreateTableAsSelect(this);
/*  437 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  441 */   public static class SetSessionContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode SET() { return getToken(127, 0); }
/*  442 */     public org.antlr.v4.runtime.tree.TerminalNode SESSION() { return getToken(129, 0); }
/*      */     
/*  444 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  446 */     public org.antlr.v4.runtime.tree.TerminalNode STRING() { return getToken(145, 0); }
/*  447 */     public org.antlr.v4.runtime.tree.TerminalNode EQ() { return getToken(133, 0); }
/*  448 */     public SetSessionContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  451 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSetSession(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  455 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSetSession(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  459 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSetSession(this);
/*  460 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  464 */   public static class ShowColumnsContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode IN() { return getToken(25, 0); }
/*  465 */     public org.antlr.v4.runtime.tree.TerminalNode DESC() { return getToken(39, 0); }
/*  466 */     public org.antlr.v4.runtime.tree.TerminalNode COLUMNS() { return getToken(108, 0); }
/*      */     
/*  468 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  470 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  471 */     public org.antlr.v4.runtime.tree.TerminalNode DESCRIBE() { return getToken(93, 0); }
/*  472 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/*  473 */     public ShowColumnsContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  476 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowColumns(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  480 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowColumns(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  484 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowColumns(this);
/*  485 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class ShowTablesContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.Token pattern;
/*      */     
/*  490 */     public org.antlr.v4.runtime.tree.TerminalNode IN() { return getToken(25, 0); }
/*      */     
/*  492 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  494 */     public org.antlr.v4.runtime.tree.TerminalNode TABLES() { return getToken(105, 0); }
/*  495 */     public org.antlr.v4.runtime.tree.TerminalNode LIKE() { return getToken(29, 0); }
/*  496 */     public org.antlr.v4.runtime.tree.TerminalNode STRING() { return getToken(145, 0); }
/*  497 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  498 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/*  499 */     public ShowTablesContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  502 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowTables(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  506 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowTables(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  510 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowTables(this);
/*  511 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class StatementDefaultContext extends SqlBaseParser.StatementContext {
/*  516 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/*  518 */     public StatementDefaultContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  521 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterStatementDefault(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  525 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitStatementDefault(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  529 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitStatementDefault(this);
/*  530 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class DropTableContext extends SqlBaseParser.StatementContext {
/*  535 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  537 */     public org.antlr.v4.runtime.tree.TerminalNode TABLE() { return getToken(87, 0); }
/*  538 */     public org.antlr.v4.runtime.tree.TerminalNode DROP() { return getToken(112, 0); }
/*  539 */     public DropTableContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  542 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterDropTable(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  546 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitDropTable(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  550 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitDropTable(this);
/*  551 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  555 */   public static class ResetSessionContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode RESET() { return getToken(128, 0); }
/*  556 */     public org.antlr.v4.runtime.tree.TerminalNode SESSION() { return getToken(129, 0); }
/*      */     
/*  558 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  560 */     public ResetSessionContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  563 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterResetSession(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  567 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitResetSession(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  571 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitResetSession(this);
/*  572 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*  576 */   public static class ShowFunctionsContext extends SqlBaseParser.StatementContext { public org.antlr.v4.runtime.tree.TerminalNode FUNCTIONS() { return getToken(111, 0); }
/*  577 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/*  578 */     public ShowFunctionsContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  581 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterShowFunctions(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  585 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitShowFunctions(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  589 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitShowFunctions(this);
/*  590 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class ExplainContext extends SqlBaseParser.StatementContext {
/*  595 */     public SqlBaseParser.StatementContext statement() { return (SqlBaseParser.StatementContext)getRuleContext(SqlBaseParser.StatementContext.class, 0); }
/*      */     
/*      */     public SqlBaseParser.ExplainOptionContext explainOption(int i) {
/*  598 */       return (SqlBaseParser.ExplainOptionContext)getRuleContext(SqlBaseParser.ExplainOptionContext.class, i);
/*      */     }
/*      */     
/*  601 */     public java.util.List<SqlBaseParser.ExplainOptionContext> explainOption() { return getRuleContexts(SqlBaseParser.ExplainOptionContext.class); }
/*      */     
/*  603 */     public org.antlr.v4.runtime.tree.TerminalNode EXPLAIN() { return getToken(94, 0); }
/*  604 */     public ExplainContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  607 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterExplain(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  611 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitExplain(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  615 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitExplain(this);
/*  616 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class InsertIntoContext extends SqlBaseParser.StatementContext {
/*  621 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*  623 */     public org.antlr.v4.runtime.tree.TerminalNode INTO() { return getToken(91, 0); }
/*  624 */     public org.antlr.v4.runtime.tree.TerminalNode INSERT() { return getToken(90, 0); }
/*      */     
/*  626 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/*  628 */     public InsertIntoContext(SqlBaseParser.StatementContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/*  631 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterInsertInto(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/*  635 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitInsertInto(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/*  639 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitInsertInto(this);
/*  640 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final StatementContext statement() throws org.antlr.v4.runtime.RecognitionException {
/*  645 */     StatementContext _localctx = new StatementContext(this._ctx, getState());
/*  646 */     enterRule(_localctx, 4, 2);
/*      */     try
/*      */     {
/*  649 */       setState(214);
/*  650 */       int _la; switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 10, this._ctx)) {
/*      */       case 1: 
/*  652 */         _localctx = new StatementDefaultContext(_localctx);
/*  653 */         enterOuterAlt(_localctx, 1);
/*      */         
/*  655 */         setState(94);query();
/*      */         
/*  657 */         break;
/*      */       
/*      */       case 2: 
/*  660 */         _localctx = new UseContext(_localctx);
/*  661 */         enterOuterAlt(_localctx, 2);
/*      */         
/*  663 */         setState(95);match(109);
/*  664 */         setState(96);((UseContext)_localctx).schema = identifier();
/*      */         
/*  666 */         break;
/*      */       
/*      */       case 3: 
/*  669 */         _localctx = new UseContext(_localctx);
/*  670 */         enterOuterAlt(_localctx, 3);
/*      */         
/*  672 */         setState(97);match(109);
/*  673 */         setState(98);((UseContext)_localctx).catalog = identifier();
/*  674 */         setState(99);match(2);
/*  675 */         setState(100);((UseContext)_localctx).schema = identifier();
/*      */         
/*  677 */         break;
/*      */       
/*      */       case 4: 
/*  680 */         _localctx = new CreateTableAsSelectContext(_localctx);
/*  681 */         enterOuterAlt(_localctx, 4);
/*      */         
/*  683 */         setState(102);match(86);
/*  684 */         setState(103);match(87);
/*  685 */         setState(104);qualifiedName();
/*  686 */         setState(105);match(9);
/*  687 */         setState(106);query();
/*      */         
/*  689 */         break;
/*      */       
/*      */       case 5: 
/*  692 */         _localctx = new DropTableContext(_localctx);
/*  693 */         enterOuterAlt(_localctx, 5);
/*      */         
/*  695 */         setState(108);match(112);
/*  696 */         setState(109);match(87);
/*  697 */         setState(110);qualifiedName();
/*      */         
/*  699 */         break;
/*      */       
/*      */       case 6: 
/*  702 */         _localctx = new InsertIntoContext(_localctx);
/*  703 */         enterOuterAlt(_localctx, 6);
/*      */         
/*  705 */         setState(111);match(90);
/*  706 */         setState(112);match(91);
/*  707 */         setState(113);qualifiedName();
/*  708 */         setState(114);query();
/*      */         
/*  710 */         break;
/*      */       
/*      */       case 7: 
/*  713 */         _localctx = new RenameTableContext(_localctx);
/*  714 */         enterOuterAlt(_localctx, 7);
/*      */         
/*  716 */         setState(116);match(123);
/*  717 */         setState(117);match(87);
/*  718 */         setState(118);((RenameTableContext)_localctx).from = qualifiedName();
/*  719 */         setState(119);match(124);
/*  720 */         setState(120);match(116);
/*  721 */         setState(121);((RenameTableContext)_localctx).to = qualifiedName();
/*      */         
/*  723 */         break;
/*      */       
/*      */       case 8: 
/*  726 */         _localctx = new CreateViewContext(_localctx);
/*  727 */         enterOuterAlt(_localctx, 8);
/*      */         
/*  729 */         setState(123);match(86);
/*  730 */         setState(126);
/*  731 */         _la = this._input.LA(1);
/*  732 */         if (_la == 23)
/*      */         {
/*  734 */           setState(124);match(23);
/*  735 */           setState(125);match(89);
/*      */         }
/*      */         
/*      */ 
/*  739 */         setState(128);match(88);
/*  740 */         setState(129);qualifiedName();
/*  741 */         setState(130);match(9);
/*  742 */         setState(131);query();
/*      */         
/*  744 */         break;
/*      */       
/*      */       case 9: 
/*  747 */         _localctx = new DropViewContext(_localctx);
/*  748 */         enterOuterAlt(_localctx, 9);
/*      */         
/*  750 */         setState(133);match(112);
/*  751 */         setState(134);match(88);
/*  752 */         setState(135);qualifiedName();
/*      */         
/*  754 */         break;
/*      */       
/*      */       case 10: 
/*  757 */         _localctx = new ExplainContext(_localctx);
/*  758 */         enterOuterAlt(_localctx, 10);
/*      */         
/*  760 */         setState(136);match(94);
/*  761 */         setState(148);
/*  762 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 2, this._ctx))
/*      */         {
/*      */         case 1: 
/*  765 */           setState(137);match(6);
/*  766 */           setState(138);explainOption();
/*  767 */           setState(143);
/*  768 */           this._errHandler.sync(this);
/*  769 */           _la = this._input.LA(1);
/*  770 */           while (_la == 4)
/*      */           {
/*      */ 
/*  773 */             setState(139);match(4);
/*  774 */             setState(140);explainOption();
/*      */             
/*      */ 
/*  777 */             setState(145);
/*  778 */             this._errHandler.sync(this);
/*  779 */             _la = this._input.LA(1);
/*      */           }
/*  781 */           setState(146);match(3);
/*      */         }
/*      */         
/*      */         
/*  785 */         setState(150);statement();
/*      */         
/*  787 */         break;
/*      */       
/*      */       case 11: 
/*  790 */         _localctx = new ShowTablesContext(_localctx);
/*  791 */         enterOuterAlt(_localctx, 11);
/*      */         
/*  793 */         setState(151);match(104);
/*  794 */         setState(152);match(105);
/*  795 */         setState(155);
/*  796 */         _la = this._input.LA(1);
/*  797 */         if ((_la == 8) || (_la == 25))
/*      */         {
/*  799 */           setState(153);
/*  800 */           _la = this._input.LA(1);
/*  801 */           if ((_la != 8) && (_la != 25)) {
/*  802 */             this._errHandler.recoverInline(this);
/*      */           }
/*  804 */           consume();
/*  805 */           setState(154);qualifiedName();
/*      */         }
/*      */         
/*      */ 
/*  809 */         setState(159);
/*  810 */         _la = this._input.LA(1);
/*  811 */         if (_la == 29)
/*      */         {
/*  813 */           setState(157);match(29);
/*  814 */           setState(158);((ShowTablesContext)_localctx).pattern = match(145);
/*      */         }
/*      */         
/*      */ 
/*      */ 
/*      */ 
/*      */         break;
/*      */       case 12: 
/*  822 */         _localctx = new ShowSchemasContext(_localctx);
/*  823 */         enterOuterAlt(_localctx, 12);
/*      */         
/*  825 */         setState(161);match(104);
/*  826 */         setState(162);match(106);
/*  827 */         setState(165);
/*  828 */         _la = this._input.LA(1);
/*  829 */         if ((_la == 8) || (_la == 25))
/*      */         {
/*  831 */           setState(163);
/*  832 */           _la = this._input.LA(1);
/*  833 */           if ((_la != 8) && (_la != 25)) {
/*  834 */             this._errHandler.recoverInline(this);
/*      */           }
/*  836 */           consume();
/*  837 */           setState(164);identifier();
/*      */         }
/*      */         
/*      */ 
/*      */ 
/*      */ 
/*      */         break;
/*      */       case 13: 
/*  845 */         _localctx = new ShowCatalogsContext(_localctx);
/*  846 */         enterOuterAlt(_localctx, 13);
/*      */         
/*  848 */         setState(167);match(104);
/*  849 */         setState(168);match(107);
/*      */         
/*  851 */         break;
/*      */       
/*      */       case 14: 
/*  854 */         _localctx = new ShowColumnsContext(_localctx);
/*  855 */         enterOuterAlt(_localctx, 14);
/*      */         
/*  857 */         setState(169);match(104);
/*  858 */         setState(170);match(108);
/*  859 */         setState(171);
/*  860 */         _la = this._input.LA(1);
/*  861 */         if ((_la != 8) && (_la != 25)) {
/*  862 */           this._errHandler.recoverInline(this);
/*      */         }
/*  864 */         consume();
/*  865 */         setState(172);qualifiedName();
/*      */         
/*  867 */         break;
/*      */       
/*      */       case 15: 
/*  870 */         _localctx = new ShowColumnsContext(_localctx);
/*  871 */         enterOuterAlt(_localctx, 15);
/*      */         
/*  873 */         setState(173);match(93);
/*  874 */         setState(174);qualifiedName();
/*      */         
/*  876 */         break;
/*      */       
/*      */       case 16: 
/*  879 */         _localctx = new ShowColumnsContext(_localctx);
/*  880 */         enterOuterAlt(_localctx, 16);
/*      */         
/*  882 */         setState(175);match(39);
/*  883 */         setState(176);qualifiedName();
/*      */         
/*  885 */         break;
/*      */       
/*      */       case 17: 
/*  888 */         _localctx = new ShowFunctionsContext(_localctx);
/*  889 */         enterOuterAlt(_localctx, 17);
/*      */         
/*  891 */         setState(177);match(104);
/*  892 */         setState(178);match(111);
/*      */         
/*  894 */         break;
/*      */       
/*      */       case 18: 
/*  897 */         _localctx = new ShowSessionContext(_localctx);
/*  898 */         enterOuterAlt(_localctx, 18);
/*      */         
/*  900 */         setState(179);match(104);
/*  901 */         setState(180);match(129);
/*      */         
/*  903 */         break;
/*      */       
/*      */       case 19: 
/*  906 */         _localctx = new SetSessionContext(_localctx);
/*  907 */         enterOuterAlt(_localctx, 19);
/*      */         
/*  909 */         setState(181);match(127);
/*  910 */         setState(182);match(129);
/*  911 */         setState(183);qualifiedName();
/*  912 */         setState(184);match(133);
/*  913 */         setState(185);match(145);
/*      */         
/*  915 */         break;
/*      */       
/*      */       case 20: 
/*  918 */         _localctx = new ResetSessionContext(_localctx);
/*  919 */         enterOuterAlt(_localctx, 20);
/*      */         
/*  921 */         setState(187);match(128);
/*  922 */         setState(188);match(129);
/*  923 */         setState(189);qualifiedName();
/*      */         
/*  925 */         break;
/*      */       
/*      */       case 21: 
/*  928 */         _localctx = new ShowPartitionsContext(_localctx);
/*  929 */         enterOuterAlt(_localctx, 21);
/*      */         
/*  931 */         setState(190);match(104);
/*  932 */         setState(191);match(110);
/*  933 */         setState(192);
/*  934 */         _la = this._input.LA(1);
/*  935 */         if ((_la != 8) && (_la != 25)) {
/*  936 */           this._errHandler.recoverInline(this);
/*      */         }
/*  938 */         consume();
/*  939 */         setState(193);qualifiedName();
/*  940 */         setState(196);
/*  941 */         _la = this._input.LA(1);
/*  942 */         if (_la == 14)
/*      */         {
/*  944 */           setState(194);match(14);
/*  945 */           setState(195);booleanExpression(0);
/*      */         }
/*      */         
/*      */ 
/*  949 */         setState(208);
/*  950 */         _la = this._input.LA(1);
/*  951 */         if (_la == 17)
/*      */         {
/*  953 */           setState(198);match(17);
/*  954 */           setState(199);match(16);
/*  955 */           setState(200);sortItem();
/*  956 */           setState(205);
/*  957 */           this._errHandler.sync(this);
/*  958 */           _la = this._input.LA(1);
/*  959 */           while (_la == 4)
/*      */           {
/*      */ 
/*  962 */             setState(201);match(4);
/*  963 */             setState(202);sortItem();
/*      */             
/*      */ 
/*  966 */             setState(207);
/*  967 */             this._errHandler.sync(this);
/*  968 */             _la = this._input.LA(1);
/*      */           }
/*      */         }
/*      */         
/*      */ 
/*  973 */         setState(212);
/*  974 */         _la = this._input.LA(1);
/*  975 */         if (_la == 19)
/*      */         {
/*  977 */           setState(210);match(19);
/*  978 */           setState(211);((ShowPartitionsContext)_localctx).limit = match(146);
/*      */         }
/*      */         
/*      */         break;
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/*  987 */       _localctx.exception = re;
/*  988 */       this._errHandler.reportError(this, re);
/*  989 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/*  992 */       exitRule();
/*      */     }
/*  994 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QueryContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.WithContext with() {
/*  999 */       return (SqlBaseParser.WithContext)getRuleContext(SqlBaseParser.WithContext.class, 0);
/*      */     }
/*      */     
/* 1002 */     public SqlBaseParser.QueryNoWithContext queryNoWith() { return (SqlBaseParser.QueryNoWithContext)getRuleContext(SqlBaseParser.QueryNoWithContext.class, 0); }
/*      */     
/*      */ 
/* 1005 */     public QueryContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1007 */     public int getRuleIndex() { return 3; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1010 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQuery(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1014 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQuery(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1018 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQuery(this);
/* 1019 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QueryContext query() throws org.antlr.v4.runtime.RecognitionException {
/* 1024 */     QueryContext _localctx = new QueryContext(this._ctx, getState());
/* 1025 */     enterRule(_localctx, 6, 3);
/*      */     try
/*      */     {
/* 1028 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1030 */       setState(217);
/* 1031 */       int _la = this._input.LA(1);
/* 1032 */       if (_la == 83)
/*      */       {
/* 1034 */         setState(216);with();
/*      */       }
/*      */       
/*      */ 
/* 1038 */       setState(219);queryNoWith();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1042 */       _localctx.exception = re;
/* 1043 */       this._errHandler.reportError(this, re);
/* 1044 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1047 */       exitRule();
/*      */     }
/* 1049 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class WithContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 1054 */     public java.util.List<SqlBaseParser.NamedQueryContext> namedQuery() { return getRuleContexts(SqlBaseParser.NamedQueryContext.class); }
/*      */     
/* 1056 */     public org.antlr.v4.runtime.tree.TerminalNode RECURSIVE() { return getToken(84, 0); }
/* 1057 */     public org.antlr.v4.runtime.tree.TerminalNode WITH() { return getToken(83, 0); }
/*      */     
/* 1059 */     public SqlBaseParser.NamedQueryContext namedQuery(int i) { return (SqlBaseParser.NamedQueryContext)getRuleContext(SqlBaseParser.NamedQueryContext.class, i); }
/*      */     
/*      */ 
/* 1062 */     public WithContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1064 */     public int getRuleIndex() { return 4; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1067 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterWith(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1071 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitWith(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1075 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitWith(this);
/* 1076 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final WithContext with() throws org.antlr.v4.runtime.RecognitionException {
/* 1081 */     WithContext _localctx = new WithContext(this._ctx, getState());
/* 1082 */     enterRule(_localctx, 8, 4);
/*      */     try
/*      */     {
/* 1085 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1087 */       setState(221);match(83);
/* 1088 */       setState(223);
/* 1089 */       int _la = this._input.LA(1);
/* 1090 */       if (_la == 84)
/*      */       {
/* 1092 */         setState(222);match(84);
/*      */       }
/*      */       
/*      */ 
/* 1096 */       setState(225);namedQuery();
/* 1097 */       setState(230);
/* 1098 */       this._errHandler.sync(this);
/* 1099 */       _la = this._input.LA(1);
/* 1100 */       while (_la == 4)
/*      */       {
/*      */ 
/* 1103 */         setState(226);match(4);
/* 1104 */         setState(227);namedQuery();
/*      */         
/*      */ 
/* 1107 */         setState(232);
/* 1108 */         this._errHandler.sync(this);
/* 1109 */         _la = this._input.LA(1);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1114 */       _localctx.exception = re;
/* 1115 */       this._errHandler.reportError(this, re);
/* 1116 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1119 */       exitRule();
/*      */     }
/* 1121 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QueryNoWithContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public org.antlr.v4.runtime.Token limit;
/*      */     public SqlBaseParser.NumberContext confidence;
/*      */     
/* 1128 */     public SqlBaseParser.NumberContext number() { return (SqlBaseParser.NumberContext)getRuleContext(SqlBaseParser.NumberContext.class, 0); }
/*      */     
/* 1130 */     public org.antlr.v4.runtime.tree.TerminalNode INTEGER_VALUE() { return getToken(146, 0); }
/* 1131 */     public org.antlr.v4.runtime.tree.TerminalNode LIMIT() { return getToken(19, 0); }
/*      */     
/* 1133 */     public java.util.List<SqlBaseParser.SortItemContext> sortItem() { return getRuleContexts(SqlBaseParser.SortItemContext.class); }
/*      */     
/* 1135 */     public org.antlr.v4.runtime.tree.TerminalNode ORDER() { return getToken(17, 0); }
/* 1136 */     public org.antlr.v4.runtime.tree.TerminalNode BY() { return getToken(16, 0); }
/* 1137 */     public org.antlr.v4.runtime.tree.TerminalNode CONFIDENCE() { return getToken(22, 0); }
/* 1138 */     public org.antlr.v4.runtime.tree.TerminalNode APPROXIMATE() { return getToken(20, 0); }
/*      */     
/* 1140 */     public SqlBaseParser.SortItemContext sortItem(int i) { return (SqlBaseParser.SortItemContext)getRuleContext(SqlBaseParser.SortItemContext.class, i); }
/*      */     
/*      */ 
/* 1143 */     public SqlBaseParser.QueryTermContext queryTerm() { return (SqlBaseParser.QueryTermContext)getRuleContext(SqlBaseParser.QueryTermContext.class, 0); }
/*      */     
/* 1145 */     public org.antlr.v4.runtime.tree.TerminalNode AT() { return getToken(21, 0); }
/*      */     
/* 1147 */     public QueryNoWithContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1149 */     public int getRuleIndex() { return 5; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1152 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQueryNoWith(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1156 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQueryNoWith(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1160 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQueryNoWith(this);
/* 1161 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QueryNoWithContext queryNoWith() throws org.antlr.v4.runtime.RecognitionException {
/* 1166 */     QueryNoWithContext _localctx = new QueryNoWithContext(this._ctx, getState());
/* 1167 */     enterRule(_localctx, 10, 5);
/*      */     try
/*      */     {
/* 1170 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1172 */       setState(233);queryTerm(0);
/* 1173 */       setState(244);
/* 1174 */       int _la = this._input.LA(1);
/* 1175 */       if (_la == 17)
/*      */       {
/* 1177 */         setState(234);match(17);
/* 1178 */         setState(235);match(16);
/* 1179 */         setState(236);sortItem();
/* 1180 */         setState(241);
/* 1181 */         this._errHandler.sync(this);
/* 1182 */         _la = this._input.LA(1);
/* 1183 */         while (_la == 4)
/*      */         {
/*      */ 
/* 1186 */           setState(237);match(4);
/* 1187 */           setState(238);sortItem();
/*      */           
/*      */ 
/* 1190 */           setState(243);
/* 1191 */           this._errHandler.sync(this);
/* 1192 */           _la = this._input.LA(1);
/*      */         }
/*      */       }
/*      */       
/*      */ 
/* 1197 */       setState(248);
/* 1198 */       _la = this._input.LA(1);
/* 1199 */       if (_la == 19)
/*      */       {
/* 1201 */         setState(246);match(19);
/* 1202 */         setState(247);_localctx.limit = match(146);
/*      */       }
/*      */       
/*      */ 
/* 1206 */       setState(255);
/* 1207 */       _la = this._input.LA(1);
/* 1208 */       if (_la == 20)
/*      */       {
/* 1210 */         setState(250);match(20);
/* 1211 */         setState(251);match(21);
/* 1212 */         setState(252);_localctx.confidence = number();
/* 1213 */         setState(253);match(22);
/*      */       }
/*      */       
/*      */ 
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1220 */       _localctx.exception = re;
/* 1221 */       this._errHandler.reportError(this, re);
/* 1222 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1225 */       exitRule();
/*      */     }
/* 1227 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QueryTermContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 1232 */     public QueryTermContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1234 */     public int getRuleIndex() { return 6; }
/*      */     
/*      */     public QueryTermContext() {}
/*      */     
/* 1238 */     public void copyFrom(QueryTermContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class QueryTermDefaultContext
/*      */     extends SqlBaseParser.QueryTermContext {
/* 1243 */     public SqlBaseParser.QueryPrimaryContext queryPrimary() { return (SqlBaseParser.QueryPrimaryContext)getRuleContext(SqlBaseParser.QueryPrimaryContext.class, 0); }
/*      */     
/* 1245 */     public QueryTermDefaultContext(SqlBaseParser.QueryTermContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1248 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQueryTermDefault(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1252 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQueryTermDefault(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1256 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQueryTermDefault(this);
/* 1257 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class SetOperationContext extends SqlBaseParser.QueryTermContext { public SqlBaseParser.QueryTermContext left;
/*      */     public org.antlr.v4.runtime.Token operator;
/*      */     public SqlBaseParser.QueryTermContext right;
/*      */     
/* 1264 */     public org.antlr.v4.runtime.tree.TerminalNode EXCEPT() { return getToken(114, 0); }
/* 1265 */     public org.antlr.v4.runtime.tree.TerminalNode UNION() { return getToken(113, 0); }
/* 1266 */     public org.antlr.v4.runtime.tree.TerminalNode INTERSECT() { return getToken(115, 0); }
/*      */     
/* 1268 */     public SqlBaseParser.SetQuantifierContext setQuantifier() { return (SqlBaseParser.SetQuantifierContext)getRuleContext(SqlBaseParser.SetQuantifierContext.class, 0); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.QueryTermContext> queryTerm() {
/* 1271 */       return getRuleContexts(SqlBaseParser.QueryTermContext.class);
/*      */     }
/*      */     
/* 1274 */     public SqlBaseParser.QueryTermContext queryTerm(int i) { return (SqlBaseParser.QueryTermContext)getRuleContext(SqlBaseParser.QueryTermContext.class, i); }
/*      */     
/* 1276 */     public SetOperationContext(SqlBaseParser.QueryTermContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1279 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSetOperation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1283 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSetOperation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1287 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSetOperation(this);
/* 1288 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QueryTermContext queryTerm() throws org.antlr.v4.runtime.RecognitionException {
/* 1293 */     return queryTerm(0);
/*      */   }
/*      */   
/*      */   private QueryTermContext queryTerm(int _p) throws org.antlr.v4.runtime.RecognitionException {
/* 1297 */     org.antlr.v4.runtime.ParserRuleContext _parentctx = this._ctx;
/* 1298 */     int _parentState = getState();
/* 1299 */     QueryTermContext _localctx = new QueryTermContext(this._ctx, _parentState);
/* 1300 */     QueryTermContext _prevctx = _localctx;
/* 1301 */     int _startState = 12;
/* 1302 */     enterRecursionRule(_localctx, 12, 6, _p);
/*      */     
/*      */     try
/*      */     {
/* 1306 */       enterOuterAlt(_localctx, 1);
/*      */       
/*      */ 
/* 1309 */       _localctx = new QueryTermDefaultContext(_localctx);
/* 1310 */       this._ctx = _localctx;
/* 1311 */       _prevctx = _localctx;
/*      */       
/* 1313 */       setState(258);queryPrimary();
/*      */       
/* 1315 */       this._ctx.stop = this._input.LT(-1);
/* 1316 */       setState(274);
/* 1317 */       this._errHandler.sync(this);
/* 1318 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 21, this._ctx);
/* 1319 */       while ((_alt != 2) && (_alt != 0)) {
/* 1320 */         if (_alt == 1) {
/* 1321 */           if (this._parseListeners != null) triggerExitRuleEvent();
/* 1322 */           _prevctx = _localctx;
/*      */           
/* 1324 */           setState(272);
/* 1325 */           int _la; switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 20, this._ctx))
/*      */           {
/*      */           case 1: 
/* 1328 */             _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
/* 1329 */             ((SetOperationContext)_localctx).left = _prevctx;
/* 1330 */             pushNewRecursionContext(_localctx, _startState, 6);
/* 1331 */             setState(260);
/* 1332 */             if (!precpred(this._ctx, 2)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 2)");
/* 1333 */             setState(261);((SetOperationContext)_localctx).operator = match(115);
/* 1334 */             setState(263);
/* 1335 */             _la = this._input.LA(1);
/* 1336 */             if ((_la == 10) || (_la == 13))
/*      */             {
/* 1338 */               setState(262);setQuantifier();
/*      */             }
/*      */             
/*      */ 
/* 1342 */             setState(265);((SetOperationContext)_localctx).right = queryTerm(3);
/*      */             
/* 1344 */             break;
/*      */           
/*      */ 
/*      */           case 2: 
/* 1348 */             _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
/* 1349 */             ((SetOperationContext)_localctx).left = _prevctx;
/* 1350 */             pushNewRecursionContext(_localctx, _startState, 6);
/* 1351 */             setState(266);
/* 1352 */             if (!precpred(this._ctx, 1)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 1)");
/* 1353 */             setState(267);
/* 1354 */             ((SetOperationContext)_localctx).operator = this._input.LT(1);
/* 1355 */             _la = this._input.LA(1);
/* 1356 */             if ((_la != 113) && (_la != 114)) {
/* 1357 */               ((SetOperationContext)_localctx).operator = this._errHandler.recoverInline(this);
/*      */             }
/* 1359 */             consume();
/* 1360 */             setState(269);
/* 1361 */             _la = this._input.LA(1);
/* 1362 */             if ((_la == 10) || (_la == 13))
/*      */             {
/* 1364 */               setState(268);setQuantifier();
/*      */             }
/*      */             
/*      */ 
/* 1368 */             setState(271);((SetOperationContext)_localctx).right = queryTerm(2);
/*      */           }
/*      */           
/*      */         }
/*      */         
/*      */ 
/* 1374 */         setState(276);
/* 1375 */         this._errHandler.sync(this);
/* 1376 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 21, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1381 */       _localctx.exception = re;
/* 1382 */       this._errHandler.reportError(this, re);
/* 1383 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1386 */       unrollRecursionContexts(_parentctx);
/*      */     }
/* 1388 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QueryPrimaryContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 1393 */     public QueryPrimaryContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1395 */     public int getRuleIndex() { return 7; }
/*      */     
/*      */     public QueryPrimaryContext() {}
/*      */     
/* 1399 */     public void copyFrom(QueryPrimaryContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class QueryPrimaryDefaultContext
/*      */     extends SqlBaseParser.QueryPrimaryContext {
/* 1404 */     public SqlBaseParser.QuerySpecificationContext querySpecification() { return (SqlBaseParser.QuerySpecificationContext)getRuleContext(SqlBaseParser.QuerySpecificationContext.class, 0); }
/*      */     
/* 1406 */     public QueryPrimaryDefaultContext(SqlBaseParser.QueryPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1409 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQueryPrimaryDefault(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1413 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQueryPrimaryDefault(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1417 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQueryPrimaryDefault(this);
/* 1418 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class InlineTableContext extends SqlBaseParser.QueryPrimaryContext {
/* 1423 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/*      */ 
/* 1426 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 1428 */     public org.antlr.v4.runtime.tree.TerminalNode VALUES() { return getToken(85, 0); }
/* 1429 */     public InlineTableContext(SqlBaseParser.QueryPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1432 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterInlineTable(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1436 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitInlineTable(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1440 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitInlineTable(this);
/* 1441 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class TableContext extends SqlBaseParser.QueryPrimaryContext {
/* 1446 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/* 1448 */     public org.antlr.v4.runtime.tree.TerminalNode TABLE() { return getToken(87, 0); }
/* 1449 */     public TableContext(SqlBaseParser.QueryPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1452 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterTable(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1456 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitTable(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1460 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitTable(this);
/* 1461 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class SubqueryContext extends SqlBaseParser.QueryPrimaryContext {
/* 1466 */     public SqlBaseParser.QueryNoWithContext queryNoWith() { return (SqlBaseParser.QueryNoWithContext)getRuleContext(SqlBaseParser.QueryNoWithContext.class, 0); }
/*      */     
/* 1468 */     public SubqueryContext(SqlBaseParser.QueryPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1471 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSubquery(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1475 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSubquery(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1479 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSubquery(this);
/* 1480 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QueryPrimaryContext queryPrimary() throws org.antlr.v4.runtime.RecognitionException {
/* 1485 */     QueryPrimaryContext _localctx = new QueryPrimaryContext(this._ctx, getState());
/* 1486 */     enterRule(_localctx, 14, 7);
/*      */     try
/*      */     {
/* 1489 */       setState(293);
/* 1490 */       int _alt; switch (this._input.LA(1)) {
/*      */       case 7: 
/* 1492 */         _localctx = new QueryPrimaryDefaultContext(_localctx);
/* 1493 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 1495 */         setState(277);querySpecification();
/*      */         
/* 1497 */         break;
/*      */       case 87: 
/* 1499 */         _localctx = new TableContext(_localctx);
/* 1500 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 1502 */         setState(278);match(87);
/* 1503 */         setState(279);qualifiedName();
/*      */         
/* 1505 */         break;
/*      */       case 85: 
/* 1507 */         _localctx = new InlineTableContext(_localctx);
/* 1508 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 1510 */         setState(280);match(85);
/* 1511 */         setState(281);expression();
/* 1512 */         setState(286);
/* 1513 */         this._errHandler.sync(this);
/* 1514 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 22, this._ctx);
/* 1515 */       case 6: default:  while ((_alt != 2) && (_alt != 0)) {
/* 1516 */           if (_alt == 1)
/*      */           {
/*      */ 
/* 1519 */             setState(282);match(4);
/* 1520 */             setState(283);expression();
/*      */           }
/*      */           
/*      */ 
/* 1524 */           setState(288);
/* 1525 */           this._errHandler.sync(this);
/* 1526 */           _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 22, this._ctx); continue;
/*      */           
/*      */ 
/*      */ 
/*      */ 
/* 1531 */           _localctx = new SubqueryContext(_localctx);
/* 1532 */           enterOuterAlt(_localctx, 4);
/*      */           
/* 1534 */           setState(289);match(6);
/* 1535 */           setState(290);queryNoWith();
/* 1536 */           setState(291);match(3);
/*      */           
/* 1538 */           break;
/*      */           
/* 1540 */           throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */         }
/*      */       }
/*      */     } catch (org.antlr.v4.runtime.RecognitionException re) {
/* 1544 */       _localctx.exception = re;
/* 1545 */       this._errHandler.reportError(this, re);
/* 1546 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1549 */       exitRule();
/*      */     }
/* 1551 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SortItemContext extends org.antlr.v4.runtime.ParserRuleContext { public org.antlr.v4.runtime.Token ordering;
/*      */     public org.antlr.v4.runtime.Token nullOrdering;
/*      */     
/* 1557 */     public org.antlr.v4.runtime.tree.TerminalNode FIRST() { return getToken(35, 0); }
/* 1558 */     public org.antlr.v4.runtime.tree.TerminalNode DESC() { return getToken(39, 0); }
/* 1559 */     public org.antlr.v4.runtime.tree.TerminalNode ASC() { return getToken(38, 0); }
/*      */     
/* 1561 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/* 1563 */     public org.antlr.v4.runtime.tree.TerminalNode NULLS() { return getToken(34, 0); }
/* 1564 */     public org.antlr.v4.runtime.tree.TerminalNode LAST() { return getToken(36, 0); }
/*      */     
/* 1566 */     public SortItemContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1568 */     public int getRuleIndex() { return 8; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1571 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSortItem(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1575 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSortItem(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1579 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSortItem(this);
/* 1580 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SortItemContext sortItem() throws org.antlr.v4.runtime.RecognitionException {
/* 1585 */     SortItemContext _localctx = new SortItemContext(this._ctx, getState());
/* 1586 */     enterRule(_localctx, 16, 8);
/*      */     try
/*      */     {
/* 1589 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1591 */       setState(295);expression();
/* 1592 */       setState(297);
/* 1593 */       int _la = this._input.LA(1);
/* 1594 */       if ((_la == 38) || (_la == 39))
/*      */       {
/* 1596 */         setState(296);
/* 1597 */         _localctx.ordering = this._input.LT(1);
/* 1598 */         _la = this._input.LA(1);
/* 1599 */         if ((_la != 38) && (_la != 39)) {
/* 1600 */           _localctx.ordering = this._errHandler.recoverInline(this);
/*      */         }
/* 1602 */         consume();
/*      */       }
/*      */       
/*      */ 
/* 1606 */       setState(301);
/* 1607 */       _la = this._input.LA(1);
/* 1608 */       if (_la == 34)
/*      */       {
/* 1610 */         setState(299);match(34);
/* 1611 */         setState(300);
/* 1612 */         _localctx.nullOrdering = this._input.LT(1);
/* 1613 */         _la = this._input.LA(1);
/* 1614 */         if ((_la != 35) && (_la != 36)) {
/* 1615 */           _localctx.nullOrdering = this._errHandler.recoverInline(this);
/*      */         }
/* 1617 */         consume();
/*      */       }
/*      */       
/*      */ 
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1624 */       _localctx.exception = re;
/* 1625 */       this._errHandler.reportError(this, re);
/* 1626 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1629 */       exitRule();
/*      */     }
/* 1631 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QuerySpecificationContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.BooleanExpressionContext where;
/*      */     public SqlBaseParser.ExpressionContext expression;
/* 1637 */     public java.util.List<SqlBaseParser.ExpressionContext> groupBy = new java.util.ArrayList();
/*      */     public SqlBaseParser.BooleanExpressionContext having;
/*      */     
/* 1640 */     public SqlBaseParser.BooleanExpressionContext booleanExpression(int i) { return (SqlBaseParser.BooleanExpressionContext)getRuleContext(SqlBaseParser.BooleanExpressionContext.class, i); }
/*      */     
/*      */     public SqlBaseParser.SelectItemContext selectItem(int i) {
/* 1643 */       return (SqlBaseParser.SelectItemContext)getRuleContext(SqlBaseParser.SelectItemContext.class, i);
/*      */     }
/*      */     
/* 1646 */     public java.util.List<SqlBaseParser.BooleanExpressionContext> booleanExpression() { return getRuleContexts(SqlBaseParser.BooleanExpressionContext.class); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.ExpressionContext> expression() {
/* 1649 */       return getRuleContexts(SqlBaseParser.ExpressionContext.class);
/*      */     }
/*      */     
/* 1652 */     public SqlBaseParser.SetQuantifierContext setQuantifier() { return (SqlBaseParser.SetQuantifierContext)getRuleContext(SqlBaseParser.SetQuantifierContext.class, 0); }
/*      */     
/* 1654 */     public org.antlr.v4.runtime.tree.TerminalNode SELECT() { return getToken(7, 0); }
/* 1655 */     public org.antlr.v4.runtime.tree.TerminalNode WHERE() { return getToken(14, 0); }
/*      */     
/* 1657 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.SelectItemContext> selectItem() {
/* 1660 */       return getRuleContexts(SqlBaseParser.SelectItemContext.class);
/*      */     }
/*      */     
/* 1663 */     public java.util.List<SqlBaseParser.RelationContext> relation() { return getRuleContexts(SqlBaseParser.RelationContext.class); }
/*      */     
/*      */ 
/* 1666 */     public SqlBaseParser.RelationContext relation(int i) { return (SqlBaseParser.RelationContext)getRuleContext(SqlBaseParser.RelationContext.class, i); }
/*      */     
/* 1668 */     public org.antlr.v4.runtime.tree.TerminalNode HAVING() { return getToken(18, 0); }
/* 1669 */     public org.antlr.v4.runtime.tree.TerminalNode BY() { return getToken(16, 0); }
/* 1670 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/* 1671 */     public org.antlr.v4.runtime.tree.TerminalNode GROUP() { return getToken(15, 0); }
/*      */     
/* 1673 */     public QuerySpecificationContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1675 */     public int getRuleIndex() { return 9; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1678 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQuerySpecification(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1682 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQuerySpecification(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1686 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQuerySpecification(this);
/* 1687 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QuerySpecificationContext querySpecification() throws org.antlr.v4.runtime.RecognitionException {
/* 1692 */     QuerySpecificationContext _localctx = new QuerySpecificationContext(this._ctx, getState());
/* 1693 */     enterRule(_localctx, 18, 9);
/*      */     
/*      */     try
/*      */     {
/* 1697 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1699 */       setState(303);match(7);
/* 1700 */       setState(305);
/* 1701 */       int _la = this._input.LA(1);
/* 1702 */       if ((_la == 10) || (_la == 13))
/*      */       {
/* 1704 */         setState(304);setQuantifier();
/*      */       }
/*      */       
/*      */ 
/* 1708 */       setState(307);selectItem();
/* 1709 */       setState(312);
/* 1710 */       this._errHandler.sync(this);
/* 1711 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 27, this._ctx);
/* 1712 */       while ((_alt != 2) && (_alt != 0)) {
/* 1713 */         if (_alt == 1)
/*      */         {
/*      */ 
/* 1716 */           setState(308);match(4);
/* 1717 */           setState(309);selectItem();
/*      */         }
/*      */         
/*      */ 
/* 1721 */         setState(314);
/* 1722 */         this._errHandler.sync(this);
/* 1723 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 27, this._ctx);
/*      */       }
/* 1725 */       setState(324);
/* 1726 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 29, this._ctx))
/*      */       {
/*      */       case 1: 
/* 1729 */         setState(315);match(8);
/* 1730 */         setState(316);relation(0);
/* 1731 */         setState(321);
/* 1732 */         this._errHandler.sync(this);
/* 1733 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 28, this._ctx);
/* 1734 */         while ((_alt != 2) && (_alt != 0)) {
/* 1735 */           if (_alt == 1)
/*      */           {
/*      */ 
/* 1738 */             setState(317);match(4);
/* 1739 */             setState(318);relation(0);
/*      */           }
/*      */           
/*      */ 
/* 1743 */           setState(323);
/* 1744 */           this._errHandler.sync(this);
/* 1745 */           _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 28, this._ctx);
/*      */         }
/*      */       }
/*      */       
/*      */       
/* 1750 */       setState(328);
/* 1751 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 30, this._ctx))
/*      */       {
/*      */       case 1: 
/* 1754 */         setState(326);match(14);
/* 1755 */         setState(327);_localctx.where = booleanExpression(0);
/*      */       }
/*      */       
/*      */       
/* 1759 */       setState(340);
/* 1760 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 32, this._ctx))
/*      */       {
/*      */       case 1: 
/* 1763 */         setState(330);match(15);
/* 1764 */         setState(331);match(16);
/* 1765 */         setState(332);_localctx.expression = expression();
/* 1766 */         _localctx.groupBy.add(_localctx.expression);
/* 1767 */         setState(337);
/* 1768 */         this._errHandler.sync(this);
/* 1769 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 31, this._ctx);
/* 1770 */         while ((_alt != 2) && (_alt != 0)) {
/* 1771 */           if (_alt == 1)
/*      */           {
/*      */ 
/* 1774 */             setState(333);match(4);
/* 1775 */             setState(334);_localctx.expression = expression();
/* 1776 */             _localctx.groupBy.add(_localctx.expression);
/*      */           }
/*      */           
/*      */ 
/* 1780 */           setState(339);
/* 1781 */           this._errHandler.sync(this);
/* 1782 */           _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 31, this._ctx);
/*      */         }
/*      */       }
/*      */       
/*      */       
/* 1787 */       setState(344);
/* 1788 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 33, this._ctx))
/*      */       {
/*      */       case 1: 
/* 1791 */         setState(342);match(18);
/* 1792 */         setState(343);_localctx.having = booleanExpression(0);
/*      */       
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1799 */       _localctx.exception = re;
/* 1800 */       this._errHandler.reportError(this, re);
/* 1801 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1804 */       exitRule();
/*      */     }
/* 1806 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class NamedQueryContext extends org.antlr.v4.runtime.ParserRuleContext { public SqlBaseParser.IdentifierContext name;
/*      */     
/* 1811 */     public org.antlr.v4.runtime.tree.TerminalNode AS() { return getToken(9, 0); }
/*      */     
/* 1813 */     public SqlBaseParser.ColumnAliasesContext columnAliases() { return (SqlBaseParser.ColumnAliasesContext)getRuleContext(SqlBaseParser.ColumnAliasesContext.class, 0); }
/*      */     
/*      */     public SqlBaseParser.QueryContext query() {
/* 1816 */       return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0);
/*      */     }
/*      */     
/* 1819 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/*      */ 
/* 1822 */     public NamedQueryContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1824 */     public int getRuleIndex() { return 10; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1827 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterNamedQuery(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1831 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitNamedQuery(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1835 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitNamedQuery(this);
/* 1836 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final NamedQueryContext namedQuery() throws org.antlr.v4.runtime.RecognitionException {
/* 1841 */     NamedQueryContext _localctx = new NamedQueryContext(this._ctx, getState());
/* 1842 */     enterRule(_localctx, 20, 10);
/*      */     try
/*      */     {
/* 1845 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1847 */       setState(346);_localctx.name = identifier();
/* 1848 */       setState(348);
/* 1849 */       int _la = this._input.LA(1);
/* 1850 */       if (_la == 6)
/*      */       {
/* 1852 */         setState(347);columnAliases();
/*      */       }
/*      */       
/*      */ 
/* 1856 */       setState(350);match(9);
/* 1857 */       setState(351);match(6);
/* 1858 */       setState(352);query();
/* 1859 */       setState(353);match(3);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1863 */       _localctx.exception = re;
/* 1864 */       this._errHandler.reportError(this, re);
/* 1865 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1868 */       exitRule();
/*      */     }
/* 1870 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SetQuantifierContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 1874 */     public org.antlr.v4.runtime.tree.TerminalNode ALL() { return getToken(10, 0); }
/* 1875 */     public org.antlr.v4.runtime.tree.TerminalNode DISTINCT() { return getToken(13, 0); }
/*      */     
/* 1877 */     public SetQuantifierContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1879 */     public int getRuleIndex() { return 11; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1882 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSetQuantifier(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1886 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSetQuantifier(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1890 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSetQuantifier(this);
/* 1891 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SetQuantifierContext setQuantifier() throws org.antlr.v4.runtime.RecognitionException {
/* 1896 */     SetQuantifierContext _localctx = new SetQuantifierContext(this._ctx, getState());
/* 1897 */     enterRule(_localctx, 22, 11);
/*      */     try
/*      */     {
/* 1900 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 1902 */       setState(355);
/* 1903 */       int _la = this._input.LA(1);
/* 1904 */       if ((_la != 10) && (_la != 13)) {
/* 1905 */         this._errHandler.recoverInline(this);
/*      */       }
/* 1907 */       consume();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 1911 */       _localctx.exception = re;
/* 1912 */       this._errHandler.reportError(this, re);
/* 1913 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 1916 */       exitRule();
/*      */     }
/* 1918 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SelectItemContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 1923 */     public SelectItemContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 1925 */     public int getRuleIndex() { return 12; }
/*      */     
/*      */     public SelectItemContext() {}
/*      */     
/* 1929 */     public void copyFrom(SelectItemContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class SelectSingleContext extends SqlBaseParser.SelectItemContext {
/* 1933 */     public org.antlr.v4.runtime.tree.TerminalNode AS() { return getToken(9, 0); }
/*      */     
/* 1935 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/*      */ 
/* 1938 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/* 1940 */     public SelectSingleContext(SqlBaseParser.SelectItemContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1943 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSelectSingle(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1947 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSelectSingle(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1951 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSelectSingle(this);
/* 1952 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 1956 */   public static class SelectAllContext extends SqlBaseParser.SelectItemContext { public org.antlr.v4.runtime.tree.TerminalNode ASTERISK() { return getToken(141, 0); }
/*      */     
/* 1958 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/* 1960 */     public SelectAllContext(SqlBaseParser.SelectItemContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 1963 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSelectAll(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 1967 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSelectAll(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 1971 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSelectAll(this);
/* 1972 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SelectItemContext selectItem() throws org.antlr.v4.runtime.RecognitionException {
/* 1977 */     SelectItemContext _localctx = new SelectItemContext(this._ctx, getState());
/* 1978 */     enterRule(_localctx, 24, 12);
/*      */     try
/*      */     {
/* 1981 */       setState(369);
/* 1982 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 37, this._ctx)) {
/*      */       case 1: 
/* 1984 */         _localctx = new SelectSingleContext(_localctx);
/* 1985 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 1987 */         setState(357);expression();
/* 1988 */         setState(362);
/* 1989 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 36, this._ctx))
/*      */         {
/*      */         case 1: 
/* 1992 */           setState(359);
/* 1993 */           int _la = this._input.LA(1);
/* 1994 */           if (_la == 9)
/*      */           {
/* 1996 */             setState(358);match(9);
/*      */           }
/*      */           
/*      */ 
/* 2000 */           setState(361);identifier();
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 2005 */         break;
/*      */       
/*      */       case 2: 
/* 2008 */         _localctx = new SelectAllContext(_localctx);
/* 2009 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 2011 */         setState(364);qualifiedName();
/* 2012 */         setState(365);match(2);
/* 2013 */         setState(366);match(141);
/*      */         
/* 2015 */         break;
/*      */       
/*      */       case 3: 
/* 2018 */         _localctx = new SelectAllContext(_localctx);
/* 2019 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 2021 */         setState(368);match(141);
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2027 */       _localctx.exception = re;
/* 2028 */       this._errHandler.reportError(this, re);
/* 2029 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2032 */       exitRule();
/*      */     }
/* 2034 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class RelationContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 2039 */     public RelationContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2041 */     public int getRuleIndex() { return 13; }
/*      */     
/*      */     public RelationContext() {}
/*      */     
/* 2045 */     public void copyFrom(RelationContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class JoinRelationContext extends SqlBaseParser.RelationContext { public SqlBaseParser.RelationContext left;
/*      */     public SqlBaseParser.RelationContext right;
/*      */     
/* 2051 */     public org.antlr.v4.runtime.tree.TerminalNode JOIN() { return getToken(64, 0); }
/* 2052 */     public org.antlr.v4.runtime.tree.TerminalNode NATURAL() { return getToken(71, 0); }
/*      */     
/* 2054 */     public java.util.List<SqlBaseParser.RelationContext> relation() { return getRuleContexts(SqlBaseParser.RelationContext.class); }
/*      */     
/* 2056 */     public org.antlr.v4.runtime.tree.TerminalNode CROSS() { return getToken(65, 0); }
/*      */     
/* 2058 */     public SqlBaseParser.RelationContext relation(int i) { return (SqlBaseParser.RelationContext)getRuleContext(SqlBaseParser.RelationContext.class, i); }
/*      */     
/*      */     public SqlBaseParser.JoinTypeContext joinType() {
/* 2061 */       return (SqlBaseParser.JoinTypeContext)getRuleContext(SqlBaseParser.JoinTypeContext.class, 0);
/*      */     }
/*      */     
/* 2064 */     public SqlBaseParser.JoinCriteriaContext joinCriteria() { return (SqlBaseParser.JoinCriteriaContext)getRuleContext(SqlBaseParser.JoinCriteriaContext.class, 0); }
/*      */     
/* 2066 */     public JoinRelationContext(SqlBaseParser.RelationContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2069 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterJoinRelation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2073 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitJoinRelation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2077 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitJoinRelation(this);
/* 2078 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class RelationDefaultContext extends SqlBaseParser.RelationContext {
/* 2083 */     public SqlBaseParser.SampledRelationContext sampledRelation() { return (SqlBaseParser.SampledRelationContext)getRuleContext(SqlBaseParser.SampledRelationContext.class, 0); }
/*      */     
/* 2085 */     public RelationDefaultContext(SqlBaseParser.RelationContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2088 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterRelationDefault(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2092 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitRelationDefault(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2096 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitRelationDefault(this);
/* 2097 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final RelationContext relation() throws org.antlr.v4.runtime.RecognitionException {
/* 2102 */     return relation(0);
/*      */   }
/*      */   
/*      */   private RelationContext relation(int _p) throws org.antlr.v4.runtime.RecognitionException {
/* 2106 */     org.antlr.v4.runtime.ParserRuleContext _parentctx = this._ctx;
/* 2107 */     int _parentState = getState();
/* 2108 */     RelationContext _localctx = new RelationContext(this._ctx, _parentState);
/* 2109 */     RelationContext _prevctx = _localctx;
/* 2110 */     int _startState = 26;
/* 2111 */     enterRecursionRule(_localctx, 26, 13, _p);
/*      */     try
/*      */     {
/* 2114 */       enterOuterAlt(_localctx, 1);
/*      */       
/*      */ 
/* 2117 */       _localctx = new RelationDefaultContext(_localctx);
/* 2118 */       this._ctx = _localctx;
/* 2119 */       _prevctx = _localctx;
/*      */       
/* 2121 */       setState(372);sampledRelation();
/*      */       
/* 2123 */       this._ctx.stop = this._input.LT(-1);
/* 2124 */       setState(392);
/* 2125 */       this._errHandler.sync(this);
/* 2126 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 39, this._ctx);
/* 2127 */       while ((_alt != 2) && (_alt != 0)) {
/* 2128 */         if (_alt == 1) {
/* 2129 */           if (this._parseListeners != null) triggerExitRuleEvent();
/* 2130 */           _prevctx = _localctx;
/*      */           
/*      */ 
/* 2133 */           _localctx = new JoinRelationContext(new RelationContext(_parentctx, _parentState));
/* 2134 */           ((JoinRelationContext)_localctx).left = _prevctx;
/* 2135 */           pushNewRecursionContext(_localctx, _startState, 13);
/* 2136 */           setState(374);
/* 2137 */           if (!precpred(this._ctx, 2)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 2)");
/* 2138 */           setState(388);
/* 2139 */           switch (this._input.LA(1))
/*      */           {
/*      */           case 65: 
/* 2142 */             setState(375);match(65);
/* 2143 */             setState(376);match(64);
/* 2144 */             setState(377);((JoinRelationContext)_localctx).right = relation(0);
/*      */             
/* 2146 */             break;
/*      */           
/*      */           case 64: 
/*      */           case 67: 
/*      */           case 68: 
/*      */           case 69: 
/*      */           case 70: 
/* 2153 */             setState(378);joinType();
/* 2154 */             setState(379);match(64);
/* 2155 */             setState(380);((JoinRelationContext)_localctx).right = relation(0);
/* 2156 */             setState(381);joinCriteria();
/*      */             
/* 2158 */             break;
/*      */           
/*      */           case 71: 
/* 2161 */             setState(383);match(71);
/* 2162 */             setState(384);joinType();
/* 2163 */             setState(385);match(64);
/* 2164 */             setState(386);((JoinRelationContext)_localctx).right = relation(0);
/*      */             
/* 2166 */             break;
/*      */           case 66: default: 
/* 2168 */             throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */           }
/*      */           
/*      */         }
/*      */         
/* 2173 */         setState(394);
/* 2174 */         this._errHandler.sync(this);
/* 2175 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 39, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2180 */       _localctx.exception = re;
/* 2181 */       this._errHandler.reportError(this, re);
/* 2182 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2185 */       unrollRecursionContexts(_parentctx);
/*      */     }
/* 2187 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class JoinTypeContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 2191 */     public org.antlr.v4.runtime.tree.TerminalNode OUTER() { return getToken(66, 0); }
/* 2192 */     public org.antlr.v4.runtime.tree.TerminalNode FULL() { return getToken(70, 0); }
/* 2193 */     public org.antlr.v4.runtime.tree.TerminalNode INNER() { return getToken(67, 0); }
/* 2194 */     public org.antlr.v4.runtime.tree.TerminalNode LEFT() { return getToken(68, 0); }
/* 2195 */     public org.antlr.v4.runtime.tree.TerminalNode RIGHT() { return getToken(69, 0); }
/*      */     
/* 2197 */     public JoinTypeContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2199 */     public int getRuleIndex() { return 14; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2202 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterJoinType(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2206 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitJoinType(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2210 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitJoinType(this);
/* 2211 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final JoinTypeContext joinType() throws org.antlr.v4.runtime.RecognitionException {
/* 2216 */     JoinTypeContext _localctx = new JoinTypeContext(this._ctx, getState());
/* 2217 */     enterRule(_localctx, 28, 14);
/*      */     try
/*      */     {
/* 2220 */       setState(410);
/* 2221 */       int _la; switch (this._input.LA(1)) {
/*      */       case 64: 
/*      */       case 67: 
/* 2224 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 2226 */         setState(396);
/* 2227 */         _la = this._input.LA(1);
/* 2228 */         if (_la == 67)
/*      */         {
/* 2230 */           setState(395);match(67);
/*      */         }
/*      */         
/*      */ 
/*      */ 
/*      */         break;
/*      */       case 68: 
/* 2237 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 2239 */         setState(398);match(68);
/* 2240 */         setState(400);
/* 2241 */         _la = this._input.LA(1);
/* 2242 */         if (_la == 66)
/*      */         {
/* 2244 */           setState(399);match(66);
/*      */         }
/*      */         
/*      */ 
/*      */ 
/*      */         break;
/*      */       case 69: 
/* 2251 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 2253 */         setState(402);match(69);
/* 2254 */         setState(404);
/* 2255 */         _la = this._input.LA(1);
/* 2256 */         if (_la == 66)
/*      */         {
/* 2258 */           setState(403);match(66);
/*      */         }
/*      */         
/*      */ 
/*      */ 
/*      */         break;
/*      */       case 70: 
/* 2265 */         enterOuterAlt(_localctx, 4);
/*      */         
/* 2267 */         setState(406);match(70);
/* 2268 */         setState(408);
/* 2269 */         _la = this._input.LA(1);
/* 2270 */         if (_la == 66)
/*      */         {
/* 2272 */           setState(407);match(66);
/*      */         }
/*      */         
/*      */         break;
/*      */       case 65: 
/*      */       case 66: 
/*      */       default: 
/* 2279 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re) {
/* 2283 */       _localctx.exception = re;
/* 2284 */       this._errHandler.reportError(this, re);
/* 2285 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2288 */       exitRule();
/*      */     }
/* 2290 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class JoinCriteriaContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 2294 */     public org.antlr.v4.runtime.tree.TerminalNode ON() { return getToken(73, 0); }
/*      */     
/* 2296 */     public SqlBaseParser.BooleanExpressionContext booleanExpression() { return (SqlBaseParser.BooleanExpressionContext)getRuleContext(SqlBaseParser.BooleanExpressionContext.class, 0); }
/*      */     
/* 2298 */     public org.antlr.v4.runtime.tree.TerminalNode USING() { return getToken(72, 0); }
/*      */     
/* 2300 */     public SqlBaseParser.IdentifierContext identifier(int i) { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, i); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.IdentifierContext> identifier() {
/* 2303 */       return getRuleContexts(SqlBaseParser.IdentifierContext.class);
/*      */     }
/*      */     
/* 2306 */     public JoinCriteriaContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2308 */     public int getRuleIndex() { return 15; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2311 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterJoinCriteria(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2315 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitJoinCriteria(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2319 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitJoinCriteria(this);
/* 2320 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final JoinCriteriaContext joinCriteria() throws org.antlr.v4.runtime.RecognitionException {
/* 2325 */     JoinCriteriaContext _localctx = new JoinCriteriaContext(this._ctx, getState());
/* 2326 */     enterRule(_localctx, 30, 15);
/*      */     try
/*      */     {
/* 2329 */       setState(426);
/* 2330 */       switch (this._input.LA(1)) {
/*      */       case 73: 
/* 2332 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 2334 */         setState(412);match(73);
/* 2335 */         setState(413);booleanExpression(0);
/*      */         
/* 2337 */         break;
/*      */       case 72: 
/* 2339 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 2341 */         setState(414);match(72);
/* 2342 */         setState(415);match(6);
/* 2343 */         setState(416);identifier();
/* 2344 */         setState(421);
/* 2345 */         this._errHandler.sync(this);
/* 2346 */         int _la = this._input.LA(1);
/* 2347 */         while (_la == 4)
/*      */         {
/*      */ 
/* 2350 */           setState(417);match(4);
/* 2351 */           setState(418);identifier();
/*      */           
/*      */ 
/* 2354 */           setState(423);
/* 2355 */           this._errHandler.sync(this);
/* 2356 */           _la = this._input.LA(1);
/*      */         }
/* 2358 */         setState(424);match(3);
/*      */         
/* 2360 */         break;
/*      */       default: 
/* 2362 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re) {
/* 2366 */       _localctx.exception = re;
/* 2367 */       this._errHandler.reportError(this, re);
/* 2368 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2371 */       exitRule();
/*      */     }
/* 2373 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SampledRelationContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.ExpressionContext percentage;
/*      */     public SqlBaseParser.ExpressionContext expression;
/* 2379 */     public java.util.List<SqlBaseParser.ExpressionContext> stratify = new java.util.ArrayList();
/*      */     
/* 2381 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/* 2383 */     public org.antlr.v4.runtime.tree.TerminalNode ON() { return getToken(73, 0); }
/* 2384 */     public org.antlr.v4.runtime.tree.TerminalNode STRATIFY() { return getToken(122, 0); }
/* 2385 */     public org.antlr.v4.runtime.tree.TerminalNode TABLESAMPLE() { return getToken(120, 0); }
/*      */     
/* 2387 */     public SqlBaseParser.AliasedRelationContext aliasedRelation() { return (SqlBaseParser.AliasedRelationContext)getRuleContext(SqlBaseParser.AliasedRelationContext.class, 0); }
/*      */     
/* 2389 */     public org.antlr.v4.runtime.tree.TerminalNode RESCALED() { return getToken(121, 0); }
/*      */     
/* 2391 */     public SqlBaseParser.SampleTypeContext sampleType() { return (SqlBaseParser.SampleTypeContext)getRuleContext(SqlBaseParser.SampleTypeContext.class, 0); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.ExpressionContext> expression() {
/* 2394 */       return getRuleContexts(SqlBaseParser.ExpressionContext.class);
/*      */     }
/*      */     
/* 2397 */     public SampledRelationContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2399 */     public int getRuleIndex() { return 16; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2402 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSampledRelation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2406 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSampledRelation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2410 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSampledRelation(this);
/* 2411 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SampledRelationContext sampledRelation() throws org.antlr.v4.runtime.RecognitionException {
/* 2416 */     SampledRelationContext _localctx = new SampledRelationContext(this._ctx, getState());
/* 2417 */     enterRule(_localctx, 32, 16);
/*      */     try
/*      */     {
/* 2420 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 2422 */       setState(428);aliasedRelation();
/* 2423 */       setState(452);
/* 2424 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 50, this._ctx))
/*      */       {
/*      */       case 1: 
/* 2427 */         setState(429);match(120);
/* 2428 */         setState(430);sampleType();
/* 2429 */         setState(431);match(6);
/* 2430 */         setState(432);_localctx.percentage = expression();
/* 2431 */         setState(433);match(3);
/* 2432 */         setState(435);
/* 2433 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 47, this._ctx))
/*      */         {
/*      */         case 1: 
/* 2436 */           setState(434);match(121);
/*      */         }
/*      */         
/*      */         
/* 2440 */         setState(450);
/* 2441 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 49, this._ctx))
/*      */         {
/*      */         case 1: 
/* 2444 */           setState(437);match(122);
/* 2445 */           setState(438);match(73);
/* 2446 */           setState(439);match(6);
/* 2447 */           setState(440);_localctx.expression = expression();
/* 2448 */           _localctx.stratify.add(_localctx.expression);
/* 2449 */           setState(445);
/* 2450 */           this._errHandler.sync(this);
/* 2451 */           int _la = this._input.LA(1);
/* 2452 */           while (_la == 4)
/*      */           {
/*      */ 
/* 2455 */             setState(441);match(4);
/* 2456 */             setState(442);_localctx.expression = expression();
/* 2457 */             _localctx.stratify.add(_localctx.expression);
/*      */             
/*      */ 
/* 2460 */             setState(447);
/* 2461 */             this._errHandler.sync(this);
/* 2462 */             _la = this._input.LA(1);
/*      */           }
/* 2464 */           setState(448);match(3);
/*      */         }
/*      */         
/*      */         
/*      */         break;
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2474 */       _localctx.exception = re;
/* 2475 */       this._errHandler.reportError(this, re);
/* 2476 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2479 */       exitRule();
/*      */     }
/* 2481 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SampleTypeContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 2485 */     public org.antlr.v4.runtime.tree.TerminalNode SYSTEM() { return getToken(117, 0); }
/* 2486 */     public org.antlr.v4.runtime.tree.TerminalNode BERNOULLI() { return getToken(118, 0); }
/* 2487 */     public org.antlr.v4.runtime.tree.TerminalNode POISSONIZED() { return getToken(119, 0); }
/*      */     
/* 2489 */     public SampleTypeContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2491 */     public int getRuleIndex() { return 17; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2494 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSampleType(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2498 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSampleType(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2502 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSampleType(this);
/* 2503 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SampleTypeContext sampleType() throws org.antlr.v4.runtime.RecognitionException {
/* 2508 */     SampleTypeContext _localctx = new SampleTypeContext(this._ctx, getState());
/* 2509 */     enterRule(_localctx, 34, 17);
/*      */     try
/*      */     {
/* 2512 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 2514 */       setState(454);
/* 2515 */       int _la = this._input.LA(1);
/* 2516 */       if (((_la - 117 & 0xFFFFFFC0) != 0) || ((1L << _la - 117 & 0x7) == 0L)) {
/* 2517 */         this._errHandler.recoverInline(this);
/*      */       }
/* 2519 */       consume();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2523 */       _localctx.exception = re;
/* 2524 */       this._errHandler.reportError(this, re);
/* 2525 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2528 */       exitRule();
/*      */     }
/* 2530 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class AliasedRelationContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 2534 */     public org.antlr.v4.runtime.tree.TerminalNode AS() { return getToken(9, 0); }
/*      */     
/* 2536 */     public SqlBaseParser.RelationPrimaryContext relationPrimary() { return (SqlBaseParser.RelationPrimaryContext)getRuleContext(SqlBaseParser.RelationPrimaryContext.class, 0); }
/*      */     
/*      */     public SqlBaseParser.ColumnAliasesContext columnAliases() {
/* 2539 */       return (SqlBaseParser.ColumnAliasesContext)getRuleContext(SqlBaseParser.ColumnAliasesContext.class, 0);
/*      */     }
/*      */     
/* 2542 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/*      */ 
/* 2545 */     public AliasedRelationContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2547 */     public int getRuleIndex() { return 18; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2550 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterAliasedRelation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2554 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitAliasedRelation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2558 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitAliasedRelation(this);
/* 2559 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final AliasedRelationContext aliasedRelation() throws org.antlr.v4.runtime.RecognitionException {
/* 2564 */     AliasedRelationContext _localctx = new AliasedRelationContext(this._ctx, getState());
/* 2565 */     enterRule(_localctx, 36, 18);
/*      */     try
/*      */     {
/* 2568 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 2570 */       setState(456);relationPrimary();
/* 2571 */       setState(464);
/* 2572 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 53, this._ctx))
/*      */       {
/*      */       case 1: 
/* 2575 */         setState(458);
/* 2576 */         int _la = this._input.LA(1);
/* 2577 */         if (_la == 9)
/*      */         {
/* 2579 */           setState(457);match(9);
/*      */         }
/*      */         
/*      */ 
/* 2583 */         setState(460);identifier();
/* 2584 */         setState(462);
/* 2585 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 52, this._ctx))
/*      */         {
/*      */         case 1: 
/* 2588 */           setState(461);columnAliases();
/*      */         }
/*      */         
/*      */         
/*      */         break;
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2598 */       _localctx.exception = re;
/* 2599 */       this._errHandler.reportError(this, re);
/* 2600 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2603 */       exitRule();
/*      */     }
/* 2605 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class ColumnAliasesContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.IdentifierContext identifier(int i) {
/* 2610 */       return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, i);
/*      */     }
/*      */     
/* 2613 */     public java.util.List<SqlBaseParser.IdentifierContext> identifier() { return getRuleContexts(SqlBaseParser.IdentifierContext.class); }
/*      */     
/*      */ 
/* 2616 */     public ColumnAliasesContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2618 */     public int getRuleIndex() { return 19; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2621 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterColumnAliases(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2625 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitColumnAliases(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2629 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitColumnAliases(this);
/* 2630 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final ColumnAliasesContext columnAliases() throws org.antlr.v4.runtime.RecognitionException {
/* 2635 */     ColumnAliasesContext _localctx = new ColumnAliasesContext(this._ctx, getState());
/* 2636 */     enterRule(_localctx, 38, 19);
/*      */     try
/*      */     {
/* 2639 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 2641 */       setState(466);match(6);
/* 2642 */       setState(467);identifier();
/* 2643 */       setState(472);
/* 2644 */       this._errHandler.sync(this);
/* 2645 */       int _la = this._input.LA(1);
/* 2646 */       while (_la == 4)
/*      */       {
/*      */ 
/* 2649 */         setState(468);match(4);
/* 2650 */         setState(469);identifier();
/*      */         
/*      */ 
/* 2653 */         setState(474);
/* 2654 */         this._errHandler.sync(this);
/* 2655 */         _la = this._input.LA(1);
/*      */       }
/* 2657 */       setState(475);match(3);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2661 */       _localctx.exception = re;
/* 2662 */       this._errHandler.reportError(this, re);
/* 2663 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2666 */       exitRule();
/*      */     }
/* 2668 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class RelationPrimaryContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 2673 */     public RelationPrimaryContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2675 */     public int getRuleIndex() { return 20; }
/*      */     
/*      */     public RelationPrimaryContext() {}
/*      */     
/* 2679 */     public void copyFrom(RelationPrimaryContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class SubqueryRelationContext
/*      */     extends SqlBaseParser.RelationPrimaryContext {
/* 2684 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/* 2686 */     public SubqueryRelationContext(SqlBaseParser.RelationPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2689 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSubqueryRelation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2693 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSubqueryRelation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2697 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSubqueryRelation(this);
/* 2698 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class TableNameContext extends SqlBaseParser.RelationPrimaryContext {
/* 2703 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/* 2705 */     public TableNameContext(SqlBaseParser.RelationPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2708 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterTableName(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2712 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitTableName(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2716 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitTableName(this);
/* 2717 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class ParenthesizedRelationContext extends SqlBaseParser.RelationPrimaryContext {
/* 2722 */     public SqlBaseParser.RelationContext relation() { return (SqlBaseParser.RelationContext)getRuleContext(SqlBaseParser.RelationContext.class, 0); }
/*      */     
/* 2724 */     public ParenthesizedRelationContext(SqlBaseParser.RelationPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2727 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterParenthesizedRelation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2731 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitParenthesizedRelation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2735 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitParenthesizedRelation(this);
/* 2736 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class UnnestContext extends SqlBaseParser.RelationPrimaryContext {
/* 2741 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/* 2743 */     public org.antlr.v4.runtime.tree.TerminalNode UNNEST() { return getToken(125, 0); }
/*      */     
/* 2745 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 2747 */     public UnnestContext(SqlBaseParser.RelationPrimaryContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2750 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterUnnest(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2754 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitUnnest(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2758 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitUnnest(this);
/* 2759 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final RelationPrimaryContext relationPrimary() throws org.antlr.v4.runtime.RecognitionException {
/* 2764 */     RelationPrimaryContext _localctx = new RelationPrimaryContext(this._ctx, getState());
/* 2765 */     enterRule(_localctx, 40, 20);
/*      */     try
/*      */     {
/* 2768 */       setState(498);
/* 2769 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 56, this._ctx)) {
/*      */       case 1: 
/* 2771 */         _localctx = new TableNameContext(_localctx);
/* 2772 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 2774 */         setState(477);qualifiedName();
/*      */         
/* 2776 */         break;
/*      */       
/*      */       case 2: 
/* 2779 */         _localctx = new SubqueryRelationContext(_localctx);
/* 2780 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 2782 */         setState(478);match(6);
/* 2783 */         setState(479);query();
/* 2784 */         setState(480);match(3);
/*      */         
/* 2786 */         break;
/*      */       
/*      */       case 3: 
/* 2789 */         _localctx = new UnnestContext(_localctx);
/* 2790 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 2792 */         setState(482);match(125);
/* 2793 */         setState(483);match(6);
/* 2794 */         setState(484);expression();
/* 2795 */         setState(489);
/* 2796 */         this._errHandler.sync(this);
/* 2797 */         int _la = this._input.LA(1);
/* 2798 */         while (_la == 4)
/*      */         {
/*      */ 
/* 2801 */           setState(485);match(4);
/* 2802 */           setState(486);expression();
/*      */           
/*      */ 
/* 2805 */           setState(491);
/* 2806 */           this._errHandler.sync(this);
/* 2807 */           _la = this._input.LA(1);
/*      */         }
/* 2809 */         setState(492);match(3);
/*      */         
/* 2811 */         break;
/*      */       
/*      */       case 4: 
/* 2814 */         _localctx = new ParenthesizedRelationContext(_localctx);
/* 2815 */         enterOuterAlt(_localctx, 4);
/*      */         
/* 2817 */         setState(494);match(6);
/* 2818 */         setState(495);relation(0);
/* 2819 */         setState(496);match(3);
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2825 */       _localctx.exception = re;
/* 2826 */       this._errHandler.reportError(this, re);
/* 2827 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2830 */       exitRule();
/*      */     }
/* 2832 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class ExpressionContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.BooleanExpressionContext booleanExpression() {
/* 2837 */       return (SqlBaseParser.BooleanExpressionContext)getRuleContext(SqlBaseParser.BooleanExpressionContext.class, 0);
/*      */     }
/*      */     
/* 2840 */     public ExpressionContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2842 */     public int getRuleIndex() { return 21; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2845 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterExpression(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2849 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitExpression(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2853 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitExpression(this);
/* 2854 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final ExpressionContext expression() throws org.antlr.v4.runtime.RecognitionException {
/* 2859 */     ExpressionContext _localctx = new ExpressionContext(this._ctx, getState());
/* 2860 */     enterRule(_localctx, 42, 21);
/*      */     try {
/* 2862 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 2864 */       setState(500);booleanExpression(0);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 2868 */       _localctx.exception = re;
/* 2869 */       this._errHandler.reportError(this, re);
/* 2870 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 2873 */       exitRule();
/*      */     }
/* 2875 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class BooleanExpressionContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 2880 */     public BooleanExpressionContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 2882 */     public int getRuleIndex() { return 22; }
/*      */     
/*      */     public BooleanExpressionContext() {}
/*      */     
/* 2886 */     public void copyFrom(BooleanExpressionContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class LogicalBinaryContext extends SqlBaseParser.BooleanExpressionContext {
/*      */     public SqlBaseParser.BooleanExpressionContext left;
/*      */     public org.antlr.v4.runtime.Token operator;
/*      */     public SqlBaseParser.BooleanExpressionContext right;
/*      */     
/* 2894 */     public SqlBaseParser.BooleanExpressionContext booleanExpression(int i) { return (SqlBaseParser.BooleanExpressionContext)getRuleContext(SqlBaseParser.BooleanExpressionContext.class, i); }
/*      */     
/* 2896 */     public org.antlr.v4.runtime.tree.TerminalNode AND() { return getToken(24, 0); }
/* 2897 */     public org.antlr.v4.runtime.tree.TerminalNode OR() { return getToken(23, 0); }
/*      */     
/* 2899 */     public java.util.List<SqlBaseParser.BooleanExpressionContext> booleanExpression() { return getRuleContexts(SqlBaseParser.BooleanExpressionContext.class); }
/*      */     
/* 2901 */     public LogicalBinaryContext(SqlBaseParser.BooleanExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2904 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterLogicalBinary(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2908 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitLogicalBinary(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2912 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitLogicalBinary(this);
/* 2913 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 2917 */   public static class ExistsContext extends SqlBaseParser.BooleanExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode EXISTS() { return getToken(27, 0); }
/*      */     
/* 2919 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/* 2921 */     public ExistsContext(SqlBaseParser.BooleanExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2924 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterExists(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2928 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitExists(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2932 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitExists(this);
/* 2933 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class BooleanDefaultContext extends SqlBaseParser.BooleanExpressionContext {
/* 2938 */     public SqlBaseParser.PredicatedContext predicated() { return (SqlBaseParser.PredicatedContext)getRuleContext(SqlBaseParser.PredicatedContext.class, 0); }
/*      */     
/* 2940 */     public BooleanDefaultContext(SqlBaseParser.BooleanExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2943 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterBooleanDefault(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2947 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitBooleanDefault(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2951 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitBooleanDefault(this);
/* 2952 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class LogicalNotContext extends SqlBaseParser.BooleanExpressionContext {
/* 2957 */     public SqlBaseParser.BooleanExpressionContext booleanExpression() { return (SqlBaseParser.BooleanExpressionContext)getRuleContext(SqlBaseParser.BooleanExpressionContext.class, 0); }
/*      */     
/* 2959 */     public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/* 2960 */     public LogicalNotContext(SqlBaseParser.BooleanExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 2963 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterLogicalNot(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 2967 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitLogicalNot(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 2971 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitLogicalNot(this);
/* 2972 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final BooleanExpressionContext booleanExpression() throws org.antlr.v4.runtime.RecognitionException {
/* 2977 */     return booleanExpression(0);
/*      */   }
/*      */   
/*      */   private BooleanExpressionContext booleanExpression(int _p) throws org.antlr.v4.runtime.RecognitionException {
/* 2981 */     org.antlr.v4.runtime.ParserRuleContext _parentctx = this._ctx;
/* 2982 */     int _parentState = getState();
/* 2983 */     BooleanExpressionContext _localctx = new BooleanExpressionContext(this._ctx, _parentState);
/* 2984 */     BooleanExpressionContext _prevctx = _localctx;
/* 2985 */     int _startState = 44;
/* 2986 */     enterRecursionRule(_localctx, 44, 22, _p);
/*      */     try
/*      */     {
/* 2989 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 2991 */       setState(511);
/* 2992 */       switch (this._input.LA(1))
/*      */       {
/*      */       case 26: 
/* 2995 */         _localctx = new LogicalNotContext(_localctx);
/* 2996 */         this._ctx = _localctx;
/* 2997 */         _prevctx = _localctx;
/*      */         
/* 2999 */         setState(503);match(26);
/* 3000 */         setState(504);booleanExpression(4);
/*      */         
/* 3002 */         break;
/*      */       
/*      */       case 6: 
/*      */       case 20: 
/*      */       case 21: 
/*      */       case 22: 
/*      */       case 31: 
/*      */       case 32: 
/*      */       case 33: 
/*      */       case 40: 
/*      */       case 42: 
/*      */       case 43: 
/*      */       case 44: 
/*      */       case 45: 
/*      */       case 46: 
/*      */       case 47: 
/*      */       case 48: 
/*      */       case 49: 
/*      */       case 50: 
/*      */       case 51: 
/*      */       case 53: 
/*      */       case 54: 
/*      */       case 55: 
/*      */       case 56: 
/*      */       case 57: 
/*      */       case 58: 
/*      */       case 59: 
/*      */       case 74: 
/*      */       case 75: 
/*      */       case 76: 
/*      */       case 77: 
/*      */       case 79: 
/*      */       case 80: 
/*      */       case 81: 
/*      */       case 82: 
/*      */       case 88: 
/*      */       case 89: 
/*      */       case 94: 
/*      */       case 95: 
/*      */       case 96: 
/*      */       case 97: 
/*      */       case 98: 
/*      */       case 99: 
/*      */       case 100: 
/*      */       case 101: 
/*      */       case 102: 
/*      */       case 103: 
/*      */       case 104: 
/*      */       case 105: 
/*      */       case 106: 
/*      */       case 107: 
/*      */       case 108: 
/*      */       case 109: 
/*      */       case 110: 
/*      */       case 111: 
/*      */       case 116: 
/*      */       case 117: 
/*      */       case 118: 
/*      */       case 119: 
/*      */       case 120: 
/*      */       case 121: 
/*      */       case 126: 
/*      */       case 127: 
/*      */       case 128: 
/*      */       case 129: 
/*      */       case 130: 
/*      */       case 131: 
/*      */       case 132: 
/*      */       case 139: 
/*      */       case 140: 
/*      */       case 145: 
/*      */       case 146: 
/*      */       case 147: 
/*      */       case 148: 
/*      */       case 149: 
/*      */       case 150: 
/*      */       case 151: 
/* 3079 */         _localctx = new BooleanDefaultContext(_localctx);
/* 3080 */         this._ctx = _localctx;
/* 3081 */         _prevctx = _localctx;
/* 3082 */         setState(505);predicated();
/*      */         
/* 3084 */         break;
/*      */       
/*      */       case 27: 
/* 3087 */         _localctx = new ExistsContext(_localctx);
/* 3088 */         this._ctx = _localctx;
/* 3089 */         _prevctx = _localctx;
/* 3090 */         setState(506);match(27);
/* 3091 */         setState(507);match(6);
/* 3092 */         setState(508);query();
/* 3093 */         setState(509);match(3);
/*      */         
/* 3095 */         break;
/*      */       case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 23: case 24: case 25: case 28: case 29: case 30: case 34: case 35: case 36: case 37: case 38: case 39: case 41: case 52: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 78: case 83: case 84: case 85: case 86: case 87: case 90: case 91: case 92: case 93: case 112: case 113: case 114: case 115: case 122: case 123: case 124: case 125: case 133: case 134: case 135: case 136: case 137: case 138: case 141: case 142: case 143: case 144: default: 
/* 3097 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/* 3099 */       this._ctx.stop = this._input.LT(-1);
/* 3100 */       setState(521);
/* 3101 */       this._errHandler.sync(this);
/* 3102 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 59, this._ctx);
/* 3103 */       while ((_alt != 2) && (_alt != 0)) {
/* 3104 */         if (_alt == 1) {
/* 3105 */           if (this._parseListeners != null) triggerExitRuleEvent();
/* 3106 */           _prevctx = _localctx;
/*      */           
/* 3108 */           setState(519);
/* 3109 */           switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 58, this._ctx))
/*      */           {
/*      */           case 1: 
/* 3112 */             _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
/* 3113 */             ((LogicalBinaryContext)_localctx).left = _prevctx;
/* 3114 */             pushNewRecursionContext(_localctx, _startState, 22);
/* 3115 */             setState(513);
/* 3116 */             if (!precpred(this._ctx, 3)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 3)");
/* 3117 */             setState(514);((LogicalBinaryContext)_localctx).operator = match(24);
/* 3118 */             setState(515);((LogicalBinaryContext)_localctx).right = booleanExpression(4);
/*      */             
/* 3120 */             break;
/*      */           
/*      */ 
/*      */           case 2: 
/* 3124 */             _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
/* 3125 */             ((LogicalBinaryContext)_localctx).left = _prevctx;
/* 3126 */             pushNewRecursionContext(_localctx, _startState, 22);
/* 3127 */             setState(516);
/* 3128 */             if (!precpred(this._ctx, 2)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 2)");
/* 3129 */             setState(517);((LogicalBinaryContext)_localctx).operator = match(23);
/* 3130 */             setState(518);((LogicalBinaryContext)_localctx).right = booleanExpression(3);
/*      */           }
/*      */           
/*      */         }
/*      */         
/*      */ 
/* 3136 */         setState(523);
/* 3137 */         this._errHandler.sync(this);
/* 3138 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 59, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 3143 */       _localctx.exception = re;
/* 3144 */       this._errHandler.reportError(this, re);
/* 3145 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 3148 */       unrollRecursionContexts(_parentctx);
/*      */     }
/* 3150 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class PredicatedContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.ValueExpressionContext valueExpression;
/*      */     
/* 3156 */     public SqlBaseParser.PredicateContext predicate() { return (SqlBaseParser.PredicateContext)getRuleContext(SqlBaseParser.PredicateContext.class, 0); }
/*      */     
/*      */     public SqlBaseParser.ValueExpressionContext valueExpression() {
/* 3159 */       return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0);
/*      */     }
/*      */     
/* 3162 */     public PredicatedContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 3164 */     public int getRuleIndex() { return 23; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3167 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterPredicated(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3171 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitPredicated(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3175 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitPredicated(this);
/* 3176 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final PredicatedContext predicated() throws org.antlr.v4.runtime.RecognitionException {
/* 3181 */     PredicatedContext _localctx = new PredicatedContext(this._ctx, getState());
/* 3182 */     enterRule(_localctx, 46, 23);
/*      */     try {
/* 3184 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 3186 */       setState(524);_localctx.valueExpression = valueExpression(0);
/* 3187 */       setState(526);
/* 3188 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 60, this._ctx))
/*      */       {
/*      */       case 1: 
/* 3191 */         setState(525);predicate(_localctx.valueExpression);
/*      */       
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 3198 */       _localctx.exception = re;
/* 3199 */       this._errHandler.reportError(this, re);
/* 3200 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 3203 */       exitRule();
/*      */     }
/* 3205 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class PredicateContext extends org.antlr.v4.runtime.ParserRuleContext { public org.antlr.v4.runtime.ParserRuleContext value;
/*      */     
/* 3210 */     public PredicateContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 3212 */     public PredicateContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState, org.antlr.v4.runtime.ParserRuleContext value) { super(invokingState);
/* 3213 */       this.value = value; }
/*      */     
/* 3215 */     public int getRuleIndex() { return 24; }
/*      */     
/*      */     public PredicateContext() {}
/*      */     
/* 3219 */     public void copyFrom(PredicateContext ctx) { super.copyFrom(ctx);
/* 3220 */       this.value = ctx.value;
/*      */     }
/*      */   }
/*      */   
/* 3224 */   public static class InListContext extends SqlBaseParser.PredicateContext { public org.antlr.v4.runtime.tree.TerminalNode IN() { return getToken(25, 0); }
/*      */     
/* 3226 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/* 3228 */     public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/*      */     
/* 3230 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 3232 */     public InListContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3235 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterInList(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3239 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitInList(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3243 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitInList(this);
/* 3244 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class DistinctFromContext extends SqlBaseParser.PredicateContext { public SqlBaseParser.ValueExpressionContext right;
/*      */     
/* 3249 */     public org.antlr.v4.runtime.tree.TerminalNode DISTINCT() { return getToken(13, 0); }
/* 3250 */     public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/* 3251 */     public org.antlr.v4.runtime.tree.TerminalNode IS() { return getToken(30, 0); }
/*      */     
/* 3253 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/* 3255 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/* 3256 */     public DistinctFromContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3259 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterDistinctFrom(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3263 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitDistinctFrom(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3267 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitDistinctFrom(this);
/* 3268 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 3272 */   public static class NullPredicateContext extends SqlBaseParser.PredicateContext { public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/* 3273 */     public org.antlr.v4.runtime.tree.TerminalNode IS() { return getToken(30, 0); }
/* 3274 */     public org.antlr.v4.runtime.tree.TerminalNode NULL() { return getToken(31, 0); }
/* 3275 */     public NullPredicateContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3278 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterNullPredicate(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3282 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitNullPredicate(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3286 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitNullPredicate(this);
/* 3287 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 3291 */   public static class InSubqueryContext extends SqlBaseParser.PredicateContext { public org.antlr.v4.runtime.tree.TerminalNode IN() { return getToken(25, 0); }
/* 3292 */     public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/*      */     
/* 3294 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/* 3296 */     public InSubqueryContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3299 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterInSubquery(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3303 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitInSubquery(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3307 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitInSubquery(this);
/* 3308 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class LikeContext extends SqlBaseParser.PredicateContext { public SqlBaseParser.ValueExpressionContext pattern;
/*      */     public SqlBaseParser.ValueExpressionContext escape;
/*      */     
/* 3314 */     public org.antlr.v4.runtime.tree.TerminalNode ESCAPE() { return getToken(37, 0); }
/* 3315 */     public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/*      */     
/* 3317 */     public SqlBaseParser.ValueExpressionContext valueExpression(int i) { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, i); }
/*      */     
/* 3319 */     public org.antlr.v4.runtime.tree.TerminalNode LIKE() { return getToken(29, 0); }
/*      */     
/* 3321 */     public java.util.List<SqlBaseParser.ValueExpressionContext> valueExpression() { return getRuleContexts(SqlBaseParser.ValueExpressionContext.class); }
/*      */     
/* 3323 */     public LikeContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3326 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterLike(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3330 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitLike(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3334 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitLike(this);
/* 3335 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class BetweenContext extends SqlBaseParser.PredicateContext { public SqlBaseParser.ValueExpressionContext lower;
/*      */     public SqlBaseParser.ValueExpressionContext upper;
/*      */     
/* 3341 */     public org.antlr.v4.runtime.tree.TerminalNode BETWEEN() { return getToken(28, 0); }
/* 3342 */     public org.antlr.v4.runtime.tree.TerminalNode AND() { return getToken(24, 0); }
/* 3343 */     public org.antlr.v4.runtime.tree.TerminalNode NOT() { return getToken(26, 0); }
/*      */     
/* 3345 */     public SqlBaseParser.ValueExpressionContext valueExpression(int i) { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, i); }
/*      */     
/*      */ 
/* 3348 */     public java.util.List<SqlBaseParser.ValueExpressionContext> valueExpression() { return getRuleContexts(SqlBaseParser.ValueExpressionContext.class); }
/*      */     
/* 3350 */     public BetweenContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3353 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterBetween(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3357 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitBetween(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3361 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitBetween(this);
/* 3362 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class ComparisonContext extends SqlBaseParser.PredicateContext { public SqlBaseParser.ValueExpressionContext right;
/*      */     
/* 3368 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/*      */ 
/* 3371 */     public SqlBaseParser.ComparisonOperatorContext comparisonOperator() { return (SqlBaseParser.ComparisonOperatorContext)getRuleContext(SqlBaseParser.ComparisonOperatorContext.class, 0); }
/*      */     
/* 3373 */     public ComparisonContext(SqlBaseParser.PredicateContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3376 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterComparison(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3380 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitComparison(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3384 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitComparison(this);
/* 3385 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final PredicateContext predicate(org.antlr.v4.runtime.ParserRuleContext value) throws org.antlr.v4.runtime.RecognitionException {
/* 3390 */     PredicateContext _localctx = new PredicateContext(this._ctx, getState(), value);
/* 3391 */     enterRule(_localctx, 48, 24);
/*      */     try
/*      */     {
/* 3394 */       setState(583);
/* 3395 */       int _la; switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 69, this._ctx)) {
/*      */       case 1: 
/* 3397 */         _localctx = new ComparisonContext(_localctx);
/* 3398 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 3400 */         setState(528);comparisonOperator();
/* 3401 */         setState(529);((ComparisonContext)_localctx).right = valueExpression(0);
/*      */         
/* 3403 */         break;
/*      */       
/*      */       case 2: 
/* 3406 */         _localctx = new BetweenContext(_localctx);
/* 3407 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 3409 */         setState(532);
/* 3410 */         _la = this._input.LA(1);
/* 3411 */         if (_la == 26)
/*      */         {
/* 3413 */           setState(531);match(26);
/*      */         }
/*      */         
/*      */ 
/* 3417 */         setState(534);match(28);
/* 3418 */         setState(535);((BetweenContext)_localctx).lower = valueExpression(0);
/* 3419 */         setState(536);match(24);
/* 3420 */         setState(537);((BetweenContext)_localctx).upper = valueExpression(0);
/*      */         
/* 3422 */         break;
/*      */       
/*      */       case 3: 
/* 3425 */         _localctx = new InListContext(_localctx);
/* 3426 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 3428 */         setState(540);
/* 3429 */         _la = this._input.LA(1);
/* 3430 */         if (_la == 26)
/*      */         {
/* 3432 */           setState(539);match(26);
/*      */         }
/*      */         
/*      */ 
/* 3436 */         setState(542);match(25);
/* 3437 */         setState(543);match(6);
/* 3438 */         setState(544);expression();
/* 3439 */         setState(549);
/* 3440 */         this._errHandler.sync(this);
/* 3441 */         _la = this._input.LA(1);
/* 3442 */         while (_la == 4)
/*      */         {
/*      */ 
/* 3445 */           setState(545);match(4);
/* 3446 */           setState(546);expression();
/*      */           
/*      */ 
/* 3449 */           setState(551);
/* 3450 */           this._errHandler.sync(this);
/* 3451 */           _la = this._input.LA(1);
/*      */         }
/* 3453 */         setState(552);match(3);
/*      */         
/* 3455 */         break;
/*      */       
/*      */       case 4: 
/* 3458 */         _localctx = new InSubqueryContext(_localctx);
/* 3459 */         enterOuterAlt(_localctx, 4);
/*      */         
/* 3461 */         setState(555);
/* 3462 */         _la = this._input.LA(1);
/* 3463 */         if (_la == 26)
/*      */         {
/* 3465 */           setState(554);match(26);
/*      */         }
/*      */         
/*      */ 
/* 3469 */         setState(557);match(25);
/* 3470 */         setState(558);match(6);
/* 3471 */         setState(559);query();
/* 3472 */         setState(560);match(3);
/*      */         
/* 3474 */         break;
/*      */       
/*      */       case 5: 
/* 3477 */         _localctx = new LikeContext(_localctx);
/* 3478 */         enterOuterAlt(_localctx, 5);
/*      */         
/* 3480 */         setState(563);
/* 3481 */         _la = this._input.LA(1);
/* 3482 */         if (_la == 26)
/*      */         {
/* 3484 */           setState(562);match(26);
/*      */         }
/*      */         
/*      */ 
/* 3488 */         setState(565);match(29);
/* 3489 */         setState(566);((LikeContext)_localctx).pattern = valueExpression(0);
/* 3490 */         setState(569);
/* 3491 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 66, this._ctx))
/*      */         {
/*      */         case 1: 
/* 3494 */           setState(567);match(37);
/* 3495 */           setState(568);((LikeContext)_localctx).escape = valueExpression(0);
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 3500 */         break;
/*      */       
/*      */       case 6: 
/* 3503 */         _localctx = new NullPredicateContext(_localctx);
/* 3504 */         enterOuterAlt(_localctx, 6);
/*      */         
/* 3506 */         setState(571);match(30);
/* 3507 */         setState(573);
/* 3508 */         _la = this._input.LA(1);
/* 3509 */         if (_la == 26)
/*      */         {
/* 3511 */           setState(572);match(26);
/*      */         }
/*      */         
/*      */ 
/* 3515 */         setState(575);match(31);
/*      */         
/* 3517 */         break;
/*      */       
/*      */       case 7: 
/* 3520 */         _localctx = new DistinctFromContext(_localctx);
/* 3521 */         enterOuterAlt(_localctx, 7);
/*      */         
/* 3523 */         setState(576);match(30);
/* 3524 */         setState(578);
/* 3525 */         _la = this._input.LA(1);
/* 3526 */         if (_la == 26)
/*      */         {
/* 3528 */           setState(577);match(26);
/*      */         }
/*      */         
/*      */ 
/* 3532 */         setState(580);match(13);
/* 3533 */         setState(581);match(8);
/* 3534 */         setState(582);((DistinctFromContext)_localctx).right = valueExpression(0);
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 3540 */       _localctx.exception = re;
/* 3541 */       this._errHandler.reportError(this, re);
/* 3542 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 3545 */       exitRule();
/*      */     }
/* 3547 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class ValueExpressionContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 3552 */     public ValueExpressionContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 3554 */     public int getRuleIndex() { return 25; }
/*      */     
/*      */     public ValueExpressionContext() {}
/*      */     
/* 3558 */     public void copyFrom(ValueExpressionContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class AtTimeZoneContext
/*      */     extends SqlBaseParser.ValueExpressionContext {
/* 3563 */     public SqlBaseParser.TimeZoneSpecifierContext timeZoneSpecifier() { return (SqlBaseParser.TimeZoneSpecifierContext)getRuleContext(SqlBaseParser.TimeZoneSpecifierContext.class, 0); }
/*      */     
/* 3565 */     public org.antlr.v4.runtime.tree.TerminalNode AT() { return getToken(21, 0); }
/*      */     
/* 3567 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/* 3569 */     public AtTimeZoneContext(SqlBaseParser.ValueExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3572 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterAtTimeZone(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3576 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitAtTimeZone(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3580 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitAtTimeZone(this);
/* 3581 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class ValueExpressionDefaultContext extends SqlBaseParser.ValueExpressionContext {
/* 3586 */     public SqlBaseParser.PrimaryExpressionContext primaryExpression() { return (SqlBaseParser.PrimaryExpressionContext)getRuleContext(SqlBaseParser.PrimaryExpressionContext.class, 0); }
/*      */     
/* 3588 */     public ValueExpressionDefaultContext(SqlBaseParser.ValueExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3591 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterValueExpressionDefault(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3595 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitValueExpressionDefault(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3599 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitValueExpressionDefault(this);
/* 3600 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class ArithmeticBinaryContext extends SqlBaseParser.ValueExpressionContext { public SqlBaseParser.ValueExpressionContext left;
/*      */     public org.antlr.v4.runtime.Token operator;
/*      */     public SqlBaseParser.ValueExpressionContext right;
/*      */     
/* 3607 */     public org.antlr.v4.runtime.tree.TerminalNode ASTERISK() { return getToken(141, 0); }
/* 3608 */     public org.antlr.v4.runtime.tree.TerminalNode PERCENT() { return getToken(143, 0); }
/* 3609 */     public org.antlr.v4.runtime.tree.TerminalNode MINUS() { return getToken(140, 0); }
/* 3610 */     public org.antlr.v4.runtime.tree.TerminalNode PLUS() { return getToken(139, 0); }
/*      */     
/* 3612 */     public SqlBaseParser.ValueExpressionContext valueExpression(int i) { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, i); }
/*      */     
/* 3614 */     public org.antlr.v4.runtime.tree.TerminalNode SLASH() { return getToken(142, 0); }
/*      */     
/* 3616 */     public java.util.List<SqlBaseParser.ValueExpressionContext> valueExpression() { return getRuleContexts(SqlBaseParser.ValueExpressionContext.class); }
/*      */     
/* 3618 */     public ArithmeticBinaryContext(SqlBaseParser.ValueExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3621 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterArithmeticBinary(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3625 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitArithmeticBinary(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3629 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitArithmeticBinary(this);
/* 3630 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class ArithmeticUnaryContext extends SqlBaseParser.ValueExpressionContext { public org.antlr.v4.runtime.Token operator;
/*      */     
/* 3635 */     public org.antlr.v4.runtime.tree.TerminalNode MINUS() { return getToken(140, 0); }
/* 3636 */     public org.antlr.v4.runtime.tree.TerminalNode PLUS() { return getToken(139, 0); }
/*      */     
/* 3638 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/* 3640 */     public ArithmeticUnaryContext(SqlBaseParser.ValueExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3643 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterArithmeticUnary(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3647 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitArithmeticUnary(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3651 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitArithmeticUnary(this);
/* 3652 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class ConcatenationContext extends SqlBaseParser.ValueExpressionContext { public SqlBaseParser.ValueExpressionContext left;
/*      */     public SqlBaseParser.ValueExpressionContext right;
/*      */     
/* 3658 */     public org.antlr.v4.runtime.tree.TerminalNode CONCAT() { return getToken(144, 0); }
/*      */     
/* 3660 */     public SqlBaseParser.ValueExpressionContext valueExpression(int i) { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, i); }
/*      */     
/*      */ 
/* 3663 */     public java.util.List<SqlBaseParser.ValueExpressionContext> valueExpression() { return getRuleContexts(SqlBaseParser.ValueExpressionContext.class); }
/*      */     
/* 3665 */     public ConcatenationContext(SqlBaseParser.ValueExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3668 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterConcatenation(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3672 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitConcatenation(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3676 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitConcatenation(this);
/* 3677 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final ValueExpressionContext valueExpression() throws org.antlr.v4.runtime.RecognitionException {
/* 3682 */     return valueExpression(0);
/*      */   }
/*      */   
/*      */   private ValueExpressionContext valueExpression(int _p) throws org.antlr.v4.runtime.RecognitionException {
/* 3686 */     org.antlr.v4.runtime.ParserRuleContext _parentctx = this._ctx;
/* 3687 */     int _parentState = getState();
/* 3688 */     ValueExpressionContext _localctx = new ValueExpressionContext(this._ctx, _parentState);
/* 3689 */     ValueExpressionContext _prevctx = _localctx;
/* 3690 */     int _startState = 50;
/* 3691 */     enterRecursionRule(_localctx, 50, 25, _p);
/*      */     
/*      */     try
/*      */     {
/* 3695 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 3697 */       setState(589);
/* 3698 */       int _la; switch (this._input.LA(1))
/*      */       {
/*      */       case 139: 
/*      */       case 140: 
/* 3702 */         _localctx = new ArithmeticUnaryContext(_localctx);
/* 3703 */         this._ctx = _localctx;
/* 3704 */         _prevctx = _localctx;
/*      */         
/* 3706 */         setState(586);
/* 3707 */         ((ArithmeticUnaryContext)_localctx).operator = this._input.LT(1);
/* 3708 */         _la = this._input.LA(1);
/* 3709 */         if ((_la != 139) && (_la != 140)) {
/* 3710 */           ((ArithmeticUnaryContext)_localctx).operator = this._errHandler.recoverInline(this);
/*      */         }
/* 3712 */         consume();
/* 3713 */         setState(587);valueExpression(4);
/*      */         
/* 3715 */         break;
/*      */       
/*      */       case 6: 
/*      */       case 20: 
/*      */       case 21: 
/*      */       case 22: 
/*      */       case 31: 
/*      */       case 32: 
/*      */       case 33: 
/*      */       case 40: 
/*      */       case 42: 
/*      */       case 43: 
/*      */       case 44: 
/*      */       case 45: 
/*      */       case 46: 
/*      */       case 47: 
/*      */       case 48: 
/*      */       case 49: 
/*      */       case 50: 
/*      */       case 51: 
/*      */       case 53: 
/*      */       case 54: 
/*      */       case 55: 
/*      */       case 56: 
/*      */       case 57: 
/*      */       case 58: 
/*      */       case 59: 
/*      */       case 74: 
/*      */       case 75: 
/*      */       case 76: 
/*      */       case 77: 
/*      */       case 79: 
/*      */       case 80: 
/*      */       case 81: 
/*      */       case 82: 
/*      */       case 88: 
/*      */       case 89: 
/*      */       case 94: 
/*      */       case 95: 
/*      */       case 96: 
/*      */       case 97: 
/*      */       case 98: 
/*      */       case 99: 
/*      */       case 100: 
/*      */       case 101: 
/*      */       case 102: 
/*      */       case 103: 
/*      */       case 104: 
/*      */       case 105: 
/*      */       case 106: 
/*      */       case 107: 
/*      */       case 108: 
/*      */       case 109: 
/*      */       case 110: 
/*      */       case 111: 
/*      */       case 116: 
/*      */       case 117: 
/*      */       case 118: 
/*      */       case 119: 
/*      */       case 120: 
/*      */       case 121: 
/*      */       case 126: 
/*      */       case 127: 
/*      */       case 128: 
/*      */       case 129: 
/*      */       case 130: 
/*      */       case 131: 
/*      */       case 132: 
/*      */       case 145: 
/*      */       case 146: 
/*      */       case 147: 
/*      */       case 148: 
/*      */       case 149: 
/*      */       case 150: 
/*      */       case 151: 
/* 3790 */         _localctx = new ValueExpressionDefaultContext(_localctx);
/* 3791 */         this._ctx = _localctx;
/* 3792 */         _prevctx = _localctx;
/* 3793 */         setState(588);primaryExpression(0);
/*      */         
/* 3795 */         break;
/*      */       case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 34: case 35: case 36: case 37: case 38: case 39: case 41: case 52: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 78: case 83: case 84: case 85: case 86: case 87: case 90: case 91: case 92: case 93: case 112: case 113: case 114: case 115: case 122: case 123: case 124: case 125: case 133: case 134: case 135: case 136: case 137: case 138: case 141: case 142: case 143: case 144: default: 
/* 3797 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/* 3799 */       this._ctx.stop = this._input.LT(-1);
/* 3800 */       setState(605);
/* 3801 */       this._errHandler.sync(this);
/* 3802 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 72, this._ctx);
/* 3803 */       while ((_alt != 2) && (_alt != 0)) {
/* 3804 */         if (_alt == 1) {
/* 3805 */           if (this._parseListeners != null) triggerExitRuleEvent();
/* 3806 */           _prevctx = _localctx;
/*      */           
/* 3808 */           setState(603);
/* 3809 */           switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 71, this._ctx))
/*      */           {
/*      */           case 1: 
/* 3812 */             _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
/* 3813 */             ((ArithmeticBinaryContext)_localctx).left = _prevctx;
/* 3814 */             pushNewRecursionContext(_localctx, _startState, 25);
/* 3815 */             setState(591);
/* 3816 */             if (!precpred(this._ctx, 3)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 3)");
/* 3817 */             setState(592);
/* 3818 */             ((ArithmeticBinaryContext)_localctx).operator = this._input.LT(1);
/* 3819 */             _la = this._input.LA(1);
/* 3820 */             if (((_la - 141 & 0xFFFFFFC0) != 0) || ((1L << _la - 141 & 0x7) == 0L)) {
/* 3821 */               ((ArithmeticBinaryContext)_localctx).operator = this._errHandler.recoverInline(this);
/*      */             }
/* 3823 */             consume();
/* 3824 */             setState(593);((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
/*      */             
/* 3826 */             break;
/*      */           
/*      */ 
/*      */           case 2: 
/* 3830 */             _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
/* 3831 */             ((ArithmeticBinaryContext)_localctx).left = _prevctx;
/* 3832 */             pushNewRecursionContext(_localctx, _startState, 25);
/* 3833 */             setState(594);
/* 3834 */             if (!precpred(this._ctx, 2)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 2)");
/* 3835 */             setState(595);
/* 3836 */             ((ArithmeticBinaryContext)_localctx).operator = this._input.LT(1);
/* 3837 */             _la = this._input.LA(1);
/* 3838 */             if ((_la != 139) && (_la != 140)) {
/* 3839 */               ((ArithmeticBinaryContext)_localctx).operator = this._errHandler.recoverInline(this);
/*      */             }
/* 3841 */             consume();
/* 3842 */             setState(596);((ArithmeticBinaryContext)_localctx).right = valueExpression(3);
/*      */             
/* 3844 */             break;
/*      */           
/*      */ 
/*      */           case 3: 
/* 3848 */             _localctx = new ConcatenationContext(new ValueExpressionContext(_parentctx, _parentState));
/* 3849 */             ((ConcatenationContext)_localctx).left = _prevctx;
/* 3850 */             pushNewRecursionContext(_localctx, _startState, 25);
/* 3851 */             setState(597);
/* 3852 */             if (!precpred(this._ctx, 1)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 1)");
/* 3853 */             setState(598);match(144);
/* 3854 */             setState(599);((ConcatenationContext)_localctx).right = valueExpression(2);
/*      */             
/* 3856 */             break;
/*      */           
/*      */ 
/*      */           case 4: 
/* 3860 */             _localctx = new AtTimeZoneContext(new ValueExpressionContext(_parentctx, _parentState));
/* 3861 */             pushNewRecursionContext(_localctx, _startState, 25);
/* 3862 */             setState(600);
/* 3863 */             if (!precpred(this._ctx, 5)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 5)");
/* 3864 */             setState(601);match(21);
/* 3865 */             setState(602);timeZoneSpecifier();
/*      */           }
/*      */           
/*      */         }
/*      */         
/*      */ 
/* 3871 */         setState(607);
/* 3872 */         this._errHandler.sync(this);
/* 3873 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 72, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 3878 */       _localctx.exception = re;
/* 3879 */       this._errHandler.reportError(this, re);
/* 3880 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 3883 */       unrollRecursionContexts(_parentctx);
/*      */     }
/* 3885 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class PrimaryExpressionContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 3890 */     public PrimaryExpressionContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 3892 */     public int getRuleIndex() { return 26; }
/*      */     
/*      */     public PrimaryExpressionContext() {}
/*      */     
/* 3896 */     public void copyFrom(PrimaryExpressionContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class ColumnReferenceContext
/*      */     extends SqlBaseParser.PrimaryExpressionContext {
/* 3901 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/* 3903 */     public ColumnReferenceContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3906 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterColumnReference(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3910 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitColumnReference(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3914 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitColumnReference(this);
/* 3915 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 3919 */   public static class TypeConstructorContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode STRING() { return getToken(145, 0); }
/*      */     
/* 3921 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/* 3923 */     public TypeConstructorContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3926 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterTypeConstructor(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3930 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitTypeConstructor(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3934 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitTypeConstructor(this);
/* 3935 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class SubqueryExpressionContext extends SqlBaseParser.PrimaryExpressionContext {
/* 3940 */     public SqlBaseParser.QueryContext query() { return (SqlBaseParser.QueryContext)getRuleContext(SqlBaseParser.QueryContext.class, 0); }
/*      */     
/* 3942 */     public SubqueryExpressionContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3945 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSubqueryExpression(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3949 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSubqueryExpression(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3953 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSubqueryExpression(this);
/* 3954 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class BooleanLiteralContext extends SqlBaseParser.PrimaryExpressionContext {
/* 3959 */     public SqlBaseParser.BooleanValueContext booleanValue() { return (SqlBaseParser.BooleanValueContext)getRuleContext(SqlBaseParser.BooleanValueContext.class, 0); }
/*      */     
/* 3961 */     public BooleanLiteralContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3964 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterBooleanLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3968 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitBooleanLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3972 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitBooleanLiteral(this);
/* 3973 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 3977 */   public static class StringLiteralContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode STRING() { return getToken(145, 0); }
/* 3978 */     public StringLiteralContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 3981 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterStringLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 3985 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitStringLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 3989 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitStringLiteral(this);
/* 3990 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 3994 */   public static class ExtractContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode EXTRACT() { return getToken(58, 0); }
/*      */     
/* 3996 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/* 3998 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/*      */     
/* 4000 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/* 4002 */     public ExtractContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4005 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterExtract(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4009 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitExtract(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4013 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitExtract(this);
/* 4014 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class ParenthesizedExpressionContext extends SqlBaseParser.PrimaryExpressionContext {
/* 4019 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/* 4021 */     public ParenthesizedExpressionContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4024 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterParenthesizedExpression(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4028 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitParenthesizedExpression(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4032 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitParenthesizedExpression(this);
/* 4033 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class SimpleCaseContext extends SqlBaseParser.PrimaryExpressionContext { public SqlBaseParser.ExpressionContext elseExpression;
/*      */     
/* 4038 */     public org.antlr.v4.runtime.tree.TerminalNode ELSE() { return getToken(62, 0); }
/*      */     
/* 4040 */     public SqlBaseParser.WhenClauseContext whenClause(int i) { return (SqlBaseParser.WhenClauseContext)getRuleContext(SqlBaseParser.WhenClauseContext.class, i); }
/*      */     
/* 4042 */     public org.antlr.v4.runtime.tree.TerminalNode CASE() { return getToken(59, 0); }
/*      */     
/* 4044 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.WhenClauseContext> whenClause() {
/* 4047 */       return getRuleContexts(SqlBaseParser.WhenClauseContext.class);
/*      */     }
/*      */     
/* 4050 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/* 4052 */     public org.antlr.v4.runtime.tree.TerminalNode END() { return getToken(63, 0); }
/* 4053 */     public SimpleCaseContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4056 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSimpleCase(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4060 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSimpleCase(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4064 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSimpleCase(this);
/* 4065 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class SearchedCaseContext extends SqlBaseParser.PrimaryExpressionContext { public SqlBaseParser.ExpressionContext elseExpression;
/*      */     
/* 4070 */     public org.antlr.v4.runtime.tree.TerminalNode ELSE() { return getToken(62, 0); }
/*      */     
/* 4072 */     public SqlBaseParser.WhenClauseContext whenClause(int i) { return (SqlBaseParser.WhenClauseContext)getRuleContext(SqlBaseParser.WhenClauseContext.class, i); }
/*      */     
/* 4074 */     public org.antlr.v4.runtime.tree.TerminalNode CASE() { return getToken(59, 0); }
/*      */     
/* 4076 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/*      */ 
/* 4079 */     public java.util.List<SqlBaseParser.WhenClauseContext> whenClause() { return getRuleContexts(SqlBaseParser.WhenClauseContext.class); }
/*      */     
/* 4081 */     public org.antlr.v4.runtime.tree.TerminalNode END() { return getToken(63, 0); }
/* 4082 */     public SearchedCaseContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4085 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSearchedCase(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4089 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSearchedCase(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4093 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSearchedCase(this);
/* 4094 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 4098 */   public static class NullLiteralContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode NULL() { return getToken(31, 0); }
/* 4099 */     public NullLiteralContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4102 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterNullLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4106 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitNullLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4110 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitNullLiteral(this);
/* 4111 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class FunctionCallContext extends SqlBaseParser.PrimaryExpressionContext {
/* 4116 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/* 4118 */     public org.antlr.v4.runtime.tree.TerminalNode ASTERISK() { return getToken(141, 0); }
/*      */     
/* 4120 */     public SqlBaseParser.QualifiedNameContext qualifiedName() { return (SqlBaseParser.QualifiedNameContext)getRuleContext(SqlBaseParser.QualifiedNameContext.class, 0); }
/*      */     
/*      */     public SqlBaseParser.SetQuantifierContext setQuantifier() {
/* 4123 */       return (SqlBaseParser.SetQuantifierContext)getRuleContext(SqlBaseParser.SetQuantifierContext.class, 0);
/*      */     }
/*      */     
/* 4126 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/*      */ 
/* 4129 */     public SqlBaseParser.OverContext over() { return (SqlBaseParser.OverContext)getRuleContext(SqlBaseParser.OverContext.class, 0); }
/*      */     
/* 4131 */     public FunctionCallContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4134 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterFunctionCall(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4138 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitFunctionCall(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4142 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitFunctionCall(this);
/* 4143 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class ArrayConstructorContext extends SqlBaseParser.PrimaryExpressionContext {
/* 4148 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/*      */ 
/* 4151 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 4153 */     public org.antlr.v4.runtime.tree.TerminalNode ARRAY() { return getToken(126, 0); }
/* 4154 */     public ArrayConstructorContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4157 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterArrayConstructor(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4161 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitArrayConstructor(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4165 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitArrayConstructor(this);
/* 4166 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class IntervalLiteralContext extends SqlBaseParser.PrimaryExpressionContext {
/* 4171 */     public SqlBaseParser.IntervalContext interval() { return (SqlBaseParser.IntervalContext)getRuleContext(SqlBaseParser.IntervalContext.class, 0); }
/*      */     
/* 4173 */     public IntervalLiteralContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4176 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterIntervalLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4180 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitIntervalLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4184 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitIntervalLiteral(this);
/* 4185 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 4189 */   public static class CastContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode AS() { return getToken(9, 0); }
/* 4190 */     public org.antlr.v4.runtime.tree.TerminalNode TRY_CAST() { return getToken(103, 0); }
/*      */     
/* 4192 */     public SqlBaseParser.TypeContext type() { return (SqlBaseParser.TypeContext)getRuleContext(SqlBaseParser.TypeContext.class, 0); }
/*      */     
/*      */ 
/* 4195 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/* 4197 */     public org.antlr.v4.runtime.tree.TerminalNode CAST() { return getToken(102, 0); }
/* 4198 */     public CastContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4201 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterCast(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4205 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitCast(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4209 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitCast(this);
/* 4210 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class RowConstructorContext extends SqlBaseParser.PrimaryExpressionContext {
/* 4215 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/* 4217 */     public org.antlr.v4.runtime.tree.TerminalNode ROW() { return getToken(82, 0); }
/*      */     
/* 4219 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 4221 */     public RowConstructorContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4224 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterRowConstructor(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4228 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitRowConstructor(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4232 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitRowConstructor(this);
/* 4233 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class SubscriptContext extends SqlBaseParser.PrimaryExpressionContext { public SqlBaseParser.PrimaryExpressionContext value;
/*      */     public SqlBaseParser.ValueExpressionContext index;
/*      */     
/* 4240 */     public SqlBaseParser.PrimaryExpressionContext primaryExpression() { return (SqlBaseParser.PrimaryExpressionContext)getRuleContext(SqlBaseParser.PrimaryExpressionContext.class, 0); }
/*      */     
/*      */ 
/* 4243 */     public SqlBaseParser.ValueExpressionContext valueExpression() { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, 0); }
/*      */     
/* 4245 */     public SubscriptContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4248 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSubscript(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4252 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSubscript(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4256 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSubscript(this);
/* 4257 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 4261 */   public static class SubstringContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.tree.TerminalNode FOR() { return getToken(41, 0); }
/*      */     
/* 4263 */     public SqlBaseParser.ValueExpressionContext valueExpression(int i) { return (SqlBaseParser.ValueExpressionContext)getRuleContext(SqlBaseParser.ValueExpressionContext.class, i); }
/*      */     
/* 4265 */     public org.antlr.v4.runtime.tree.TerminalNode SUBSTRING() { return getToken(40, 0); }
/* 4266 */     public org.antlr.v4.runtime.tree.TerminalNode FROM() { return getToken(8, 0); }
/*      */     
/* 4268 */     public java.util.List<SqlBaseParser.ValueExpressionContext> valueExpression() { return getRuleContexts(SqlBaseParser.ValueExpressionContext.class); }
/*      */     
/* 4270 */     public SubstringContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4273 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSubstring(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4277 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSubstring(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4281 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSubstring(this);
/* 4282 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class SpecialDateTimeFunctionContext extends SqlBaseParser.PrimaryExpressionContext { public org.antlr.v4.runtime.Token name;
/*      */     public org.antlr.v4.runtime.Token precision;
/*      */     
/* 4288 */     public org.antlr.v4.runtime.tree.TerminalNode INTEGER_VALUE() { return getToken(146, 0); }
/* 4289 */     public org.antlr.v4.runtime.tree.TerminalNode LOCALTIMESTAMP() { return getToken(57, 0); }
/* 4290 */     public org.antlr.v4.runtime.tree.TerminalNode CURRENT_TIMESTAMP() { return getToken(55, 0); }
/* 4291 */     public org.antlr.v4.runtime.tree.TerminalNode CURRENT_DATE() { return getToken(53, 0); }
/* 4292 */     public org.antlr.v4.runtime.tree.TerminalNode CURRENT_TIME() { return getToken(54, 0); }
/* 4293 */     public org.antlr.v4.runtime.tree.TerminalNode LOCALTIME() { return getToken(56, 0); }
/* 4294 */     public SpecialDateTimeFunctionContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4297 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSpecialDateTimeFunction(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4301 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSpecialDateTimeFunction(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4305 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSpecialDateTimeFunction(this);
/* 4306 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class NumericLiteralContext extends SqlBaseParser.PrimaryExpressionContext {
/* 4311 */     public SqlBaseParser.NumberContext number() { return (SqlBaseParser.NumberContext)getRuleContext(SqlBaseParser.NumberContext.class, 0); }
/*      */     
/* 4313 */     public NumericLiteralContext(SqlBaseParser.PrimaryExpressionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4316 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterNumericLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4320 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitNumericLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4324 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitNumericLiteral(this);
/* 4325 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final PrimaryExpressionContext primaryExpression() throws org.antlr.v4.runtime.RecognitionException {
/* 4330 */     return primaryExpression(0);
/*      */   }
/*      */   
/*      */   private PrimaryExpressionContext primaryExpression(int _p) throws org.antlr.v4.runtime.RecognitionException {
/* 4334 */     org.antlr.v4.runtime.ParserRuleContext _parentctx = this._ctx;
/* 4335 */     int _parentState = getState();
/* 4336 */     PrimaryExpressionContext _localctx = new PrimaryExpressionContext(this._ctx, _parentState);
/* 4337 */     PrimaryExpressionContext _prevctx = _localctx;
/* 4338 */     int _startState = 52;
/* 4339 */     enterRecursionRule(_localctx, 52, 26, _p);
/*      */     
/*      */     try
/*      */     {
/* 4343 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 4345 */       setState(769);
/* 4346 */       int _la; switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 91, this._ctx))
/*      */       {
/*      */       case 1: 
/* 4349 */         _localctx = new NullLiteralContext(_localctx);
/* 4350 */         this._ctx = _localctx;
/* 4351 */         _prevctx = _localctx;
/*      */         
/* 4353 */         setState(609);match(31);
/*      */         
/* 4355 */         break;
/*      */       
/*      */ 
/*      */       case 2: 
/* 4359 */         _localctx = new IntervalLiteralContext(_localctx);
/* 4360 */         this._ctx = _localctx;
/* 4361 */         _prevctx = _localctx;
/* 4362 */         setState(610);interval();
/*      */         
/* 4364 */         break;
/*      */       
/*      */ 
/*      */       case 3: 
/* 4368 */         _localctx = new TypeConstructorContext(_localctx);
/* 4369 */         this._ctx = _localctx;
/* 4370 */         _prevctx = _localctx;
/* 4371 */         setState(611);identifier();
/* 4372 */         setState(612);match(145);
/*      */         
/* 4374 */         break;
/*      */       
/*      */ 
/*      */       case 4: 
/* 4378 */         _localctx = new NumericLiteralContext(_localctx);
/* 4379 */         this._ctx = _localctx;
/* 4380 */         _prevctx = _localctx;
/* 4381 */         setState(614);number();
/*      */         
/* 4383 */         break;
/*      */       
/*      */ 
/*      */       case 5: 
/* 4387 */         _localctx = new BooleanLiteralContext(_localctx);
/* 4388 */         this._ctx = _localctx;
/* 4389 */         _prevctx = _localctx;
/* 4390 */         setState(615);booleanValue();
/*      */         
/* 4392 */         break;
/*      */       
/*      */ 
/*      */       case 6: 
/* 4396 */         _localctx = new StringLiteralContext(_localctx);
/* 4397 */         this._ctx = _localctx;
/* 4398 */         _prevctx = _localctx;
/* 4399 */         setState(616);match(145);
/*      */         
/* 4401 */         break;
/*      */       
/*      */ 
/*      */       case 7: 
/* 4405 */         _localctx = new RowConstructorContext(_localctx);
/* 4406 */         this._ctx = _localctx;
/* 4407 */         _prevctx = _localctx;
/* 4408 */         setState(617);match(6);
/* 4409 */         setState(618);expression();
/* 4410 */         setState(621);
/* 4411 */         this._errHandler.sync(this);
/* 4412 */         _la = this._input.LA(1);
/*      */         
/*      */         do
/*      */         {
/* 4416 */           setState(619);match(4);
/* 4417 */           setState(620);expression();
/*      */           
/*      */ 
/* 4420 */           setState(623);
/* 4421 */           this._errHandler.sync(this);
/* 4422 */           _la = this._input.LA(1);
/* 4423 */         } while (_la == 4);
/* 4424 */         setState(625);match(3);
/*      */         
/* 4426 */         break;
/*      */       
/*      */ 
/*      */       case 8: 
/* 4430 */         _localctx = new RowConstructorContext(_localctx);
/* 4431 */         this._ctx = _localctx;
/* 4432 */         _prevctx = _localctx;
/* 4433 */         setState(627);match(82);
/* 4434 */         setState(628);match(6);
/* 4435 */         setState(629);expression();
/* 4436 */         setState(634);
/* 4437 */         this._errHandler.sync(this);
/* 4438 */         _la = this._input.LA(1);
/* 4439 */         while (_la == 4)
/*      */         {
/*      */ 
/* 4442 */           setState(630);match(4);
/* 4443 */           setState(631);expression();
/*      */           
/*      */ 
/* 4446 */           setState(636);
/* 4447 */           this._errHandler.sync(this);
/* 4448 */           _la = this._input.LA(1);
/*      */         }
/* 4450 */         setState(637);match(3);
/*      */         
/* 4452 */         break;
/*      */       
/*      */ 
/*      */       case 9: 
/* 4456 */         _localctx = new ColumnReferenceContext(_localctx);
/* 4457 */         this._ctx = _localctx;
/* 4458 */         _prevctx = _localctx;
/* 4459 */         setState(639);qualifiedName();
/*      */         
/* 4461 */         break;
/*      */       
/*      */ 
/*      */       case 10: 
/* 4465 */         _localctx = new FunctionCallContext(_localctx);
/* 4466 */         this._ctx = _localctx;
/* 4467 */         _prevctx = _localctx;
/* 4468 */         setState(640);qualifiedName();
/* 4469 */         setState(641);match(6);
/* 4470 */         setState(642);match(141);
/* 4471 */         setState(643);match(3);
/* 4472 */         setState(645);
/* 4473 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 75, this._ctx))
/*      */         {
/*      */         case 1: 
/* 4476 */           setState(644);over();
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 4481 */         break;
/*      */       
/*      */ 
/*      */       case 11: 
/* 4485 */         _localctx = new FunctionCallContext(_localctx);
/* 4486 */         this._ctx = _localctx;
/* 4487 */         _prevctx = _localctx;
/* 4488 */         setState(647);qualifiedName();
/* 4489 */         setState(648);match(6);
/* 4490 */         setState(660);
/* 4491 */         _la = this._input.LA(1);
/* 4492 */         if ((((_la & 0xFFFFFFC0) == 0) && ((1L << _la & 0xFEFFD038C702440) != 0L)) || (((_la - 74 & 0xFFFFFFC0) == 0) && ((1L << _la - 74 & 0x7F0FC3FFFF0C1EF) != 0L)) || (((_la - 139 & 0xFFFFFFC0) == 0) && ((1L << _la - 139 & 0x1FC3) != 0L)))
/*      */         {
/* 4494 */           setState(650);
/* 4495 */           _la = this._input.LA(1);
/* 4496 */           if ((_la == 10) || (_la == 13))
/*      */           {
/* 4498 */             setState(649);setQuantifier();
/*      */           }
/*      */           
/*      */ 
/* 4502 */           setState(652);expression();
/* 4503 */           setState(657);
/* 4504 */           this._errHandler.sync(this);
/* 4505 */           _la = this._input.LA(1);
/* 4506 */           while (_la == 4)
/*      */           {
/*      */ 
/* 4509 */             setState(653);match(4);
/* 4510 */             setState(654);expression();
/*      */             
/*      */ 
/* 4513 */             setState(659);
/* 4514 */             this._errHandler.sync(this);
/* 4515 */             _la = this._input.LA(1);
/*      */           }
/*      */         }
/*      */         
/*      */ 
/* 4520 */         setState(662);match(3);
/* 4521 */         setState(664);
/* 4522 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 79, this._ctx))
/*      */         {
/*      */         case 1: 
/* 4525 */           setState(663);over();
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 4530 */         break;
/*      */       
/*      */ 
/*      */       case 12: 
/* 4534 */         _localctx = new SubqueryExpressionContext(_localctx);
/* 4535 */         this._ctx = _localctx;
/* 4536 */         _prevctx = _localctx;
/* 4537 */         setState(666);match(6);
/* 4538 */         setState(667);query();
/* 4539 */         setState(668);match(3);
/*      */         
/* 4541 */         break;
/*      */       
/*      */ 
/*      */       case 13: 
/* 4545 */         _localctx = new SimpleCaseContext(_localctx);
/* 4546 */         this._ctx = _localctx;
/* 4547 */         _prevctx = _localctx;
/* 4548 */         setState(670);match(59);
/* 4549 */         setState(671);valueExpression(0);
/* 4550 */         setState(673);
/* 4551 */         this._errHandler.sync(this);
/* 4552 */         _la = this._input.LA(1);
/*      */         
/*      */         do
/*      */         {
/* 4556 */           setState(672);whenClause();
/*      */           
/*      */ 
/* 4559 */           setState(675);
/* 4560 */           this._errHandler.sync(this);
/* 4561 */           _la = this._input.LA(1);
/* 4562 */         } while (_la == 60);
/* 4563 */         setState(679);
/* 4564 */         _la = this._input.LA(1);
/* 4565 */         if (_la == 62)
/*      */         {
/* 4567 */           setState(677);match(62);
/* 4568 */           setState(678);((SimpleCaseContext)_localctx).elseExpression = expression();
/*      */         }
/*      */         
/*      */ 
/* 4572 */         setState(681);match(63);
/*      */         
/* 4574 */         break;
/*      */       
/*      */ 
/*      */       case 14: 
/* 4578 */         _localctx = new SearchedCaseContext(_localctx);
/* 4579 */         this._ctx = _localctx;
/* 4580 */         _prevctx = _localctx;
/* 4581 */         setState(683);match(59);
/* 4582 */         setState(685);
/* 4583 */         this._errHandler.sync(this);
/* 4584 */         _la = this._input.LA(1);
/*      */         
/*      */         do
/*      */         {
/* 4588 */           setState(684);whenClause();
/*      */           
/*      */ 
/* 4591 */           setState(687);
/* 4592 */           this._errHandler.sync(this);
/* 4593 */           _la = this._input.LA(1);
/* 4594 */         } while (_la == 60);
/* 4595 */         setState(691);
/* 4596 */         _la = this._input.LA(1);
/* 4597 */         if (_la == 62)
/*      */         {
/* 4599 */           setState(689);match(62);
/* 4600 */           setState(690);((SearchedCaseContext)_localctx).elseExpression = expression();
/*      */         }
/*      */         
/*      */ 
/* 4604 */         setState(693);match(63);
/*      */         
/* 4606 */         break;
/*      */       
/*      */ 
/*      */       case 15: 
/* 4610 */         _localctx = new CastContext(_localctx);
/* 4611 */         this._ctx = _localctx;
/* 4612 */         _prevctx = _localctx;
/* 4613 */         setState(695);match(102);
/* 4614 */         setState(696);match(6);
/* 4615 */         setState(697);expression();
/* 4616 */         setState(698);match(9);
/* 4617 */         setState(699);type(0);
/* 4618 */         setState(700);match(3);
/*      */         
/* 4620 */         break;
/*      */       
/*      */ 
/*      */       case 16: 
/* 4624 */         _localctx = new CastContext(_localctx);
/* 4625 */         this._ctx = _localctx;
/* 4626 */         _prevctx = _localctx;
/* 4627 */         setState(702);match(103);
/* 4628 */         setState(703);match(6);
/* 4629 */         setState(704);expression();
/* 4630 */         setState(705);match(9);
/* 4631 */         setState(706);type(0);
/* 4632 */         setState(707);match(3);
/*      */         
/* 4634 */         break;
/*      */       
/*      */ 
/*      */       case 17: 
/* 4638 */         _localctx = new ArrayConstructorContext(_localctx);
/* 4639 */         this._ctx = _localctx;
/* 4640 */         _prevctx = _localctx;
/* 4641 */         setState(709);match(126);
/* 4642 */         setState(710);match(5);
/* 4643 */         setState(719);
/* 4644 */         _la = this._input.LA(1);
/* 4645 */         if ((((_la & 0xFFFFFFC0) == 0) && ((1L << _la & 0xFEFFD038C700040) != 0L)) || (((_la - 74 & 0xFFFFFFC0) == 0) && ((1L << _la - 74 & 0x7F0FC3FFFF0C1EF) != 0L)) || (((_la - 139 & 0xFFFFFFC0) == 0) && ((1L << _la - 139 & 0x1FC3) != 0L)))
/*      */         {
/* 4647 */           setState(711);expression();
/* 4648 */           setState(716);
/* 4649 */           this._errHandler.sync(this);
/* 4650 */           _la = this._input.LA(1);
/* 4651 */           while (_la == 4)
/*      */           {
/*      */ 
/* 4654 */             setState(712);match(4);
/* 4655 */             setState(713);expression();
/*      */             
/*      */ 
/* 4658 */             setState(718);
/* 4659 */             this._errHandler.sync(this);
/* 4660 */             _la = this._input.LA(1);
/*      */           }
/*      */         }
/*      */         
/*      */ 
/* 4665 */         setState(721);match(1);
/*      */         
/* 4667 */         break;
/*      */       
/*      */ 
/*      */       case 18: 
/* 4671 */         _localctx = new SpecialDateTimeFunctionContext(_localctx);
/* 4672 */         this._ctx = _localctx;
/* 4673 */         _prevctx = _localctx;
/* 4674 */         setState(722);((SpecialDateTimeFunctionContext)_localctx).name = match(53);
/*      */         
/* 4676 */         break;
/*      */       
/*      */ 
/*      */       case 19: 
/* 4680 */         _localctx = new SpecialDateTimeFunctionContext(_localctx);
/* 4681 */         this._ctx = _localctx;
/* 4682 */         _prevctx = _localctx;
/* 4683 */         setState(723);((SpecialDateTimeFunctionContext)_localctx).name = match(54);
/* 4684 */         setState(727);
/* 4685 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 86, this._ctx))
/*      */         {
/*      */         case 1: 
/* 4688 */           setState(724);match(6);
/* 4689 */           setState(725);((SpecialDateTimeFunctionContext)_localctx).precision = match(146);
/* 4690 */           setState(726);match(3);
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 4695 */         break;
/*      */       
/*      */ 
/*      */       case 20: 
/* 4699 */         _localctx = new SpecialDateTimeFunctionContext(_localctx);
/* 4700 */         this._ctx = _localctx;
/* 4701 */         _prevctx = _localctx;
/* 4702 */         setState(729);((SpecialDateTimeFunctionContext)_localctx).name = match(55);
/* 4703 */         setState(733);
/* 4704 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 87, this._ctx))
/*      */         {
/*      */         case 1: 
/* 4707 */           setState(730);match(6);
/* 4708 */           setState(731);((SpecialDateTimeFunctionContext)_localctx).precision = match(146);
/* 4709 */           setState(732);match(3);
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 4714 */         break;
/*      */       
/*      */ 
/*      */       case 21: 
/* 4718 */         _localctx = new SpecialDateTimeFunctionContext(_localctx);
/* 4719 */         this._ctx = _localctx;
/* 4720 */         _prevctx = _localctx;
/* 4721 */         setState(735);((SpecialDateTimeFunctionContext)_localctx).name = match(56);
/* 4722 */         setState(739);
/* 4723 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 88, this._ctx))
/*      */         {
/*      */         case 1: 
/* 4726 */           setState(736);match(6);
/* 4727 */           setState(737);((SpecialDateTimeFunctionContext)_localctx).precision = match(146);
/* 4728 */           setState(738);match(3);
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 4733 */         break;
/*      */       
/*      */ 
/*      */       case 22: 
/* 4737 */         _localctx = new SpecialDateTimeFunctionContext(_localctx);
/* 4738 */         this._ctx = _localctx;
/* 4739 */         _prevctx = _localctx;
/* 4740 */         setState(741);((SpecialDateTimeFunctionContext)_localctx).name = match(57);
/* 4741 */         setState(745);
/* 4742 */         switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 89, this._ctx))
/*      */         {
/*      */         case 1: 
/* 4745 */           setState(742);match(6);
/* 4746 */           setState(743);((SpecialDateTimeFunctionContext)_localctx).precision = match(146);
/* 4747 */           setState(744);match(3);
/*      */         }
/*      */         
/*      */         
/*      */ 
/* 4752 */         break;
/*      */       
/*      */ 
/*      */       case 23: 
/* 4756 */         _localctx = new SubstringContext(_localctx);
/* 4757 */         this._ctx = _localctx;
/* 4758 */         _prevctx = _localctx;
/* 4759 */         setState(747);match(40);
/* 4760 */         setState(748);match(6);
/* 4761 */         setState(749);valueExpression(0);
/* 4762 */         setState(750);match(8);
/* 4763 */         setState(751);valueExpression(0);
/* 4764 */         setState(754);
/* 4765 */         _la = this._input.LA(1);
/* 4766 */         if (_la == 41)
/*      */         {
/* 4768 */           setState(752);match(41);
/* 4769 */           setState(753);valueExpression(0);
/*      */         }
/*      */         
/*      */ 
/* 4773 */         setState(756);match(3);
/*      */         
/* 4775 */         break;
/*      */       
/*      */ 
/*      */       case 24: 
/* 4779 */         _localctx = new ExtractContext(_localctx);
/* 4780 */         this._ctx = _localctx;
/* 4781 */         _prevctx = _localctx;
/* 4782 */         setState(758);match(58);
/* 4783 */         setState(759);match(6);
/* 4784 */         setState(760);identifier();
/* 4785 */         setState(761);match(8);
/* 4786 */         setState(762);valueExpression(0);
/* 4787 */         setState(763);match(3);
/*      */         
/* 4789 */         break;
/*      */       
/*      */ 
/*      */       case 25: 
/* 4793 */         _localctx = new ParenthesizedExpressionContext(_localctx);
/* 4794 */         this._ctx = _localctx;
/* 4795 */         _prevctx = _localctx;
/* 4796 */         setState(765);match(6);
/* 4797 */         setState(766);expression();
/* 4798 */         setState(767);match(3);
/*      */       }
/*      */       
/*      */       
/* 4802 */       this._ctx.stop = this._input.LT(-1);
/* 4803 */       setState(778);
/* 4804 */       this._errHandler.sync(this);
/* 4805 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 92, this._ctx);
/* 4806 */       while ((_alt != 2) && (_alt != 0)) {
/* 4807 */         if (_alt == 1) {
/* 4808 */           if (this._parseListeners != null) triggerExitRuleEvent();
/* 4809 */           _prevctx = _localctx;
/*      */           
/*      */ 
/* 4812 */           _localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
/* 4813 */           ((SubscriptContext)_localctx).value = _prevctx;
/* 4814 */           pushNewRecursionContext(_localctx, _startState, 26);
/* 4815 */           setState(771);
/* 4816 */           if (!precpred(this._ctx, 9)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 9)");
/* 4817 */           setState(772);match(5);
/* 4818 */           setState(773);((SubscriptContext)_localctx).index = valueExpression(0);
/* 4819 */           setState(774);match(1);
/*      */         }
/*      */         
/*      */ 
/* 4823 */         setState(780);
/* 4824 */         this._errHandler.sync(this);
/* 4825 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 92, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 4830 */       _localctx.exception = re;
/* 4831 */       this._errHandler.reportError(this, re);
/* 4832 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 4835 */       unrollRecursionContexts(_parentctx);
/*      */     }
/* 4837 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class TimeZoneSpecifierContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 4842 */     public TimeZoneSpecifierContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 4844 */     public int getRuleIndex() { return 27; }
/*      */     
/*      */     public TimeZoneSpecifierContext() {}
/*      */     
/* 4848 */     public void copyFrom(TimeZoneSpecifierContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class TimeZoneStringContext extends SqlBaseParser.TimeZoneSpecifierContext {
/* 4852 */     public org.antlr.v4.runtime.tree.TerminalNode TIME() { return getToken(43, 0); }
/* 4853 */     public org.antlr.v4.runtime.tree.TerminalNode ZONE() { return getToken(52, 0); }
/* 4854 */     public org.antlr.v4.runtime.tree.TerminalNode STRING() { return getToken(145, 0); }
/* 4855 */     public TimeZoneStringContext(SqlBaseParser.TimeZoneSpecifierContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4858 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterTimeZoneString(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4862 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitTimeZoneString(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4866 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitTimeZoneString(this);
/* 4867 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 4871 */   public static class TimeZoneIntervalContext extends SqlBaseParser.TimeZoneSpecifierContext { public org.antlr.v4.runtime.tree.TerminalNode TIME() { return getToken(43, 0); }
/* 4872 */     public org.antlr.v4.runtime.tree.TerminalNode ZONE() { return getToken(52, 0); }
/*      */     
/* 4874 */     public SqlBaseParser.IntervalContext interval() { return (SqlBaseParser.IntervalContext)getRuleContext(SqlBaseParser.IntervalContext.class, 0); }
/*      */     
/* 4876 */     public TimeZoneIntervalContext(SqlBaseParser.TimeZoneSpecifierContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4879 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterTimeZoneInterval(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4883 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitTimeZoneInterval(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4887 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitTimeZoneInterval(this);
/* 4888 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final TimeZoneSpecifierContext timeZoneSpecifier() throws org.antlr.v4.runtime.RecognitionException {
/* 4893 */     TimeZoneSpecifierContext _localctx = new TimeZoneSpecifierContext(this._ctx, getState());
/* 4894 */     enterRule(_localctx, 54, 27);
/*      */     try {
/* 4896 */       setState(787);
/* 4897 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 93, this._ctx)) {
/*      */       case 1: 
/* 4899 */         _localctx = new TimeZoneIntervalContext(_localctx);
/* 4900 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 4902 */         setState(781);match(43);
/* 4903 */         setState(782);match(52);
/* 4904 */         setState(783);interval();
/*      */         
/* 4906 */         break;
/*      */       
/*      */       case 2: 
/* 4909 */         _localctx = new TimeZoneStringContext(_localctx);
/* 4910 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 4912 */         setState(784);match(43);
/* 4913 */         setState(785);match(52);
/* 4914 */         setState(786);match(145);
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 4920 */       _localctx.exception = re;
/* 4921 */       this._errHandler.reportError(this, re);
/* 4922 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 4925 */       exitRule();
/*      */     }
/* 4927 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class ComparisonOperatorContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 4931 */     public org.antlr.v4.runtime.tree.TerminalNode NEQ() { return getToken(134, 0); }
/* 4932 */     public org.antlr.v4.runtime.tree.TerminalNode GTE() { return getToken(138, 0); }
/* 4933 */     public org.antlr.v4.runtime.tree.TerminalNode LT() { return getToken(135, 0); }
/* 4934 */     public org.antlr.v4.runtime.tree.TerminalNode LTE() { return getToken(136, 0); }
/* 4935 */     public org.antlr.v4.runtime.tree.TerminalNode GT() { return getToken(137, 0); }
/* 4936 */     public org.antlr.v4.runtime.tree.TerminalNode EQ() { return getToken(133, 0); }
/*      */     
/* 4938 */     public ComparisonOperatorContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 4940 */     public int getRuleIndex() { return 28; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4943 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterComparisonOperator(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4947 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitComparisonOperator(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4951 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitComparisonOperator(this);
/* 4952 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final ComparisonOperatorContext comparisonOperator() throws org.antlr.v4.runtime.RecognitionException {
/* 4957 */     ComparisonOperatorContext _localctx = new ComparisonOperatorContext(this._ctx, getState());
/* 4958 */     enterRule(_localctx, 56, 28);
/*      */     try
/*      */     {
/* 4961 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 4963 */       setState(789);
/* 4964 */       int _la = this._input.LA(1);
/* 4965 */       if (((_la - 133 & 0xFFFFFFC0) != 0) || ((1L << _la - 133 & 0x3F) == 0L)) {
/* 4966 */         this._errHandler.recoverInline(this);
/*      */       }
/* 4968 */       consume();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 4972 */       _localctx.exception = re;
/* 4973 */       this._errHandler.reportError(this, re);
/* 4974 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 4977 */       exitRule();
/*      */     }
/* 4979 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class BooleanValueContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 4983 */     public org.antlr.v4.runtime.tree.TerminalNode TRUE() { return getToken(32, 0); }
/* 4984 */     public org.antlr.v4.runtime.tree.TerminalNode FALSE() { return getToken(33, 0); }
/*      */     
/* 4986 */     public BooleanValueContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 4988 */     public int getRuleIndex() { return 29; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 4991 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterBooleanValue(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 4995 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitBooleanValue(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 4999 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitBooleanValue(this);
/* 5000 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final BooleanValueContext booleanValue() throws org.antlr.v4.runtime.RecognitionException {
/* 5005 */     BooleanValueContext _localctx = new BooleanValueContext(this._ctx, getState());
/* 5006 */     enterRule(_localctx, 58, 29);
/*      */     try
/*      */     {
/* 5009 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5011 */       setState(791);
/* 5012 */       int _la = this._input.LA(1);
/* 5013 */       if ((_la != 32) && (_la != 33)) {
/* 5014 */         this._errHandler.recoverInline(this);
/*      */       }
/* 5016 */       consume();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5020 */       _localctx.exception = re;
/* 5021 */       this._errHandler.reportError(this, re);
/* 5022 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5025 */       exitRule();
/*      */     }
/* 5027 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class IntervalContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public org.antlr.v4.runtime.Token sign;
/*      */     public SqlBaseParser.IntervalFieldContext from;
/*      */     public SqlBaseParser.IntervalFieldContext to;
/*      */     
/* 5035 */     public java.util.List<SqlBaseParser.IntervalFieldContext> intervalField() { return getRuleContexts(SqlBaseParser.IntervalFieldContext.class); }
/*      */     
/* 5037 */     public org.antlr.v4.runtime.tree.TerminalNode MINUS() { return getToken(140, 0); }
/* 5038 */     public org.antlr.v4.runtime.tree.TerminalNode PLUS() { return getToken(139, 0); }
/*      */     
/* 5040 */     public SqlBaseParser.IntervalFieldContext intervalField(int i) { return (SqlBaseParser.IntervalFieldContext)getRuleContext(SqlBaseParser.IntervalFieldContext.class, i); }
/*      */     
/* 5042 */     public org.antlr.v4.runtime.tree.TerminalNode TO() { return getToken(116, 0); }
/* 5043 */     public org.antlr.v4.runtime.tree.TerminalNode STRING() { return getToken(145, 0); }
/* 5044 */     public org.antlr.v4.runtime.tree.TerminalNode INTERVAL() { return getToken(45, 0); }
/*      */     
/* 5046 */     public IntervalContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5048 */     public int getRuleIndex() { return 30; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5051 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterInterval(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5055 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitInterval(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5059 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitInterval(this);
/* 5060 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final IntervalContext interval() throws org.antlr.v4.runtime.RecognitionException {
/* 5065 */     IntervalContext _localctx = new IntervalContext(this._ctx, getState());
/* 5066 */     enterRule(_localctx, 60, 30);
/*      */     try
/*      */     {
/* 5069 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5071 */       setState(793);match(45);
/* 5072 */       setState(795);
/* 5073 */       int _la = this._input.LA(1);
/* 5074 */       if ((_la == 139) || (_la == 140))
/*      */       {
/* 5076 */         setState(794);
/* 5077 */         _localctx.sign = this._input.LT(1);
/* 5078 */         _la = this._input.LA(1);
/* 5079 */         if ((_la != 139) && (_la != 140)) {
/* 5080 */           _localctx.sign = this._errHandler.recoverInline(this);
/*      */         }
/* 5082 */         consume();
/*      */       }
/*      */       
/*      */ 
/* 5086 */       setState(797);match(145);
/* 5087 */       setState(798);_localctx.from = intervalField();
/* 5088 */       setState(801);
/* 5089 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 95, this._ctx))
/*      */       {
/*      */       case 1: 
/* 5092 */         setState(799);match(116);
/* 5093 */         setState(800);_localctx.to = intervalField();
/*      */       
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5100 */       _localctx.exception = re;
/* 5101 */       this._errHandler.reportError(this, re);
/* 5102 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5105 */       exitRule();
/*      */     }
/* 5107 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class IntervalFieldContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 5111 */     public org.antlr.v4.runtime.tree.TerminalNode YEAR() { return getToken(46, 0); }
/* 5112 */     public org.antlr.v4.runtime.tree.TerminalNode MONTH() { return getToken(47, 0); }
/* 5113 */     public org.antlr.v4.runtime.tree.TerminalNode HOUR() { return getToken(49, 0); }
/* 5114 */     public org.antlr.v4.runtime.tree.TerminalNode SECOND() { return getToken(51, 0); }
/* 5115 */     public org.antlr.v4.runtime.tree.TerminalNode DAY() { return getToken(48, 0); }
/* 5116 */     public org.antlr.v4.runtime.tree.TerminalNode MINUTE() { return getToken(50, 0); }
/*      */     
/* 5118 */     public IntervalFieldContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5120 */     public int getRuleIndex() { return 31; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5123 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterIntervalField(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5127 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitIntervalField(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5131 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitIntervalField(this);
/* 5132 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final IntervalFieldContext intervalField() throws org.antlr.v4.runtime.RecognitionException {
/* 5137 */     IntervalFieldContext _localctx = new IntervalFieldContext(this._ctx, getState());
/* 5138 */     enterRule(_localctx, 62, 31);
/*      */     try
/*      */     {
/* 5141 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5143 */       setState(803);
/* 5144 */       int _la = this._input.LA(1);
/* 5145 */       if (((_la & 0xFFFFFFC0) != 0) || ((1L << _la & 0xFC00000000000) == 0L)) {
/* 5146 */         this._errHandler.recoverInline(this);
/*      */       }
/* 5148 */       consume();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5152 */       _localctx.exception = re;
/* 5153 */       this._errHandler.reportError(this, re);
/* 5154 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5157 */       exitRule();
/*      */     }
/* 5159 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class TypeContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.SimpleTypeContext simpleType() {
/* 5164 */       return (SqlBaseParser.SimpleTypeContext)getRuleContext(SqlBaseParser.SimpleTypeContext.class, 0);
/*      */     }
/*      */     
/* 5167 */     public TypeContext type() { return (TypeContext)getRuleContext(TypeContext.class, 0); }
/*      */     
/* 5169 */     public org.antlr.v4.runtime.tree.TerminalNode ARRAY() { return getToken(126, 0); }
/*      */     
/* 5171 */     public TypeContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5173 */     public int getRuleIndex() { return 32; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5176 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterType(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5180 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitType(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5184 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitType(this);
/* 5185 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final TypeContext type() throws org.antlr.v4.runtime.RecognitionException {
/* 5190 */     return type(0);
/*      */   }
/*      */   
/*      */   private TypeContext type(int _p) throws org.antlr.v4.runtime.RecognitionException {
/* 5194 */     org.antlr.v4.runtime.ParserRuleContext _parentctx = this._ctx;
/* 5195 */     int _parentState = getState();
/* 5196 */     TypeContext _localctx = new TypeContext(this._ctx, _parentState);
/* 5197 */     TypeContext _prevctx = _localctx;
/* 5198 */     int _startState = 64;
/* 5199 */     enterRecursionRule(_localctx, 64, 32, _p);
/*      */     try
/*      */     {
/* 5202 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5204 */       setState(812);
/* 5205 */       switch (this._input.LA(1))
/*      */       {
/*      */       case 126: 
/* 5208 */         setState(806);match(126);
/* 5209 */         setState(807);match(135);
/* 5210 */         setState(808);type(0);
/* 5211 */         setState(809);match(137);
/*      */         
/* 5213 */         break;
/*      */       
/*      */       case 20: 
/*      */       case 21: 
/*      */       case 22: 
/*      */       case 42: 
/*      */       case 43: 
/*      */       case 44: 
/*      */       case 45: 
/*      */       case 46: 
/*      */       case 47: 
/*      */       case 48: 
/*      */       case 49: 
/*      */       case 50: 
/*      */       case 51: 
/*      */       case 74: 
/*      */       case 75: 
/*      */       case 76: 
/*      */       case 77: 
/*      */       case 79: 
/*      */       case 80: 
/*      */       case 81: 
/*      */       case 82: 
/*      */       case 88: 
/*      */       case 89: 
/*      */       case 94: 
/*      */       case 95: 
/*      */       case 96: 
/*      */       case 97: 
/*      */       case 98: 
/*      */       case 99: 
/*      */       case 100: 
/*      */       case 101: 
/*      */       case 104: 
/*      */       case 105: 
/*      */       case 106: 
/*      */       case 107: 
/*      */       case 108: 
/*      */       case 109: 
/*      */       case 110: 
/*      */       case 111: 
/*      */       case 116: 
/*      */       case 117: 
/*      */       case 118: 
/*      */       case 119: 
/*      */       case 120: 
/*      */       case 121: 
/*      */       case 127: 
/*      */       case 128: 
/*      */       case 129: 
/*      */       case 130: 
/*      */       case 131: 
/*      */       case 132: 
/*      */       case 148: 
/*      */       case 149: 
/*      */       case 150: 
/*      */       case 151: 
/*      */       case 152: 
/*      */       case 153: 
/* 5272 */         setState(811);simpleType();
/*      */         
/* 5274 */         break;
/*      */       case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 78: case 83: case 84: case 85: case 86: case 87: case 90: case 91: case 92: case 93: case 102: case 103: case 112: case 113: case 114: case 115: case 122: case 123: case 124: case 125: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: default: 
/* 5276 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/* 5278 */       this._ctx.stop = this._input.LT(-1);
/* 5279 */       setState(818);
/* 5280 */       this._errHandler.sync(this);
/* 5281 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 97, this._ctx);
/* 5282 */       while ((_alt != 2) && (_alt != 0)) {
/* 5283 */         if (_alt == 1) {
/* 5284 */           if (this._parseListeners != null) triggerExitRuleEvent();
/* 5285 */           _prevctx = _localctx;
/*      */           
/*      */ 
/* 5288 */           _localctx = new TypeContext(_parentctx, _parentState);
/* 5289 */           pushNewRecursionContext(_localctx, _startState, 32);
/* 5290 */           setState(814);
/* 5291 */           if (!precpred(this._ctx, 3)) throw new org.antlr.v4.runtime.FailedPredicateException(this, "precpred(_ctx, 3)");
/* 5292 */           setState(815);match(126);
/*      */         }
/*      */         
/*      */ 
/* 5296 */         setState(820);
/* 5297 */         this._errHandler.sync(this);
/* 5298 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 97, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5303 */       _localctx.exception = re;
/* 5304 */       this._errHandler.reportError(this, re);
/* 5305 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5308 */       unrollRecursionContexts(_parentctx);
/*      */     }
/* 5310 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class SimpleTypeContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 5314 */     public org.antlr.v4.runtime.tree.TerminalNode TIME_WITH_TIME_ZONE() { return getToken(152, 0); }
/*      */     
/* 5316 */     public SqlBaseParser.IdentifierContext identifier() { return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, 0); }
/*      */     
/* 5318 */     public org.antlr.v4.runtime.tree.TerminalNode TIMESTAMP_WITH_TIME_ZONE() { return getToken(153, 0); }
/*      */     
/* 5320 */     public SimpleTypeContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5322 */     public int getRuleIndex() { return 33; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5325 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterSimpleType(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5329 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitSimpleType(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5333 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitSimpleType(this);
/* 5334 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final SimpleTypeContext simpleType() throws org.antlr.v4.runtime.RecognitionException {
/* 5339 */     SimpleTypeContext _localctx = new SimpleTypeContext(this._ctx, getState());
/* 5340 */     enterRule(_localctx, 66, 33);
/*      */     try {
/* 5342 */       setState(824);
/* 5343 */       switch (this._input.LA(1)) {
/*      */       case 152: 
/* 5345 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 5347 */         setState(821);match(152);
/*      */         
/* 5349 */         break;
/*      */       case 153: 
/* 5351 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 5353 */         setState(822);match(153);
/*      */         
/* 5355 */         break;
/*      */       case 20: 
/*      */       case 21: 
/*      */       case 22: 
/*      */       case 42: 
/*      */       case 43: 
/*      */       case 44: 
/*      */       case 45: 
/*      */       case 46: 
/*      */       case 47: 
/*      */       case 48: 
/*      */       case 49: 
/*      */       case 50: 
/*      */       case 51: 
/*      */       case 74: 
/*      */       case 75: 
/*      */       case 76: 
/*      */       case 77: 
/*      */       case 79: 
/*      */       case 80: 
/*      */       case 81: 
/*      */       case 82: 
/*      */       case 88: 
/*      */       case 89: 
/*      */       case 94: 
/*      */       case 95: 
/*      */       case 96: 
/*      */       case 97: 
/*      */       case 98: 
/*      */       case 99: 
/*      */       case 100: 
/*      */       case 101: 
/*      */       case 104: 
/*      */       case 105: 
/*      */       case 106: 
/*      */       case 107: 
/*      */       case 108: 
/*      */       case 109: 
/*      */       case 110: 
/*      */       case 111: 
/*      */       case 116: 
/*      */       case 117: 
/*      */       case 118: 
/*      */       case 119: 
/*      */       case 120: 
/*      */       case 121: 
/*      */       case 127: 
/*      */       case 128: 
/*      */       case 129: 
/*      */       case 130: 
/*      */       case 131: 
/*      */       case 132: 
/*      */       case 148: 
/*      */       case 149: 
/*      */       case 150: 
/*      */       case 151: 
/* 5411 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 5413 */         setState(823);identifier();
/*      */         
/* 5415 */         break;
/*      */       case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 78: case 83: case 84: case 85: case 86: case 87: case 90: case 91: case 92: case 93: case 102: case 103: case 112: case 113: case 114: case 115: case 122: case 123: case 124: case 125: case 126: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: default: 
/* 5417 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re) {
/* 5421 */       _localctx.exception = re;
/* 5422 */       this._errHandler.reportError(this, re);
/* 5423 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5426 */       exitRule();
/*      */     }
/* 5428 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class WhenClauseContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.ExpressionContext condition;
/*      */     public SqlBaseParser.ExpressionContext result;
/*      */     
/* 5435 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/* 5437 */     public org.antlr.v4.runtime.tree.TerminalNode THEN() { return getToken(61, 0); }
/*      */     
/* 5439 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 5441 */     public org.antlr.v4.runtime.tree.TerminalNode WHEN() { return getToken(60, 0); }
/*      */     
/* 5443 */     public WhenClauseContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5445 */     public int getRuleIndex() { return 34; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5448 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterWhenClause(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5452 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitWhenClause(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5456 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitWhenClause(this);
/* 5457 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final WhenClauseContext whenClause() throws org.antlr.v4.runtime.RecognitionException {
/* 5462 */     WhenClauseContext _localctx = new WhenClauseContext(this._ctx, getState());
/* 5463 */     enterRule(_localctx, 68, 34);
/*      */     try {
/* 5465 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5467 */       setState(826);match(60);
/* 5468 */       setState(827);_localctx.condition = expression();
/* 5469 */       setState(828);match(61);
/* 5470 */       setState(829);_localctx.result = expression();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5474 */       _localctx.exception = re;
/* 5475 */       this._errHandler.reportError(this, re);
/* 5476 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5479 */       exitRule();
/*      */     }
/* 5481 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class OverContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.ExpressionContext expression;
/* 5486 */     public java.util.List<SqlBaseParser.ExpressionContext> partition = new java.util.ArrayList();
/*      */     
/* 5488 */     public SqlBaseParser.ExpressionContext expression(int i) { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, i); }
/*      */     
/*      */ 
/* 5491 */     public org.antlr.v4.runtime.tree.TerminalNode BY(int i) { return getToken(16, i); }
/*      */     
/* 5493 */     public org.antlr.v4.runtime.tree.TerminalNode OVER() { return getToken(74, 0); }
/*      */     
/* 5495 */     public SqlBaseParser.WindowFrameContext windowFrame() { return (SqlBaseParser.WindowFrameContext)getRuleContext(SqlBaseParser.WindowFrameContext.class, 0); }
/*      */     
/*      */ 
/* 5498 */     public java.util.List<SqlBaseParser.SortItemContext> sortItem() { return getRuleContexts(SqlBaseParser.SortItemContext.class); }
/*      */     
/* 5500 */     public org.antlr.v4.runtime.tree.TerminalNode ORDER() { return getToken(17, 0); }
/* 5501 */     public java.util.List<org.antlr.v4.runtime.tree.TerminalNode> BY() { return getTokens(16); }
/*      */     
/* 5503 */     public SqlBaseParser.SortItemContext sortItem(int i) { return (SqlBaseParser.SortItemContext)getRuleContext(SqlBaseParser.SortItemContext.class, i); }
/*      */     
/*      */ 
/* 5506 */     public java.util.List<SqlBaseParser.ExpressionContext> expression() { return getRuleContexts(SqlBaseParser.ExpressionContext.class); }
/*      */     
/* 5508 */     public org.antlr.v4.runtime.tree.TerminalNode PARTITION() { return getToken(75, 0); }
/*      */     
/* 5510 */     public OverContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5512 */     public int getRuleIndex() { return 35; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5515 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterOver(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5519 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitOver(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5523 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitOver(this);
/* 5524 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final OverContext over() throws org.antlr.v4.runtime.RecognitionException {
/* 5529 */     OverContext _localctx = new OverContext(this._ctx, getState());
/* 5530 */     enterRule(_localctx, 70, 35);
/*      */     try
/*      */     {
/* 5533 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5535 */       setState(831);match(74);
/* 5536 */       setState(832);match(6);
/* 5537 */       setState(843);
/* 5538 */       int _la = this._input.LA(1);
/* 5539 */       if (_la == 75)
/*      */       {
/* 5541 */         setState(833);match(75);
/* 5542 */         setState(834);match(16);
/* 5543 */         setState(835);_localctx.expression = expression();
/* 5544 */         _localctx.partition.add(_localctx.expression);
/* 5545 */         setState(840);
/* 5546 */         this._errHandler.sync(this);
/* 5547 */         _la = this._input.LA(1);
/* 5548 */         while (_la == 4)
/*      */         {
/*      */ 
/* 5551 */           setState(836);match(4);
/* 5552 */           setState(837);_localctx.expression = expression();
/* 5553 */           _localctx.partition.add(_localctx.expression);
/*      */           
/*      */ 
/* 5556 */           setState(842);
/* 5557 */           this._errHandler.sync(this);
/* 5558 */           _la = this._input.LA(1);
/*      */         }
/*      */       }
/*      */       
/*      */ 
/* 5563 */       setState(855);
/* 5564 */       _la = this._input.LA(1);
/* 5565 */       if (_la == 17)
/*      */       {
/* 5567 */         setState(845);match(17);
/* 5568 */         setState(846);match(16);
/* 5569 */         setState(847);sortItem();
/* 5570 */         setState(852);
/* 5571 */         this._errHandler.sync(this);
/* 5572 */         _la = this._input.LA(1);
/* 5573 */         while (_la == 4)
/*      */         {
/*      */ 
/* 5576 */           setState(848);match(4);
/* 5577 */           setState(849);sortItem();
/*      */           
/*      */ 
/* 5580 */           setState(854);
/* 5581 */           this._errHandler.sync(this);
/* 5582 */           _la = this._input.LA(1);
/*      */         }
/*      */       }
/*      */       
/*      */ 
/* 5587 */       setState(858);
/* 5588 */       _la = this._input.LA(1);
/* 5589 */       if ((_la == 76) || (_la == 77))
/*      */       {
/* 5591 */         setState(857);windowFrame();
/*      */       }
/*      */       
/*      */ 
/* 5595 */       setState(860);match(3);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5599 */       _localctx.exception = re;
/* 5600 */       this._errHandler.reportError(this, re);
/* 5601 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5604 */       exitRule();
/*      */     }
/* 5606 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class WindowFrameContext extends org.antlr.v4.runtime.ParserRuleContext { public org.antlr.v4.runtime.Token frameType;
/*      */     public SqlBaseParser.FrameBoundContext start;
/*      */     public SqlBaseParser.FrameBoundContext end;
/*      */     
/* 5613 */     public org.antlr.v4.runtime.tree.TerminalNode BETWEEN() { return getToken(28, 0); }
/* 5614 */     public org.antlr.v4.runtime.tree.TerminalNode RANGE() { return getToken(76, 0); }
/* 5615 */     public org.antlr.v4.runtime.tree.TerminalNode AND() { return getToken(24, 0); }
/* 5616 */     public org.antlr.v4.runtime.tree.TerminalNode ROWS() { return getToken(77, 0); }
/*      */     
/* 5618 */     public SqlBaseParser.FrameBoundContext frameBound(int i) { return (SqlBaseParser.FrameBoundContext)getRuleContext(SqlBaseParser.FrameBoundContext.class, i); }
/*      */     
/*      */     public java.util.List<SqlBaseParser.FrameBoundContext> frameBound() {
/* 5621 */       return getRuleContexts(SqlBaseParser.FrameBoundContext.class);
/*      */     }
/*      */     
/* 5624 */     public WindowFrameContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5626 */     public int getRuleIndex() { return 36; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5629 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterWindowFrame(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5633 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitWindowFrame(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5637 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitWindowFrame(this);
/* 5638 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final WindowFrameContext windowFrame() throws org.antlr.v4.runtime.RecognitionException {
/* 5643 */     WindowFrameContext _localctx = new WindowFrameContext(this._ctx, getState());
/* 5644 */     enterRule(_localctx, 72, 36);
/*      */     try {
/* 5646 */       setState(878);
/* 5647 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 104, this._ctx)) {
/*      */       case 1: 
/* 5649 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 5651 */         setState(862);_localctx.frameType = match(76);
/* 5652 */         setState(863);_localctx.start = frameBound();
/*      */         
/* 5654 */         break;
/*      */       
/*      */       case 2: 
/* 5657 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 5659 */         setState(864);_localctx.frameType = match(77);
/* 5660 */         setState(865);_localctx.start = frameBound();
/*      */         
/* 5662 */         break;
/*      */       
/*      */       case 3: 
/* 5665 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 5667 */         setState(866);_localctx.frameType = match(76);
/* 5668 */         setState(867);match(28);
/* 5669 */         setState(868);_localctx.start = frameBound();
/* 5670 */         setState(869);match(24);
/* 5671 */         setState(870);_localctx.end = frameBound();
/*      */         
/* 5673 */         break;
/*      */       
/*      */       case 4: 
/* 5676 */         enterOuterAlt(_localctx, 4);
/*      */         
/* 5678 */         setState(872);_localctx.frameType = match(77);
/* 5679 */         setState(873);match(28);
/* 5680 */         setState(874);_localctx.start = frameBound();
/* 5681 */         setState(875);match(24);
/* 5682 */         setState(876);_localctx.end = frameBound();
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5688 */       _localctx.exception = re;
/* 5689 */       this._errHandler.reportError(this, re);
/* 5690 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5693 */       exitRule();
/*      */     }
/* 5695 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class FrameBoundContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 5700 */     public FrameBoundContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5702 */     public int getRuleIndex() { return 37; }
/*      */     
/*      */     public FrameBoundContext() {}
/*      */     
/* 5706 */     public void copyFrom(FrameBoundContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class CurrentRowBoundContext extends SqlBaseParser.FrameBoundContext {
/* 5710 */     public org.antlr.v4.runtime.tree.TerminalNode ROW() { return getToken(82, 0); }
/* 5711 */     public org.antlr.v4.runtime.tree.TerminalNode CURRENT() { return getToken(81, 0); }
/* 5712 */     public CurrentRowBoundContext(SqlBaseParser.FrameBoundContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5715 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterCurrentRowBound(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5719 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitCurrentRowBound(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5723 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitCurrentRowBound(this);
/* 5724 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class UnboundedFrameContext extends SqlBaseParser.FrameBoundContext { public org.antlr.v4.runtime.Token boundType;
/*      */     
/* 5729 */     public org.antlr.v4.runtime.tree.TerminalNode UNBOUNDED() { return getToken(78, 0); }
/* 5730 */     public org.antlr.v4.runtime.tree.TerminalNode PRECEDING() { return getToken(79, 0); }
/* 5731 */     public org.antlr.v4.runtime.tree.TerminalNode FOLLOWING() { return getToken(80, 0); }
/* 5732 */     public UnboundedFrameContext(SqlBaseParser.FrameBoundContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5735 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterUnboundedFrame(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5739 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitUnboundedFrame(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5743 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitUnboundedFrame(this);
/* 5744 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class BoundedFrameContext extends SqlBaseParser.FrameBoundContext { public org.antlr.v4.runtime.Token boundType;
/*      */     
/* 5749 */     public org.antlr.v4.runtime.tree.TerminalNode PRECEDING() { return getToken(79, 0); }
/*      */     
/* 5751 */     public SqlBaseParser.ExpressionContext expression() { return (SqlBaseParser.ExpressionContext)getRuleContext(SqlBaseParser.ExpressionContext.class, 0); }
/*      */     
/* 5753 */     public org.antlr.v4.runtime.tree.TerminalNode FOLLOWING() { return getToken(80, 0); }
/* 5754 */     public BoundedFrameContext(SqlBaseParser.FrameBoundContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5757 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterBoundedFrame(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5761 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitBoundedFrame(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5765 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitBoundedFrame(this);
/* 5766 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final FrameBoundContext frameBound() throws org.antlr.v4.runtime.RecognitionException {
/* 5771 */     FrameBoundContext _localctx = new FrameBoundContext(this._ctx, getState());
/* 5772 */     enterRule(_localctx, 74, 37);
/*      */     try
/*      */     {
/* 5775 */       setState(889);
/* 5776 */       switch (((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 105, this._ctx)) {
/*      */       case 1: 
/* 5778 */         _localctx = new UnboundedFrameContext(_localctx);
/* 5779 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 5781 */         setState(880);match(78);
/* 5782 */         setState(881);((UnboundedFrameContext)_localctx).boundType = match(79);
/*      */         
/* 5784 */         break;
/*      */       
/*      */       case 2: 
/* 5787 */         _localctx = new UnboundedFrameContext(_localctx);
/* 5788 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 5790 */         setState(882);match(78);
/* 5791 */         setState(883);((UnboundedFrameContext)_localctx).boundType = match(80);
/*      */         
/* 5793 */         break;
/*      */       
/*      */       case 3: 
/* 5796 */         _localctx = new CurrentRowBoundContext(_localctx);
/* 5797 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 5799 */         setState(884);match(81);
/* 5800 */         setState(885);match(82);
/*      */         
/* 5802 */         break;
/*      */       
/*      */       case 4: 
/* 5805 */         _localctx = new BoundedFrameContext(_localctx);
/* 5806 */         enterOuterAlt(_localctx, 4);
/*      */         
/* 5808 */         setState(886);expression();
/* 5809 */         setState(887);
/* 5810 */         ((BoundedFrameContext)_localctx).boundType = this._input.LT(1);
/* 5811 */         int _la = this._input.LA(1);
/* 5812 */         if ((_la != 79) && (_la != 80)) {
/* 5813 */           ((BoundedFrameContext)_localctx).boundType = this._errHandler.recoverInline(this);
/*      */         }
/* 5815 */         consume();
/*      */       }
/*      */       
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5821 */       _localctx.exception = re;
/* 5822 */       this._errHandler.reportError(this, re);
/* 5823 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5826 */       exitRule();
/*      */     }
/* 5828 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class ExplainOptionContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 5833 */     public ExplainOptionContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5835 */     public int getRuleIndex() { return 38; }
/*      */     
/*      */     public ExplainOptionContext() {}
/*      */     
/* 5839 */     public void copyFrom(ExplainOptionContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class ExplainFormatContext extends SqlBaseParser.ExplainOptionContext { public org.antlr.v4.runtime.Token value;
/*      */     
/* 5844 */     public org.antlr.v4.runtime.tree.TerminalNode FORMAT() { return getToken(95, 0); }
/* 5845 */     public org.antlr.v4.runtime.tree.TerminalNode TEXT() { return getToken(97, 0); }
/* 5846 */     public org.antlr.v4.runtime.tree.TerminalNode JSON() { return getToken(99, 0); }
/* 5847 */     public org.antlr.v4.runtime.tree.TerminalNode GRAPHVIZ() { return getToken(98, 0); }
/* 5848 */     public ExplainFormatContext(SqlBaseParser.ExplainOptionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5851 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterExplainFormat(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5855 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitExplainFormat(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5859 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitExplainFormat(this);
/* 5860 */       return (T)visitor.visitChildren(this);
/*      */     } }
/*      */   
/*      */   public static class ExplainTypeContext extends SqlBaseParser.ExplainOptionContext { public org.antlr.v4.runtime.Token value;
/*      */     
/* 5865 */     public org.antlr.v4.runtime.tree.TerminalNode DISTRIBUTED() { return getToken(101, 0); }
/* 5866 */     public org.antlr.v4.runtime.tree.TerminalNode LOGICAL() { return getToken(100, 0); }
/* 5867 */     public org.antlr.v4.runtime.tree.TerminalNode TYPE() { return getToken(96, 0); }
/* 5868 */     public ExplainTypeContext(SqlBaseParser.ExplainOptionContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5871 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterExplainType(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5875 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitExplainType(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5879 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitExplainType(this);
/* 5880 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final ExplainOptionContext explainOption() throws org.antlr.v4.runtime.RecognitionException {
/* 5885 */     ExplainOptionContext _localctx = new ExplainOptionContext(this._ctx, getState());
/* 5886 */     enterRule(_localctx, 76, 38);
/*      */     try
/*      */     {
/* 5889 */       setState(895);
/* 5890 */       int _la; switch (this._input.LA(1)) {
/*      */       case 95: 
/* 5892 */         _localctx = new ExplainFormatContext(_localctx);
/* 5893 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 5895 */         setState(891);match(95);
/* 5896 */         setState(892);
/* 5897 */         ((ExplainFormatContext)_localctx).value = this._input.LT(1);
/* 5898 */         _la = this._input.LA(1);
/* 5899 */         if (((_la - 97 & 0xFFFFFFC0) != 0) || ((1L << _la - 97 & 0x7) == 0L)) {
/* 5900 */           ((ExplainFormatContext)_localctx).value = this._errHandler.recoverInline(this);
/*      */         }
/* 5902 */         consume();
/*      */         
/* 5904 */         break;
/*      */       case 96: 
/* 5906 */         _localctx = new ExplainTypeContext(_localctx);
/* 5907 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 5909 */         setState(893);match(96);
/* 5910 */         setState(894);
/* 5911 */         ((ExplainTypeContext)_localctx).value = this._input.LT(1);
/* 5912 */         _la = this._input.LA(1);
/* 5913 */         if ((_la != 100) && (_la != 101)) {
/* 5914 */           ((ExplainTypeContext)_localctx).value = this._errHandler.recoverInline(this);
/*      */         }
/* 5916 */         consume();
/*      */         
/* 5918 */         break;
/*      */       default: 
/* 5920 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re) {
/* 5924 */       _localctx.exception = re;
/* 5925 */       this._errHandler.reportError(this, re);
/* 5926 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5929 */       exitRule();
/*      */     }
/* 5931 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QualifiedNameContext extends org.antlr.v4.runtime.ParserRuleContext {
/*      */     public SqlBaseParser.IdentifierContext identifier(int i) {
/* 5936 */       return (SqlBaseParser.IdentifierContext)getRuleContext(SqlBaseParser.IdentifierContext.class, i);
/*      */     }
/*      */     
/* 5939 */     public java.util.List<SqlBaseParser.IdentifierContext> identifier() { return getRuleContexts(SqlBaseParser.IdentifierContext.class); }
/*      */     
/*      */ 
/* 5942 */     public QualifiedNameContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 5944 */     public int getRuleIndex() { return 39; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 5947 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQualifiedName(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 5951 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQualifiedName(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 5955 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQualifiedName(this);
/* 5956 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QualifiedNameContext qualifiedName() throws org.antlr.v4.runtime.RecognitionException {
/* 5961 */     QualifiedNameContext _localctx = new QualifiedNameContext(this._ctx, getState());
/* 5962 */     enterRule(_localctx, 78, 39);
/*      */     try
/*      */     {
/* 5965 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 5967 */       setState(897);identifier();
/* 5968 */       setState(902);
/* 5969 */       this._errHandler.sync(this);
/* 5970 */       int _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 107, this._ctx);
/* 5971 */       while ((_alt != 2) && (_alt != 0)) {
/* 5972 */         if (_alt == 1)
/*      */         {
/*      */ 
/* 5975 */           setState(898);match(2);
/* 5976 */           setState(899);identifier();
/*      */         }
/*      */         
/*      */ 
/* 5980 */         setState(904);
/* 5981 */         this._errHandler.sync(this);
/* 5982 */         _alt = ((org.antlr.v4.runtime.atn.ParserATNSimulator)getInterpreter()).adaptivePredict(this._input, 107, this._ctx);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 5987 */       _localctx.exception = re;
/* 5988 */       this._errHandler.reportError(this, re);
/* 5989 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 5992 */       exitRule();
/*      */     }
/* 5994 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class IdentifierContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 5999 */     public IdentifierContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 6001 */     public int getRuleIndex() { return 40; }
/*      */     
/*      */     public IdentifierContext() {}
/*      */     
/* 6005 */     public void copyFrom(IdentifierContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class UnquotedIdentifierContext
/*      */     extends SqlBaseParser.IdentifierContext {
/* 6010 */     public SqlBaseParser.NonReservedContext nonReserved() { return (SqlBaseParser.NonReservedContext)getRuleContext(SqlBaseParser.NonReservedContext.class, 0); }
/*      */     
/* 6012 */     public org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() { return getToken(148, 0); }
/* 6013 */     public UnquotedIdentifierContext(SqlBaseParser.IdentifierContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6016 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterUnquotedIdentifier(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6020 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitUnquotedIdentifier(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6024 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitUnquotedIdentifier(this);
/* 6025 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 6029 */   public static class DigitIdentifierContext extends SqlBaseParser.IdentifierContext { public org.antlr.v4.runtime.tree.TerminalNode DIGIT_IDENTIFIER() { return getToken(149, 0); }
/* 6030 */     public DigitIdentifierContext(SqlBaseParser.IdentifierContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6033 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterDigitIdentifier(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6037 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitDigitIdentifier(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6041 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitDigitIdentifier(this);
/* 6042 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public static class QuotedIdentifierAlternativeContext extends SqlBaseParser.IdentifierContext {
/* 6047 */     public SqlBaseParser.QuotedIdentifierContext quotedIdentifier() { return (SqlBaseParser.QuotedIdentifierContext)getRuleContext(SqlBaseParser.QuotedIdentifierContext.class, 0); }
/*      */     
/* 6049 */     public QuotedIdentifierAlternativeContext(SqlBaseParser.IdentifierContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6052 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQuotedIdentifierAlternative(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6056 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQuotedIdentifierAlternative(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6060 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQuotedIdentifierAlternative(this);
/* 6061 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 6065 */   public static class BackQuotedIdentifierContext extends SqlBaseParser.IdentifierContext { public org.antlr.v4.runtime.tree.TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(151, 0); }
/* 6066 */     public BackQuotedIdentifierContext(SqlBaseParser.IdentifierContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6069 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterBackQuotedIdentifier(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6073 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitBackQuotedIdentifier(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6077 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitBackQuotedIdentifier(this);
/* 6078 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final IdentifierContext identifier() throws org.antlr.v4.runtime.RecognitionException {
/* 6083 */     IdentifierContext _localctx = new IdentifierContext(this._ctx, getState());
/* 6084 */     enterRule(_localctx, 80, 40);
/*      */     try {
/* 6086 */       setState(910);
/* 6087 */       switch (this._input.LA(1)) {
/*      */       case 148: 
/* 6089 */         _localctx = new UnquotedIdentifierContext(_localctx);
/* 6090 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 6092 */         setState(905);match(148);
/*      */         
/* 6094 */         break;
/*      */       case 150: 
/* 6096 */         _localctx = new QuotedIdentifierAlternativeContext(_localctx);
/* 6097 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 6099 */         setState(906);quotedIdentifier();
/*      */         
/* 6101 */         break;
/*      */       case 20: 
/*      */       case 21: 
/*      */       case 22: 
/*      */       case 42: 
/*      */       case 43: 
/*      */       case 44: 
/*      */       case 45: 
/*      */       case 46: 
/*      */       case 47: 
/*      */       case 48: 
/*      */       case 49: 
/*      */       case 50: 
/*      */       case 51: 
/*      */       case 74: 
/*      */       case 75: 
/*      */       case 76: 
/*      */       case 77: 
/*      */       case 79: 
/*      */       case 80: 
/*      */       case 81: 
/*      */       case 82: 
/*      */       case 88: 
/*      */       case 89: 
/*      */       case 94: 
/*      */       case 95: 
/*      */       case 96: 
/*      */       case 97: 
/*      */       case 98: 
/*      */       case 99: 
/*      */       case 100: 
/*      */       case 101: 
/*      */       case 104: 
/*      */       case 105: 
/*      */       case 106: 
/*      */       case 107: 
/*      */       case 108: 
/*      */       case 109: 
/*      */       case 110: 
/*      */       case 111: 
/*      */       case 116: 
/*      */       case 117: 
/*      */       case 118: 
/*      */       case 119: 
/*      */       case 120: 
/*      */       case 121: 
/*      */       case 127: 
/*      */       case 128: 
/*      */       case 129: 
/*      */       case 130: 
/*      */       case 131: 
/*      */       case 132: 
/* 6153 */         _localctx = new UnquotedIdentifierContext(_localctx);
/* 6154 */         enterOuterAlt(_localctx, 3);
/*      */         
/* 6156 */         setState(907);nonReserved();
/*      */         
/* 6158 */         break;
/*      */       case 151: 
/* 6160 */         _localctx = new BackQuotedIdentifierContext(_localctx);
/* 6161 */         enterOuterAlt(_localctx, 4);
/*      */         
/* 6163 */         setState(908);match(151);
/*      */         
/* 6165 */         break;
/*      */       case 149: 
/* 6167 */         _localctx = new DigitIdentifierContext(_localctx);
/* 6168 */         enterOuterAlt(_localctx, 5);
/*      */         
/* 6170 */         setState(909);match(149);
/*      */         
/* 6172 */         break;
/*      */       case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 78: case 83: case 84: case 85: case 86: case 87: case 90: case 91: case 92: case 93: case 102: case 103: case 112: case 113: case 114: case 115: case 122: case 123: case 124: case 125: case 126: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: default: 
/* 6174 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re) {
/* 6178 */       _localctx.exception = re;
/* 6179 */       this._errHandler.reportError(this, re);
/* 6180 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 6183 */       exitRule();
/*      */     }
/* 6185 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class QuotedIdentifierContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 6189 */     public org.antlr.v4.runtime.tree.TerminalNode QUOTED_IDENTIFIER() { return getToken(150, 0); }
/*      */     
/* 6191 */     public QuotedIdentifierContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 6193 */     public int getRuleIndex() { return 41; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6196 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterQuotedIdentifier(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6200 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitQuotedIdentifier(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6204 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitQuotedIdentifier(this);
/* 6205 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final QuotedIdentifierContext quotedIdentifier() throws org.antlr.v4.runtime.RecognitionException {
/* 6210 */     QuotedIdentifierContext _localctx = new QuotedIdentifierContext(this._ctx, getState());
/* 6211 */     enterRule(_localctx, 82, 41);
/*      */     try {
/* 6213 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 6215 */       setState(912);match(150);
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 6219 */       _localctx.exception = re;
/* 6220 */       this._errHandler.reportError(this, re);
/* 6221 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 6224 */       exitRule();
/*      */     }
/* 6226 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class NumberContext
/*      */     extends org.antlr.v4.runtime.ParserRuleContext {
/* 6231 */     public NumberContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 6233 */     public int getRuleIndex() { return 42; }
/*      */     
/*      */     public NumberContext() {}
/*      */     
/* 6237 */     public void copyFrom(NumberContext ctx) { super.copyFrom(ctx); }
/*      */   }
/*      */   
/*      */   public static class DecimalLiteralContext extends SqlBaseParser.NumberContext {
/* 6241 */     public org.antlr.v4.runtime.tree.TerminalNode DECIMAL_VALUE() { return getToken(147, 0); }
/* 6242 */     public DecimalLiteralContext(SqlBaseParser.NumberContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6245 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterDecimalLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6249 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitDecimalLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6253 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitDecimalLiteral(this);
/* 6254 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/* 6258 */   public static class IntegerLiteralContext extends SqlBaseParser.NumberContext { public org.antlr.v4.runtime.tree.TerminalNode INTEGER_VALUE() { return getToken(146, 0); }
/* 6259 */     public IntegerLiteralContext(SqlBaseParser.NumberContext ctx) { copyFrom(ctx); }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6262 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterIntegerLiteral(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6266 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitIntegerLiteral(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6270 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitIntegerLiteral(this);
/* 6271 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final NumberContext number() throws org.antlr.v4.runtime.RecognitionException {
/* 6276 */     NumberContext _localctx = new NumberContext(this._ctx, getState());
/* 6277 */     enterRule(_localctx, 84, 42);
/*      */     try {
/* 6279 */       setState(916);
/* 6280 */       switch (this._input.LA(1)) {
/*      */       case 147: 
/* 6282 */         _localctx = new DecimalLiteralContext(_localctx);
/* 6283 */         enterOuterAlt(_localctx, 1);
/*      */         
/* 6285 */         setState(914);match(147);
/*      */         
/* 6287 */         break;
/*      */       case 146: 
/* 6289 */         _localctx = new IntegerLiteralContext(_localctx);
/* 6290 */         enterOuterAlt(_localctx, 2);
/*      */         
/* 6292 */         setState(915);match(146);
/*      */         
/* 6294 */         break;
/*      */       default: 
/* 6296 */         throw new org.antlr.v4.runtime.NoViableAltException(this);
/*      */       }
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re) {
/* 6300 */       _localctx.exception = re;
/* 6301 */       this._errHandler.reportError(this, re);
/* 6302 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 6305 */       exitRule();
/*      */     }
/* 6307 */     return _localctx;
/*      */   }
/*      */   
/*      */   public static class NonReservedContext extends org.antlr.v4.runtime.ParserRuleContext {
/* 6311 */     public org.antlr.v4.runtime.tree.TerminalNode TIMESTAMP() { return getToken(44, 0); }
/* 6312 */     public org.antlr.v4.runtime.tree.TerminalNode SYSTEM() { return getToken(117, 0); }
/* 6313 */     public org.antlr.v4.runtime.tree.TerminalNode RESET() { return getToken(128, 0); }
/* 6314 */     public org.antlr.v4.runtime.tree.TerminalNode COALESCE() { return getToken(132, 0); }
/* 6315 */     public org.antlr.v4.runtime.tree.TerminalNode VIEW() { return getToken(88, 0); }
/* 6316 */     public org.antlr.v4.runtime.tree.TerminalNode NULLIF() { return getToken(131, 0); }
/* 6317 */     public org.antlr.v4.runtime.tree.TerminalNode BERNOULLI() { return getToken(118, 0); }
/* 6318 */     public org.antlr.v4.runtime.tree.TerminalNode TIME() { return getToken(43, 0); }
/* 6319 */     public org.antlr.v4.runtime.tree.TerminalNode TABLESAMPLE() { return getToken(120, 0); }
/* 6320 */     public org.antlr.v4.runtime.tree.TerminalNode SECOND() { return getToken(51, 0); }
/* 6321 */     public org.antlr.v4.runtime.tree.TerminalNode LOGICAL() { return getToken(100, 0); }
/* 6322 */     public org.antlr.v4.runtime.tree.TerminalNode FUNCTIONS() { return getToken(111, 0); }
/* 6323 */     public org.antlr.v4.runtime.tree.TerminalNode IF() { return getToken(130, 0); }
/* 6324 */     public org.antlr.v4.runtime.tree.TerminalNode YEAR() { return getToken(46, 0); }
/* 6325 */     public org.antlr.v4.runtime.tree.TerminalNode OVER() { return getToken(74, 0); }
/* 6326 */     public org.antlr.v4.runtime.tree.TerminalNode USE() { return getToken(109, 0); }
/* 6327 */     public org.antlr.v4.runtime.tree.TerminalNode ROW() { return getToken(82, 0); }
/* 6328 */     public org.antlr.v4.runtime.tree.TerminalNode CONFIDENCE() { return getToken(22, 0); }
/* 6329 */     public org.antlr.v4.runtime.tree.TerminalNode PARTITION() { return getToken(75, 0); }
/* 6330 */     public org.antlr.v4.runtime.tree.TerminalNode TO() { return getToken(116, 0); }
/* 6331 */     public org.antlr.v4.runtime.tree.TerminalNode INTERVAL() { return getToken(45, 0); }
/* 6332 */     public org.antlr.v4.runtime.tree.TerminalNode POISSONIZED() { return getToken(119, 0); }
/* 6333 */     public org.antlr.v4.runtime.tree.TerminalNode TYPE() { return getToken(96, 0); }
/* 6334 */     public org.antlr.v4.runtime.tree.TerminalNode FORMAT() { return getToken(95, 0); }
/* 6335 */     public org.antlr.v4.runtime.tree.TerminalNode JSON() { return getToken(99, 0); }
/* 6336 */     public org.antlr.v4.runtime.tree.TerminalNode SCHEMAS() { return getToken(106, 0); }
/* 6337 */     public org.antlr.v4.runtime.tree.TerminalNode CURRENT() { return getToken(81, 0); }
/* 6338 */     public org.antlr.v4.runtime.tree.TerminalNode AT() { return getToken(21, 0); }
/* 6339 */     public org.antlr.v4.runtime.tree.TerminalNode GRAPHVIZ() { return getToken(98, 0); }
/* 6340 */     public org.antlr.v4.runtime.tree.TerminalNode MINUTE() { return getToken(50, 0); }
/* 6341 */     public org.antlr.v4.runtime.tree.TerminalNode FOLLOWING() { return getToken(80, 0); }
/* 6342 */     public org.antlr.v4.runtime.tree.TerminalNode SET() { return getToken(127, 0); }
/* 6343 */     public org.antlr.v4.runtime.tree.TerminalNode MONTH() { return getToken(47, 0); }
/* 6344 */     public org.antlr.v4.runtime.tree.TerminalNode TEXT() { return getToken(97, 0); }
/* 6345 */     public org.antlr.v4.runtime.tree.TerminalNode EXPLAIN() { return getToken(94, 0); }
/* 6346 */     public org.antlr.v4.runtime.tree.TerminalNode PRECEDING() { return getToken(79, 0); }
/* 6347 */     public org.antlr.v4.runtime.tree.TerminalNode DISTRIBUTED() { return getToken(101, 0); }
/* 6348 */     public org.antlr.v4.runtime.tree.TerminalNode CATALOGS() { return getToken(107, 0); }
/* 6349 */     public org.antlr.v4.runtime.tree.TerminalNode TABLES() { return getToken(105, 0); }
/* 6350 */     public org.antlr.v4.runtime.tree.TerminalNode SHOW() { return getToken(104, 0); }
/* 6351 */     public org.antlr.v4.runtime.tree.TerminalNode RESCALED() { return getToken(121, 0); }
/* 6352 */     public org.antlr.v4.runtime.tree.TerminalNode DAY() { return getToken(48, 0); }
/* 6353 */     public org.antlr.v4.runtime.tree.TerminalNode SESSION() { return getToken(129, 0); }
/* 6354 */     public org.antlr.v4.runtime.tree.TerminalNode COLUMNS() { return getToken(108, 0); }
/* 6355 */     public org.antlr.v4.runtime.tree.TerminalNode RANGE() { return getToken(76, 0); }
/* 6356 */     public org.antlr.v4.runtime.tree.TerminalNode DATE() { return getToken(42, 0); }
/* 6357 */     public org.antlr.v4.runtime.tree.TerminalNode ROWS() { return getToken(77, 0); }
/* 6358 */     public org.antlr.v4.runtime.tree.TerminalNode HOUR() { return getToken(49, 0); }
/* 6359 */     public org.antlr.v4.runtime.tree.TerminalNode APPROXIMATE() { return getToken(20, 0); }
/* 6360 */     public org.antlr.v4.runtime.tree.TerminalNode REPLACE() { return getToken(89, 0); }
/* 6361 */     public org.antlr.v4.runtime.tree.TerminalNode PARTITIONS() { return getToken(110, 0); }
/*      */     
/* 6363 */     public NonReservedContext(org.antlr.v4.runtime.ParserRuleContext parent, int invokingState) { super(invokingState); }
/*      */     
/* 6365 */     public int getRuleIndex() { return 43; }
/*      */     
/*      */     public void enterRule(ParseTreeListener listener) {
/* 6368 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).enterNonReserved(this);
/*      */     }
/*      */     
/*      */     public void exitRule(ParseTreeListener listener) {
/* 6372 */       if ((listener instanceof SqlBaseListener)) ((SqlBaseListener)listener).exitNonReserved(this);
/*      */     }
/*      */     
/*      */     public <T> T accept(org.antlr.v4.runtime.tree.ParseTreeVisitor<? extends T> visitor) {
/* 6376 */       if ((visitor instanceof SqlBaseVisitor)) return (T)((SqlBaseVisitor)visitor).visitNonReserved(this);
/* 6377 */       return (T)visitor.visitChildren(this);
/*      */     }
/*      */   }
/*      */   
/*      */   public final NonReservedContext nonReserved() throws org.antlr.v4.runtime.RecognitionException {
/* 6382 */     NonReservedContext _localctx = new NonReservedContext(this._ctx, getState());
/* 6383 */     enterRule(_localctx, 86, 43);
/*      */     try
/*      */     {
/* 6386 */       enterOuterAlt(_localctx, 1);
/*      */       
/* 6388 */       setState(918);
/* 6389 */       int _la = this._input.LA(1);
/* 6390 */       if ((((_la & 0xFFFFFFC0) != 0) || ((1L << _la & 0xFFC0000700000) == 0L)) && (((_la - 74 & 0xFFFFFFC0) != 0) || ((1L << _la - 74 & 0x7E0FC3FCFF0C1EF) == 0L))) {
/* 6391 */         this._errHandler.recoverInline(this);
/*      */       }
/* 6393 */       consume();
/*      */     }
/*      */     catch (org.antlr.v4.runtime.RecognitionException re)
/*      */     {
/* 6397 */       _localctx.exception = re;
/* 6398 */       this._errHandler.reportError(this, re);
/* 6399 */       this._errHandler.recover(this, re);
/*      */     }
/*      */     finally {
/* 6402 */       exitRule();
/*      */     }
/* 6404 */     return _localctx;
/*      */   }
/*      */   
/*      */   public boolean sempred(org.antlr.v4.runtime.RuleContext _localctx, int ruleIndex, int predIndex) {
/* 6408 */     switch (ruleIndex) {
/* 6409 */     case 6:  return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
/*      */     case 13: 
/* 6411 */       return relation_sempred((RelationContext)_localctx, predIndex);
/*      */     case 22: 
/* 6413 */       return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
/*      */     case 25: 
/* 6415 */       return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
/*      */     case 26: 
/* 6417 */       return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
/*      */     case 32: 
/* 6419 */       return type_sempred((TypeContext)_localctx, predIndex);
/*      */     }
/* 6421 */     return true;
/*      */   }
/*      */   
/* 6424 */   private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) { switch (predIndex) {
/* 6425 */     case 5:  return precpred(this._ctx, 3);
/*      */     case 6: 
/* 6427 */       return precpred(this._ctx, 2);
/*      */     case 7: 
/* 6429 */       return precpred(this._ctx, 1);
/*      */     case 8: 
/* 6431 */       return precpred(this._ctx, 5);
/*      */     }
/* 6433 */     return true;
/*      */   }
/*      */   
/* 6436 */   private boolean relation_sempred(RelationContext _localctx, int predIndex) { switch (predIndex) {
/* 6437 */     case 2:  return precpred(this._ctx, 2);
/*      */     }
/* 6439 */     return true;
/*      */   }
/*      */   
/* 6442 */   private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) { switch (predIndex) {
/* 6443 */     case 3:  return precpred(this._ctx, 3);
/*      */     case 4: 
/* 6445 */       return precpred(this._ctx, 2);
/*      */     }
/* 6447 */     return true;
/*      */   }
/*      */   
/* 6450 */   private boolean type_sempred(TypeContext _localctx, int predIndex) { switch (predIndex) {
/* 6451 */     case 10:  return precpred(this._ctx, 3);
/*      */     }
/* 6453 */     return true;
/*      */   }
/*      */   
/* 6456 */   private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) { switch (predIndex) {
/* 6457 */     case 9:  return precpred(this._ctx, 9);
/*      */     }
/* 6459 */     return true;
/*      */   }
/*      */   
/* 6462 */   private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) { switch (predIndex) {
/* 6463 */     case 0:  return precpred(this._ctx, 2);
/*      */     case 1: 
/* 6465 */       return precpred(this._ctx, 1);
/*      */     }
/* 6467 */     return true;
/*      */   }
/*      */   
/*      */   static
/*      */   {
/*   14 */     org.antlr.v4.runtime.RuntimeMetaData.checkVersion("4.3", "4.3");
/*      */     
/*      */ 
/*   17 */     _sharedContextCache = new org.antlr.v4.runtime.atn.PredictionContextCache();
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   44 */     tokenNames = new String[] { "<INVALID>", "']'", "'.'", "')'", "','", "'['", "'('", "'SELECT'", "'FROM'", "'AS'", "'ALL'", "'SOME'", "'ANY'", "'DISTINCT'", "'WHERE'", "'GROUP'", "'BY'", "'ORDER'", "'HAVING'", "'LIMIT'", "'APPROXIMATE'", "'AT'", "'CONFIDENCE'", "'OR'", "'AND'", "'IN'", "'NOT'", "'EXISTS'", "'BETWEEN'", "'LIKE'", "'IS'", "'NULL'", "'TRUE'", "'FALSE'", "'NULLS'", "'FIRST'", "'LAST'", "'ESCAPE'", "'ASC'", "'DESC'", "'SUBSTRING'", "'FOR'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'INTERVAL'", "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'ZONE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'EXTRACT'", "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", "'NATURAL'", "'USING'", "'ON'", "'OVER'", "'PARTITION'", "'RANGE'", "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", "'ROW'", "'WITH'", "'RECURSIVE'", "'VALUES'", "'CREATE'", "'TABLE'", "'VIEW'", "'REPLACE'", "'INSERT'", "'INTO'", "'CONSTRAINT'", "'DESCRIBE'", "'EXPLAIN'", "'FORMAT'", "'TYPE'", "'TEXT'", "'GRAPHVIZ'", "'JSON'", "'LOGICAL'", "'DISTRIBUTED'", "'CAST'", "'TRY_CAST'", "'SHOW'", "'TABLES'", "'SCHEMAS'", "'CATALOGS'", "'COLUMNS'", "'USE'", "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", "'UNION'", "'EXCEPT'", "'INTERSECT'", "'TO'", "'SYSTEM'", "'BERNOULLI'", "'POISSONIZED'", "'TABLESAMPLE'", "'RESCALED'", "'STRATIFY'", "'ALTER'", "'RENAME'", "'UNNEST'", "'ARRAY'", "'SET'", "'RESET'", "'SESSION'", "'IF'", "'NULLIF'", "'COALESCE'", "'='", "NEQ", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "STRING", "INTEGER_VALUE", "DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER" };
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*   85 */     ruleNames = new String[] { "singleStatement", "singleExpression", "statement", "query", "with", "queryNoWith", "queryTerm", "queryPrimary", "sortItem", "querySpecification", "namedQuery", "setQuantifier", "selectItem", "relation", "joinType", "joinCriteria", "sampledRelation", "sampleType", "aliasedRelation", "columnAliases", "relationPrimary", "expression", "booleanExpression", "predicated", "predicate", "valueExpression", "primaryExpression", "timeZoneSpecifier", "comparisonOperator", "booleanValue", "interval", "intervalField", "type", "simpleType", "whenClause", "over", "windowFrame", "frameBound", "explainOption", "qualifiedName", "identifier", "quotedIdentifier", "number", "nonReserved" };
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 6843 */     _ATN = new org.antlr.v4.runtime.atn.ATNDeserializer().deserialize("\003а훑舆괭䐗껱趀ꫝ\003 Λ\004\002\t\002\004\003\t\003\004\004\t\004\004\005\t\005\004\006\t\006\004\007\t\007\004\b\t\b\004\t\t\t\004\n\t\n\004\013\t\013\004\f\t\f\004\r\t\r\004\016\t\016\004\017\t\017\004\020\t\020\004\021\t\021\004\022\t\022\004\023\t\023\004\024\t\024\004\025\t\025\004\026\t\026\004\027\t\027\004\030\t\030\004\031\t\031\004\032\t\032\004\033\t\033\004\034\t\034\004\035\t\035\004\036\t\036\004\037\t\037\004 \t \004!\t!\004\"\t\"\004#\t#\004$\t$\004%\t%\004&\t&\004'\t'\004(\t(\004)\t)\004*\t*\004+\t+\004,\t,\004-\t-\003\002\003\002\003\002\003\003\003\003\003\003\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\005\004\n\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\007\004\n\004\f\004\016\004\013\004\003\004\003\004\005\004\n\004\003\004\003\004\003\004\003\004\003\004\005\004\n\004\003\004\003\004\005\004¢\n\004\003\004\003\004\003\004\003\004\005\004¨\n\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\003\004\005\004Ç\n\004\003\004\003\004\003\004\003\004\003\004\007\004Î\n\004\f\004\016\004Ñ\013\004\005\004Ó\n\004\003\004\003\004\005\004×\n\004\005\004Ù\n\004\003\005\005\005Ü\n\005\003\005\003\005\003\006\003\006\005\006â\n\006\003\006\003\006\003\006\007\006ç\n\006\f\006\016\006ê\013\006\003\007\003\007\003\007\003\007\003\007\003\007\007\007ò\n\007\f\007\016\007õ\013\007\005\007÷\n\007\003\007\003\007\005\007û\n\007\003\007\003\007\003\007\003\007\003\007\005\007Ă\n\007\003\b\003\b\003\b\003\b\003\b\003\b\005\bĊ\n\b\003\b\003\b\003\b\003\b\005\bĐ\n\b\003\b\007\bē\n\b\f\b\016\bĖ\013\b\003\t\003\t\003\t\003\t\003\t\003\t\003\t\007\tğ\n\t\f\t\016\tĢ\013\t\003\t\003\t\003\t\003\t\005\tĨ\n\t\003\n\003\n\005\nĬ\n\n\003\n\003\n\005\nİ\n\n\003\013\003\013\005\013Ĵ\n\013\003\013\003\013\003\013\007\013Ĺ\n\013\f\013\016\013ļ\013\013\003\013\003\013\003\013\003\013\007\013ł\n\013\f\013\016\013Ņ\013\013\005\013Ň\n\013\003\013\003\013\005\013ŋ\n\013\003\013\003\013\003\013\003\013\003\013\007\013Œ\n\013\f\013\016\013ŕ\013\013\005\013ŗ\n\013\003\013\003\013\005\013ś\n\013\003\f\003\f\005\fş\n\f\003\f\003\f\003\f\003\f\003\f\003\r\003\r\003\016\003\016\005\016Ū\n\016\003\016\005\016ŭ\n\016\003\016\003\016\003\016\003\016\003\016\005\016Ŵ\n\016\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\003\017\005\017Ƈ\n\017\007\017Ɖ\n\017\f\017\016\017ƌ\013\017\003\020\005\020Ə\n\020\003\020\003\020\005\020Ɠ\n\020\003\020\003\020\005\020Ɨ\n\020\003\020\003\020\005\020ƛ\n\020\005\020Ɲ\n\020\003\021\003\021\003\021\003\021\003\021\003\021\003\021\007\021Ʀ\n\021\f\021\016\021Ʃ\013\021\003\021\003\021\005\021ƭ\n\021\003\022\003\022\003\022\003\022\003\022\003\022\003\022\005\022ƶ\n\022\003\022\003\022\003\022\003\022\003\022\003\022\007\022ƾ\n\022\f\022\016\022ǁ\013\022\003\022\003\022\005\022ǅ\n\022\005\022Ǉ\n\022\003\023\003\023\003\024\003\024\005\024Ǎ\n\024\003\024\003\024\005\024Ǒ\n\024\005\024Ǔ\n\024\003\025\003\025\003\025\003\025\007\025Ǚ\n\025\f\025\016\025ǜ\013\025\003\025\003\025\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\003\026\007\026Ǫ\n\026\f\026\016\026ǭ\013\026\003\026\003\026\003\026\003\026\003\026\003\026\005\026ǵ\n\026\003\027\003\027\003\030\003\030\003\030\003\030\003\030\003\030\003\030\003\030\003\030\005\030Ȃ\n\030\003\030\003\030\003\030\003\030\003\030\003\030\007\030Ȋ\n\030\f\030\016\030ȍ\013\030\003\031\003\031\005\031ȑ\n\031\003\032\003\032\003\032\003\032\005\032ȗ\n\032\003\032\003\032\003\032\003\032\003\032\003\032\005\032ȟ\n\032\003\032\003\032\003\032\003\032\003\032\007\032Ȧ\n\032\f\032\016\032ȩ\013\032\003\032\003\032\003\032\005\032Ȯ\n\032\003\032\003\032\003\032\003\032\003\032\003\032\005\032ȶ\n\032\003\032\003\032\003\032\003\032\005\032ȼ\n\032\003\032\003\032\005\032ɀ\n\032\003\032\003\032\003\032\005\032Ʌ\n\032\003\032\003\032\003\032\005\032Ɋ\n\032\003\033\003\033\003\033\003\033\005\033ɐ\n\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\003\033\007\033ɞ\n\033\f\033\016\033ɡ\013\033\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\006\034ɰ\n\034\r\034\016\034ɱ\003\034\003\034\003\034\003\034\003\034\003\034\003\034\007\034ɻ\n\034\f\034\016\034ɾ\013\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034ʈ\n\034\003\034\003\034\003\034\005\034ʍ\n\034\003\034\003\034\003\034\007\034ʒ\n\034\f\034\016\034ʕ\013\034\005\034ʗ\n\034\003\034\003\034\005\034ʛ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\006\034ʤ\n\034\r\034\016\034ʥ\003\034\003\034\005\034ʪ\n\034\003\034\003\034\003\034\003\034\006\034ʰ\n\034\r\034\016\034ʱ\003\034\003\034\005\034ʶ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\007\034ˍ\n\034\f\034\016\034ː\013\034\005\034˒\n\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034˚\n\034\003\034\003\034\003\034\003\034\005\034ˠ\n\034\003\034\003\034\003\034\003\034\005\034˦\n\034\003\034\003\034\003\034\003\034\005\034ˬ\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034˵\n\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\003\034\005\034̄\n\034\003\034\003\034\003\034\003\034\003\034\007\034̋\n\034\f\034\016\034̎\013\034\003\035\003\035\003\035\003\035\003\035\003\035\005\035̖\n\035\003\036\003\036\003\037\003\037\003 \003 \005 ̞\n \003 \003 \003 \003 \005 ̤\n \003!\003!\003\"\003\"\003\"\003\"\003\"\003\"\003\"\005\"̯\n\"\003\"\003\"\007\"̳\n\"\f\"\016\"̶\013\"\003#\003#\003#\005#̻\n#\003$\003$\003$\003$\003$\003%\003%\003%\003%\003%\003%\003%\007%͉\n%\f%\016%͌\013%\005%͎\n%\003%\003%\003%\003%\003%\007%͕\n%\f%\016%͘\013%\005%͚\n%\003%\005%͝\n%\003%\003%\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\003&\005&ͱ\n&\003'\003'\003'\003'\003'\003'\003'\003'\003'\005'ͼ\n'\003(\003(\003(\003(\005(΂\n(\003)\003)\003)\007)·\n)\f)\016)Ί\013)\003*\003*\003*\003*\003*\005*Α\n*\003+\003+\003,\003,\005,Η\n,\003-\003-\003-\002\b\016\034.46B.\002\004\006\b\n\f\016\020\022\024\026\030\032\034\036 \"$&(*,.02468:<>@BDFHJLNPRTVX\002\021\004\002\n\n\033\033\003\002st\003\002()\003\002%&\004\002\f\f\017\017\003\002wy\003\002\003\002\003\002\003\002\"#\003\00205\003\002QR\003\002ce\003\002fg\013\002\026\030,5LOQTZ[`gjqv{О\002Z\003\002\002\002\004]\003\002\002\002\006Ø\003\002\002\002\bÛ\003\002\002\002\nß\003\002\002\002\fë\003\002\002\002\016ă\003\002\002\002\020ħ\003\002\002\002\022ĩ\003\002\002\002\024ı\003\002\002\002\026Ŝ\003\002\002\002\030ť\003\002\002\002\032ų\003\002\002\002\034ŵ\003\002\002\002\036Ɯ\003\002\002\002 Ƭ\003\002\002\002\"Ʈ\003\002\002\002$ǈ\003\002\002\002&Ǌ\003\002\002\002(ǔ\003\002\002\002*Ǵ\003\002\002\002,Ƕ\003\002\002\002.ȁ\003\002\002\0020Ȏ\003\002\002\0022ɉ\003\002\002\0024ɏ\003\002\002\0026̃\003\002\002\0028̕\003\002\002\002:̗\003\002\002\002<̙\003\002\002\002>̛\003\002\002\002@̥\003\002\002\002B̮\003\002\002\002D̺\003\002\002\002F̼\003\002\002\002H́\003\002\002\002JͰ\003\002\002\002Lͻ\003\002\002\002N΁\003\002\002\002P΃\003\002\002\002Rΐ\003\002\002\002TΒ\003\002\002\002VΖ\003\002\002\002XΘ\003\002\002\002Z[\005\006\004\002[\\\007\002\002\003\\\003\003\002\002\002]^\005,\027\002^_\007\002\002\003_\005\003\002\002\002`Ù\005\b\005\002ab\007o\002\002bÙ\005R*\002cd\007o\002\002de\005R*\002ef\007\004\002\002fg\005R*\002gÙ\003\002\002\002hi\007X\002\002ij\007Y\002\002jk\005P)\002kl\007\013\002\002lm\005\b\005\002mÙ\003\002\002\002no\007r\002\002op\007Y\002\002pÙ\005P)\002qr\007\\\002\002rs\007]\002\002st\005P)\002tu\005\b\005\002uÙ\003\002\002\002vw\007}\002\002wx\007Y\002\002xy\005P)\002yz\007~\002\002z{\007v\002\002{|\005P)\002|Ù\003\002\002\002}\007X\002\002~\007\031\002\002\007[\002\002~\003\002\002\002\003\002\002\002\003\002\002\002\007Z\002\002\005P)\002\007\013\002\002\005\b\005\002Ù\003\002\002\002\007r\002\002\007Z\002\002Ù\005P)\002\007`\002\002\007\b\002\002\005N(\002\007\006\002\002\005N(\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002\007\005\002\002\003\002\002\002\003\002\002\002\003\002\002\002\003\002\002\002Ù\005\006\004\002\007j\002\002\007k\002\002\t\002\002\002\005P)\002\003\002\002\002\003\002\002\002¡\003\002\002\002 \007\037\002\002 ¢\007\002\002¡\003\002\002\002¡¢\003\002\002\002¢Ù\003\002\002\002£¤\007j\002\002¤§\007l\002\002¥¦\t\002\002\002¦¨\005R*\002§¥\003\002\002\002§¨\003\002\002\002¨Ù\003\002\002\002©ª\007j\002\002ªÙ\007m\002\002«¬\007j\002\002¬­\007n\002\002­®\t\002\002\002®Ù\005P)\002¯°\007_\002\002°Ù\005P)\002±²\007)\002\002²Ù\005P)\002³´\007j\002\002´Ù\007q\002\002µ¶\007j\002\002¶Ù\007\002\002·¸\007\002\002¸¹\007\002\002¹º\005P)\002º»\007\002\002»¼\007\002\002¼Ù\003\002\002\002½¾\007\002\002¾¿\007\002\002¿Ù\005P)\002ÀÁ\007j\002\002ÁÂ\007p\002\002ÂÃ\t\002\002\002ÃÆ\005P)\002ÄÅ\007\020\002\002ÅÇ\005.\030\002ÆÄ\003\002\002\002ÆÇ\003\002\002\002ÇÒ\003\002\002\002ÈÉ\007\023\002\002ÉÊ\007\022\002\002ÊÏ\005\022\n\002ËÌ\007\006\002\002ÌÎ\005\022\n\002ÍË\003\002\002\002ÎÑ\003\002\002\002ÏÍ\003\002\002\002ÏÐ\003\002\002\002ÐÓ\003\002\002\002ÑÏ\003\002\002\002ÒÈ\003\002\002\002ÒÓ\003\002\002\002ÓÖ\003\002\002\002ÔÕ\007\025\002\002Õ×\007\002\002ÖÔ\003\002\002\002Ö×\003\002\002\002×Ù\003\002\002\002Ø`\003\002\002\002Øa\003\002\002\002Øc\003\002\002\002Øh\003\002\002\002Øn\003\002\002\002Øq\003\002\002\002Øv\003\002\002\002Ø}\003\002\002\002Ø\003\002\002\002Ø\003\002\002\002Ø\003\002\002\002Ø£\003\002\002\002Ø©\003\002\002\002Ø«\003\002\002\002Ø¯\003\002\002\002Ø±\003\002\002\002Ø³\003\002\002\002Øµ\003\002\002\002Ø·\003\002\002\002Ø½\003\002\002\002ØÀ\003\002\002\002Ù\007\003\002\002\002ÚÜ\005\n\006\002ÛÚ\003\002\002\002ÛÜ\003\002\002\002ÜÝ\003\002\002\002ÝÞ\005\f\007\002Þ\t\003\002\002\002ßá\007U\002\002àâ\007V\002\002áà\003\002\002\002áâ\003\002\002\002âã\003\002\002\002ãè\005\026\f\002äå\007\006\002\002åç\005\026\f\002æä\003\002\002\002çê\003\002\002\002èæ\003\002\002\002èé\003\002\002\002é\013\003\002\002\002êè\003\002\002\002ëö\005\016\b\002ìí\007\023\002\002íî\007\022\002\002îó\005\022\n\002ïð\007\006\002\002ðò\005\022\n\002ñï\003\002\002\002òõ\003\002\002\002óñ\003\002\002\002óô\003\002\002\002ô÷\003\002\002\002õó\003\002\002\002öì\003\002\002\002ö÷\003\002\002\002÷ú\003\002\002\002øù\007\025\002\002ùû\007\002\002úø\003\002\002\002úû\003\002\002\002ûā\003\002\002\002üý\007\026\002\002ýþ\007\027\002\002þÿ\005V,\002ÿĀ\007\030\002\002ĀĂ\003\002\002\002āü\003\002\002\002āĂ\003\002\002\002Ă\r\003\002\002\002ăĄ\b\b\001\002Ąą\005\020\t\002ąĔ\003\002\002\002Ćć\f\004\002\002ćĉ\007u\002\002ĈĊ\005\030\r\002ĉĈ\003\002\002\002ĉĊ\003\002\002\002Ċċ\003\002\002\002ċē\005\016\b\005Čč\f\003\002\002čď\t\003\002\002ĎĐ\005\030\r\002ďĎ\003\002\002\002ďĐ\003\002\002\002Đđ\003\002\002\002đē\005\016\b\004ĒĆ\003\002\002\002ĒČ\003\002\002\002ēĖ\003\002\002\002ĔĒ\003\002\002\002Ĕĕ\003\002\002\002ĕ\017\003\002\002\002ĖĔ\003\002\002\002ėĨ\005\024\013\002Ęę\007Y\002\002ęĨ\005P)\002Ěě\007W\002\002ěĠ\005,\027\002Ĝĝ\007\006\002\002ĝğ\005,\027\002ĞĜ\003\002\002\002ğĢ\003\002\002\002ĠĞ\003\002\002\002Ġġ\003\002\002\002ġĨ\003\002\002\002ĢĠ\003\002\002\002ģĤ\007\b\002\002Ĥĥ\005\f\007\002ĥĦ\007\005\002\002ĦĨ\003\002\002\002ħė\003\002\002\002ħĘ\003\002\002\002ħĚ\003\002\002\002ħģ\003\002\002\002Ĩ\021\003\002\002\002ĩī\005,\027\002ĪĬ\t\004\002\002īĪ\003\002\002\002īĬ\003\002\002\002Ĭį\003\002\002\002ĭĮ\007$\002\002Įİ\t\005\002\002įĭ\003\002\002\002įİ\003\002\002\002İ\023\003\002\002\002ıĳ\007\t\002\002ĲĴ\005\030\r\002ĳĲ\003\002\002\002ĳĴ\003\002\002\002Ĵĵ\003\002\002\002ĵĺ\005\032\016\002Ķķ\007\006\002\002ķĹ\005\032\016\002ĸĶ\003\002\002\002Ĺļ\003\002\002\002ĺĸ\003\002\002\002ĺĻ\003\002\002\002Ļņ\003\002\002\002ļĺ\003\002\002\002Ľľ\007\n\002\002ľŃ\005\034\017\002Ŀŀ\007\006\002\002ŀł\005\034\017\002ŁĿ\003\002\002\002łŅ\003\002\002\002ŃŁ\003\002\002\002Ńń\003\002\002\002ńŇ\003\002\002\002ŅŃ\003\002\002\002ņĽ\003\002\002\002ņŇ\003\002\002\002ŇŊ\003\002\002\002ňŉ\007\020\002\002ŉŋ\005.\030\002Ŋň\003\002\002\002Ŋŋ\003\002\002\002ŋŖ\003\002\002\002Ōō\007\021\002\002ōŎ\007\022\002\002Ŏœ\005,\027\002ŏŐ\007\006\002\002ŐŒ\005,\027\002őŏ\003\002\002\002Œŕ\003\002\002\002œő\003\002\002\002œŔ\003\002\002\002Ŕŗ\003\002\002\002ŕœ\003\002\002\002ŖŌ\003\002\002\002Ŗŗ\003\002\002\002ŗŚ\003\002\002\002Řř\007\024\002\002řś\005.\030\002ŚŘ\003\002\002\002Śś\003\002\002\002ś\025\003\002\002\002ŜŞ\005R*\002ŝş\005(\025\002Şŝ\003\002\002\002Şş\003\002\002\002şŠ\003\002\002\002Šš\007\013\002\002šŢ\007\b\002\002Ţţ\005\b\005\002ţŤ\007\005\002\002Ť\027\003\002\002\002ťŦ\t\006\002\002Ŧ\031\003\002\002\002ŧŬ\005,\027\002ŨŪ\007\013\002\002ũŨ\003\002\002\002ũŪ\003\002\002\002Ūū\003\002\002\002ūŭ\005R*\002Ŭũ\003\002\002\002Ŭŭ\003\002\002\002ŭŴ\003\002\002\002Ůů\005P)\002ůŰ\007\004\002\002Űű\007\002\002űŴ\003\002\002\002ŲŴ\007\002\002ųŧ\003\002\002\002ųŮ\003\002\002\002ųŲ\003\002\002\002Ŵ\033\003\002\002\002ŵŶ\b\017\001\002Ŷŷ\005\"\022\002ŷƊ\003\002\002\002ŸƆ\f\004\002\002Źź\007C\002\002źŻ\007B\002\002ŻƇ\005\034\017\002żŽ\005\036\020\002Žž\007B\002\002žſ\005\034\017\002ſƀ\005 \021\002ƀƇ\003\002\002\002ƁƂ\007I\002\002Ƃƃ\005\036\020\002ƃƄ\007B\002\002Ƅƅ\005\034\017\002ƅƇ\003\002\002\002ƆŹ\003\002\002\002Ɔż\003\002\002\002ƆƁ\003\002\002\002ƇƉ\003\002\002\002ƈŸ\003\002\002\002Ɖƌ\003\002\002\002Ɗƈ\003\002\002\002ƊƋ\003\002\002\002Ƌ\035\003\002\002\002ƌƊ\003\002\002\002ƍƏ\007E\002\002Ǝƍ\003\002\002\002ƎƏ\003\002\002\002ƏƝ\003\002\002\002Ɛƒ\007F\002\002ƑƓ\007D\002\002ƒƑ\003\002\002\002ƒƓ\003\002\002\002ƓƝ\003\002\002\002ƔƖ\007G\002\002ƕƗ\007D\002\002Ɩƕ\003\002\002\002ƖƗ\003\002\002\002ƗƝ\003\002\002\002Ƙƚ\007H\002\002ƙƛ\007D\002\002ƚƙ\003\002\002\002ƚƛ\003\002\002\002ƛƝ\003\002\002\002ƜƎ\003\002\002\002ƜƐ\003\002\002\002ƜƔ\003\002\002\002ƜƘ\003\002\002\002Ɲ\037\003\002\002\002ƞƟ\007K\002\002Ɵƭ\005.\030\002Ơơ\007J\002\002ơƢ\007\b\002\002ƢƧ\005R*\002ƣƤ\007\006\002\002ƤƦ\005R*\002ƥƣ\003\002\002\002ƦƩ\003\002\002\002Ƨƥ\003\002\002\002Ƨƨ\003\002\002\002ƨƪ\003\002\002\002ƩƧ\003\002\002\002ƪƫ\007\005\002\002ƫƭ\003\002\002\002Ƭƞ\003\002\002\002ƬƠ\003\002\002\002ƭ!\003\002\002\002Ʈǆ\005&\024\002Ưư\007z\002\002ưƱ\005$\023\002ƱƲ\007\b\002\002ƲƳ\005,\027\002ƳƵ\007\005\002\002ƴƶ\007{\002\002Ƶƴ\003\002\002\002Ƶƶ\003\002\002\002ƶǄ\003\002\002\002ƷƸ\007|\002\002Ƹƹ\007K\002\002ƹƺ\007\b\002\002ƺƿ\005,\027\002ƻƼ\007\006\002\002Ƽƾ\005,\027\002ƽƻ\003\002\002\002ƾǁ\003\002\002\002ƿƽ\003\002\002\002ƿǀ\003\002\002\002ǀǂ\003\002\002\002ǁƿ\003\002\002\002ǂǃ\007\005\002\002ǃǅ\003\002\002\002ǄƷ\003\002\002\002Ǆǅ\003\002\002\002ǅǇ\003\002\002\002ǆƯ\003\002\002\002ǆǇ\003\002\002\002Ǉ#\003\002\002\002ǈǉ\t\007\002\002ǉ%\003\002\002\002Ǌǒ\005*\026\002ǋǍ\007\013\002\002ǌǋ\003\002\002\002ǌǍ\003\002\002\002Ǎǎ\003\002\002\002ǎǐ\005R*\002ǏǑ\005(\025\002ǐǏ\003\002\002\002ǐǑ\003\002\002\002ǑǓ\003\002\002\002ǒǌ\003\002\002\002ǒǓ\003\002\002\002Ǔ'\003\002\002\002ǔǕ\007\b\002\002Ǖǚ\005R*\002ǖǗ\007\006\002\002ǗǙ\005R*\002ǘǖ\003\002\002\002Ǚǜ\003\002\002\002ǚǘ\003\002\002\002ǚǛ\003\002\002\002Ǜǝ\003\002\002\002ǜǚ\003\002\002\002ǝǞ\007\005\002\002Ǟ)\003\002\002\002ǟǵ\005P)\002Ǡǡ\007\b\002\002ǡǢ\005\b\005\002Ǣǣ\007\005\002\002ǣǵ\003\002\002\002Ǥǥ\007\002\002ǥǦ\007\b\002\002Ǧǫ\005,\027\002ǧǨ\007\006\002\002ǨǪ\005,\027\002ǩǧ\003\002\002\002Ǫǭ\003\002\002\002ǫǩ\003\002\002\002ǫǬ\003\002\002\002ǬǮ\003\002\002\002ǭǫ\003\002\002\002Ǯǯ\007\005\002\002ǯǵ\003\002\002\002ǰǱ\007\b\002\002Ǳǲ\005\034\017\002ǲǳ\007\005\002\002ǳǵ\003\002\002\002Ǵǟ\003\002\002\002ǴǠ\003\002\002\002ǴǤ\003\002\002\002Ǵǰ\003\002\002\002ǵ+\003\002\002\002ǶǷ\005.\030\002Ƿ-\003\002\002\002Ǹǹ\b\030\001\002ǹǺ\007\034\002\002ǺȂ\005.\030\006ǻȂ\0050\031\002Ǽǽ\007\035\002\002ǽǾ\007\b\002\002Ǿǿ\005\b\005\002ǿȀ\007\005\002\002ȀȂ\003\002\002\002ȁǸ\003\002\002\002ȁǻ\003\002\002\002ȁǼ\003\002\002\002Ȃȋ\003\002\002\002ȃȄ\f\005\002\002Ȅȅ\007\032\002\002ȅȊ\005.\030\006Ȇȇ\f\004\002\002ȇȈ\007\031\002\002ȈȊ\005.\030\005ȉȃ\003\002\002\002ȉȆ\003\002\002\002Ȋȍ\003\002\002\002ȋȉ\003\002\002\002ȋȌ\003\002\002\002Ȍ/\003\002\002\002ȍȋ\003\002\002\002ȎȐ\0054\033\002ȏȑ\0052\032\002Ȑȏ\003\002\002\002Ȑȑ\003\002\002\002ȑ1\003\002\002\002Ȓȓ\005:\036\002ȓȔ\0054\033\002ȔɊ\003\002\002\002ȕȗ\007\034\002\002Ȗȕ\003\002\002\002Ȗȗ\003\002\002\002ȗȘ\003\002\002\002Șș\007\036\002\002șȚ\0054\033\002Țț\007\032\002\002țȜ\0054\033\002ȜɊ\003\002\002\002ȝȟ\007\034\002\002Ȟȝ\003\002\002\002Ȟȟ\003\002\002\002ȟȠ\003\002\002\002Ƞȡ\007\033\002\002ȡȢ\007\b\002\002Ȣȧ\005,\027\002ȣȤ\007\006\002\002ȤȦ\005,\027\002ȥȣ\003\002\002\002Ȧȩ\003\002\002\002ȧȥ\003\002\002\002ȧȨ\003\002\002\002ȨȪ\003\002\002\002ȩȧ\003\002\002\002Ȫȫ\007\005\002\002ȫɊ\003\002\002\002ȬȮ\007\034\002\002ȭȬ\003\002\002\002ȭȮ\003\002\002\002Ȯȯ\003\002\002\002ȯȰ\007\033\002\002Ȱȱ\007\b\002\002ȱȲ\005\b\005\002Ȳȳ\007\005\002\002ȳɊ\003\002\002\002ȴȶ\007\034\002\002ȵȴ\003\002\002\002ȵȶ\003\002\002\002ȶȷ\003\002\002\002ȷȸ\007\037\002\002ȸȻ\0054\033\002ȹȺ\007'\002\002Ⱥȼ\0054\033\002Ȼȹ\003\002\002\002Ȼȼ\003\002\002\002ȼɊ\003\002\002\002Ƚȿ\007 \002\002Ⱦɀ\007\034\002\002ȿȾ\003\002\002\002ȿɀ\003\002\002\002ɀɁ\003\002\002\002ɁɊ\007!\002\002ɂɄ\007 \002\002ɃɅ\007\034\002\002ɄɃ\003\002\002\002ɄɅ\003\002\002\002ɅɆ\003\002\002\002Ɇɇ\007\017\002\002ɇɈ\007\n\002\002ɈɊ\0054\033\002ɉȒ\003\002\002\002ɉȖ\003\002\002\002ɉȞ\003\002\002\002ɉȭ\003\002\002\002ɉȵ\003\002\002\002ɉȽ\003\002\002\002ɉɂ\003\002\002\002Ɋ3\003\002\002\002ɋɌ\b\033\001\002Ɍɍ\t\b\002\002ɍɐ\0054\033\006Ɏɐ\0056\034\002ɏɋ\003\002\002\002ɏɎ\003\002\002\002ɐɟ\003\002\002\002ɑɒ\f\005\002\002ɒɓ\t\t\002\002ɓɞ\0054\033\006ɔɕ\f\004\002\002ɕɖ\t\b\002\002ɖɞ\0054\033\005ɗɘ\f\003\002\002ɘə\007\002\002əɞ\0054\033\004ɚɛ\f\007\002\002ɛɜ\007\027\002\002ɜɞ\0058\035\002ɝɑ\003\002\002\002ɝɔ\003\002\002\002ɝɗ\003\002\002\002ɝɚ\003\002\002\002ɞɡ\003\002\002\002ɟɝ\003\002\002\002ɟɠ\003\002\002\002ɠ5\003\002\002\002ɡɟ\003\002\002\002ɢɣ\b\034\001\002ɣ̄\007!\002\002ɤ̄\005> \002ɥɦ\005R*\002ɦɧ\007\002\002ɧ̄\003\002\002\002ɨ̄\005V,\002ɩ̄\005<\037\002ɪ̄\007\002\002ɫɬ\007\b\002\002ɬɯ\005,\027\002ɭɮ\007\006\002\002ɮɰ\005,\027\002ɯɭ\003\002\002\002ɰɱ\003\002\002\002ɱɯ\003\002\002\002ɱɲ\003\002\002\002ɲɳ\003\002\002\002ɳɴ\007\005\002\002ɴ̄\003\002\002\002ɵɶ\007T\002\002ɶɷ\007\b\002\002ɷɼ\005,\027\002ɸɹ\007\006\002\002ɹɻ\005,\027\002ɺɸ\003\002\002\002ɻɾ\003\002\002\002ɼɺ\003\002\002\002ɼɽ\003\002\002\002ɽɿ\003\002\002\002ɾɼ\003\002\002\002ɿʀ\007\005\002\002ʀ̄\003\002\002\002ʁ̄\005P)\002ʂʃ\005P)\002ʃʄ\007\b\002\002ʄʅ\007\002\002ʅʇ\007\005\002\002ʆʈ\005H%\002ʇʆ\003\002\002\002ʇʈ\003\002\002\002ʈ̄\003\002\002\002ʉʊ\005P)\002ʊʖ\007\b\002\002ʋʍ\005\030\r\002ʌʋ\003\002\002\002ʌʍ\003\002\002\002ʍʎ\003\002\002\002ʎʓ\005,\027\002ʏʐ\007\006\002\002ʐʒ\005,\027\002ʑʏ\003\002\002\002ʒʕ\003\002\002\002ʓʑ\003\002\002\002ʓʔ\003\002\002\002ʔʗ\003\002\002\002ʕʓ\003\002\002\002ʖʌ\003\002\002\002ʖʗ\003\002\002\002ʗʘ\003\002\002\002ʘʚ\007\005\002\002ʙʛ\005H%\002ʚʙ\003\002\002\002ʚʛ\003\002\002\002ʛ̄\003\002\002\002ʜʝ\007\b\002\002ʝʞ\005\b\005\002ʞʟ\007\005\002\002ʟ̄\003\002\002\002ʠʡ\007=\002\002ʡʣ\0054\033\002ʢʤ\005F$\002ʣʢ\003\002\002\002ʤʥ\003\002\002\002ʥʣ\003\002\002\002ʥʦ\003\002\002\002ʦʩ\003\002\002\002ʧʨ\007@\002\002ʨʪ\005,\027\002ʩʧ\003\002\002\002ʩʪ\003\002\002\002ʪʫ\003\002\002\002ʫʬ\007A\002\002ʬ̄\003\002\002\002ʭʯ\007=\002\002ʮʰ\005F$\002ʯʮ\003\002\002\002ʰʱ\003\002\002\002ʱʯ\003\002\002\002ʱʲ\003\002\002\002ʲʵ\003\002\002\002ʳʴ\007@\002\002ʴʶ\005,\027\002ʵʳ\003\002\002\002ʵʶ\003\002\002\002ʶʷ\003\002\002\002ʷʸ\007A\002\002ʸ̄\003\002\002\002ʹʺ\007h\002\002ʺʻ\007\b\002\002ʻʼ\005,\027\002ʼʽ\007\013\002\002ʽʾ\005B\"\002ʾʿ\007\005\002\002ʿ̄\003\002\002\002ˀˁ\007i\002\002ˁ˂\007\b\002\002˂˃\005,\027\002˃˄\007\013\002\002˄˅\005B\"\002˅ˆ\007\005\002\002ˆ̄\003\002\002\002ˇˈ\007\002\002ˈˑ\007\007\002\002ˉˎ\005,\027\002ˊˋ\007\006\002\002ˋˍ\005,\027\002ˌˊ\003\002\002\002ˍː\003\002\002\002ˎˌ\003\002\002\002ˎˏ\003\002\002\002ˏ˒\003\002\002\002ːˎ\003\002\002\002ˑˉ\003\002\002\002ˑ˒\003\002\002\002˒˓\003\002\002\002˓̄\007\003\002\002˔̄\0077\002\002˕˙\0078\002\002˖˗\007\b\002\002˗˘\007\002\002˘˚\007\005\002\002˙˖\003\002\002\002˙˚\003\002\002\002˚̄\003\002\002\002˛˟\0079\002\002˜˝\007\b\002\002˝˞\007\002\002˞ˠ\007\005\002\002˟˜\003\002\002\002˟ˠ\003\002\002\002ˠ̄\003\002\002\002ˡ˥\007:\002\002ˢˣ\007\b\002\002ˣˤ\007\002\002ˤ˦\007\005\002\002˥ˢ\003\002\002\002˥˦\003\002\002\002˦̄\003\002\002\002˧˫\007;\002\002˨˩\007\b\002\002˩˪\007\002\002˪ˬ\007\005\002\002˫˨\003\002\002\002˫ˬ\003\002\002\002ˬ̄\003\002\002\002˭ˮ\007*\002\002ˮ˯\007\b\002\002˯˰\0054\033\002˰˱\007\n\002\002˱˴\0054\033\002˲˳\007+\002\002˳˵\0054\033\002˴˲\003\002\002\002˴˵\003\002\002\002˵˶\003\002\002\002˶˷\007\005\002\002˷̄\003\002\002\002˸˹\007<\002\002˹˺\007\b\002\002˺˻\005R*\002˻˼\007\n\002\002˼˽\0054\033\002˽˾\007\005\002\002˾̄\003\002\002\002˿̀\007\b\002\002̀́\005,\027\002́̂\007\005\002\002̂̄\003\002\002\002̃ɢ\003\002\002\002̃ɤ\003\002\002\002̃ɥ\003\002\002\002̃ɨ\003\002\002\002̃ɩ\003\002\002\002̃ɪ\003\002\002\002̃ɫ\003\002\002\002̃ɵ\003\002\002\002̃ʁ\003\002\002\002̃ʂ\003\002\002\002̃ʉ\003\002\002\002̃ʜ\003\002\002\002̃ʠ\003\002\002\002̃ʭ\003\002\002\002̃ʹ\003\002\002\002̃ˀ\003\002\002\002̃ˇ\003\002\002\002̃˔\003\002\002\002̃˕\003\002\002\002̃˛\003\002\002\002̃ˡ\003\002\002\002̃˧\003\002\002\002̃˭\003\002\002\002̃˸\003\002\002\002̃˿\003\002\002\002̄̌\003\002\002\002̅̆\f\013\002\002̆̇\007\007\002\002̇̈\0054\033\002̈̉\007\003\002\002̉̋\003\002\002\002̊̅\003\002\002\002̋̎\003\002\002\002̌̊\003\002\002\002̌̍\003\002\002\002̍7\003\002\002\002̎̌\003\002\002\002̏̐\007-\002\002̐̑\0076\002\002̖̑\005> \002̒̓\007-\002\002̓̔\0076\002\002̖̔\007\002\002̏̕\003\002\002\002̒̕\003\002\002\002̖9\003\002\002\002̗̘\t\n\002\002̘;\003\002\002\002̙̚\t\013\002\002̚=\003\002\002\002̛̝\007/\002\002̜̞\t\b\002\002̝̜\003\002\002\002̝̞\003\002\002\002̞̟\003\002\002\002̟̠\007\002\002̠̣\005@!\002̡̢\007v\002\002̢̤\005@!\002̡̣\003\002\002\002̣̤\003\002\002\002̤?\003\002\002\002̥̦\t\f\002\002̦A\003\002\002\002̧̨\b\"\001\002̨̩\007\002\002̩̪\007\002\002̪̫\005B\"\002̫̬\007\002\002̬̯\003\002\002\002̭̯\005D#\002̧̮\003\002\002\002̮̭\003\002\002\002̴̯\003\002\002\002̰̱\f\005\002\002̱̳\007\002\002̲̰\003\002\002\002̶̳\003\002\002\002̴̲\003\002\002\002̴̵\003\002\002\002̵C\003\002\002\002̶̴\003\002\002\002̷̻\007\002\002̸̻\007\002\002̹̻\005R*\002̷̺\003\002\002\002̸̺\003\002\002\002̺̹\003\002\002\002̻E\003\002\002\002̼̽\007>\002\002̽̾\005,\027\002̾̿\007?\002\002̿̀\005,\027\002̀G\003\002\002\002́͂\007L\002\002͍͂\007\b\002\002̓̈́\007M\002\002̈́ͅ\007\022\002\002͊ͅ\005,\027\002͇͆\007\006\002\002͇͉\005,\027\002͈͆\003\002\002\002͉͌\003\002\002\002͈͊\003\002\002\002͊͋\003\002\002\002͎͋\003\002\002\002͌͊\003\002\002\002͍̓\003\002\002\002͍͎\003\002\002\002͎͙\003\002\002\002͏͐\007\023\002\002͐͑\007\022\002\002͖͑\005\022\n\002͓͒\007\006\002\002͓͕\005\022\n\002͔͒\003\002\002\002͕͘\003\002\002\002͖͔\003\002\002\002͖͗\003\002\002\002͚͗\003\002\002\002͖͘\003\002\002\002͙͏\003\002\002\002͙͚\003\002\002\002͚͜\003\002\002\002͛͝\005J&\002͛͜\003\002\002\002͜͝\003\002\002\002͝͞\003\002\002\002͟͞\007\005\002\002͟I\003\002\002\002͠͡\007N\002\002͡ͱ\005L'\002ͣ͢\007O\002\002ͣͱ\005L'\002ͤͥ\007N\002\002ͥͦ\007\036\002\002ͦͧ\005L'\002ͧͨ\007\032\002\002ͨͩ\005L'\002ͩͱ\003\002\002\002ͪͫ\007O\002\002ͫͬ\007\036\002\002ͬͭ\005L'\002ͭͮ\007\032\002\002ͮͯ\005L'\002ͯͱ\003\002\002\002Ͱ͠\003\002\002\002Ͱ͢\003\002\002\002Ͱͤ\003\002\002\002Ͱͪ\003\002\002\002ͱK\003\002\002\002Ͳͳ\007P\002\002ͳͼ\007Q\002\002ʹ͵\007P\002\002͵ͼ\007R\002\002Ͷͷ\007S\002\002ͷͼ\007T\002\002͸͹\005,\027\002͹ͺ\t\r\002\002ͺͼ\003\002\002\002ͻͲ\003\002\002\002ͻʹ\003\002\002\002ͻͶ\003\002\002\002ͻ͸\003\002\002\002ͼM\003\002\002\002ͽ;\007a\002\002;΂\t\016\002\002Ϳ΀\007b\002\002΀΂\t\017\002\002΁ͽ\003\002\002\002΁Ϳ\003\002\002\002΂O\003\002\002\002΃Έ\005R*\002΄΅\007\004\002\002΅·\005R*\002Ά΄\003\002\002\002·Ί\003\002\002\002ΈΆ\003\002\002\002ΈΉ\003\002\002\002ΉQ\003\002\002\002ΊΈ\003\002\002\002΋Α\007\002\002ΌΑ\005T+\002΍Α\005X-\002ΎΑ\007\002\002ΏΑ\007\002\002ΐ΋\003\002\002\002ΐΌ\003\002\002\002ΐ΍\003\002\002\002ΐΎ\003\002\002\002ΐΏ\003\002\002\002ΑS\003\002\002\002ΒΓ\007\002\002ΓU\003\002\002\002ΔΗ\007\002\002ΕΗ\007\002\002ΖΔ\003\002\002\002ΖΕ\003\002\002\002ΗW\003\002\002\002ΘΙ\t\020\002\002ΙY\003\002\002\002p¡§ÆÏÒÖØÛáèóöúāĉďĒĔĠħīįĳĺŃņŊœŖŚŞũŬųƆƊƎƒƖƚƜƧƬƵƿǄǆǌǐǒǚǫǴȁȉȋȐȖȞȧȭȵȻȿɄɉɏɝɟɱɼʇʌʓʖʚʥʩʱʵˎˑ˙˟˥˫˴̴̝̣̮̺͍͖͙̃̌͊̕͜Ͱͻ΁ΈΐΖ".toCharArray());
/*      */     
/*      */ 
/* 6846 */     _decisionToDFA = new org.antlr.v4.runtime.dfa.DFA[_ATN.getNumberOfDecisions()];
/* 6847 */     for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
/* 6848 */       _decisionToDFA[i] = new org.antlr.v4.runtime.dfa.DFA(_ATN.getDecisionState(i), i);
/*      */     }
/*      */   }
/*      */ }


/* Location:              /Users/gchen/Downloads/AppDynamics/events-service/lib/analytics-processor.jar!/com/appdynamics/analytics/processor/query/generated/SqlBaseParser.class
 * Java compiler version: 7 (51.0)
 * JD-Core Version:       0.7.1
 */